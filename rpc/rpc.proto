syntax = "proto3";

package rpc;

// Node services implement the core functionality of the overlay network,
// responsible for routing messages.
service Node {
  
  // Ping the connection and swap MultiAddresses.
  rpc Ping (MultiAddress) returns (MultiAddress);

  // Get all peers connected to the Node.
  rpc Peers (Nothing) returns (MultiAddresses);

  // Send an OrderFragment to some target Node.
  rpc SendOrderFragment (OrderFragment) returns (MultiAddress);

  // Send a ResultFragment to some target Node, where the ResultFragment is the
  // result of a computation on two OrderFragments.
  rpc SendResultFragment (ResultFragment) returns (MultiAddress);
}

// An OrderFragment is a message contains the details of an order fragment.
message OrderFragment {
  // Network data.
  Address to = 1;
  Address from = 2;

  // Public data.
  bytes id = 3;
  bytes orderId = 4;
  int64 orderType = 5;
  int64 orderBuySell = 6;

  // Private data.
  bytes fstCodeShare = 7;
  bytes sndCodeShare = 8;
  bytes priceShare = 9;
  bytes maxVolumeShare = 10;
  bytes minVolumeShare = 11;
}

// A ResultFragment message is the network representation of a
// compute.ResultFragment and the metadata needed to distribute it through the
// network.
message ResultFragment {
  // Network data.
  Address to = 1;
  Address from = 2;

  // Public data.
  bytes id = 3;
  bytes buyOrderId = 4;
  bytes sellOrderId = 5;
  bytes buyOrderFragmentId = 6;
  bytes sellOrderFragmentId = 7;

  // Private data.
  bytes fstCodeShare = 8;
  bytes sndCodeShare = 9;
  bytes priceShare = 10;
  bytes maxVolumeShare = 11;
  bytes minVolumeShare = 12;
}

// An Address message is the network representation of an identity.Address.
message Address {
  string address = 1;
}

// A MultiAddress is the public multiaddress of a Node in the overlay network.
// It provides the Republic address of the Node, as well as the network
// address.
message MultiAddress {
  string multi = 1;
}

// MultiAddresses are public multiaddress of multiple Nodes in the overlay
// network.
message MultiAddresses {
  repeated MultiAddress multis = 1;
}

// Nothing is in this message. It is used to send nothing, or signal a
// successful response.
message Nothing {}