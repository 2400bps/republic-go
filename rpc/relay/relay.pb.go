// Code generated by protoc-gen-go. DO NOT EDIT.
// source: relay.proto

/*
Package relay is a generated protocol buffer package.

It is generated from these files:
	relay.proto

It has these top-level messages:
	SyncRequest
	SyncResponse
	OrderbookEntry
	Order
*/
package relay

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderStatus int32

const (
	OrderStatus_Open        OrderStatus = 0
	OrderStatus_Canceled    OrderStatus = 1
	OrderStatus_Unconfirmed OrderStatus = 2
	OrderStatus_Confirmed   OrderStatus = 3
	OrderStatus_Settled     OrderStatus = 4
)

var OrderStatus_name = map[int32]string{
	0: "Open",
	1: "Canceled",
	2: "Unconfirmed",
	3: "Confirmed",
	4: "Settled",
}
var OrderStatus_value = map[string]int32{
	"Open":        0,
	"Canceled":    1,
	"Unconfirmed": 2,
	"Confirmed":   3,
	"Settled":     4,
}

func (x OrderStatus) String() string {
	return proto.EnumName(OrderStatus_name, int32(x))
}
func (OrderStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type SyncRequest struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Epoch     []byte `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SyncRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SyncRequest) GetEpoch() []byte {
	if m != nil {
		return m.Epoch
	}
	return nil
}

type SyncResponse struct {
	Signature []byte          `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Epoch     []byte          `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Entry     *OrderbookEntry `protobuf:"bytes,3,opt,name=entry" json:"entry,omitempty"`
}

func (m *SyncResponse) Reset()                    { *m = SyncResponse{} }
func (m *SyncResponse) String() string            { return proto.CompactTextString(m) }
func (*SyncResponse) ProtoMessage()               {}
func (*SyncResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SyncResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SyncResponse) GetEpoch() []byte {
	if m != nil {
		return m.Epoch
	}
	return nil
}

func (m *SyncResponse) GetEntry() *OrderbookEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type OrderbookEntry struct {
	Order       *Order      `protobuf:"bytes,1,opt,name=order" json:"order,omitempty"`
	OrderStatus OrderStatus `protobuf:"varint,2,opt,name=orderStatus,enum=relay.OrderStatus" json:"orderStatus,omitempty"`
}

func (m *OrderbookEntry) Reset()                    { *m = OrderbookEntry{} }
func (m *OrderbookEntry) String() string            { return proto.CompactTextString(m) }
func (*OrderbookEntry) ProtoMessage()               {}
func (*OrderbookEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OrderbookEntry) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderbookEntry) GetOrderStatus() OrderStatus {
	if m != nil {
		return m.OrderStatus
	}
	return OrderStatus_Open
}

type Order struct {
	OrderId []byte `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Expiry  int64  `protobuf:"varint,2,opt,name=expiry" json:"expiry,omitempty"`
	Type    int32  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Tokens  int32  `protobuf:"varint,4,opt,name=tokens" json:"tokens,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Order) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *Order) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Order) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Order) GetTokens() int32 {
	if m != nil {
		return m.Tokens
	}
	return 0
}

func init() {
	proto.RegisterType((*SyncRequest)(nil), "relay.SyncRequest")
	proto.RegisterType((*SyncResponse)(nil), "relay.SyncResponse")
	proto.RegisterType((*OrderbookEntry)(nil), "relay.OrderbookEntry")
	proto.RegisterType((*Order)(nil), "relay.Order")
	proto.RegisterEnum("relay.OrderStatus", OrderStatus_name, OrderStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Relay service

type RelayClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Relay_SyncClient, error)
}

type relayClient struct {
	cc *grpc.ClientConn
}

func NewRelayClient(cc *grpc.ClientConn) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Relay_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Relay_serviceDesc.Streams[0], c.cc, "/relay.Relay/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &relaySyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Relay_SyncClient interface {
	Recv() (*SyncResponse, error)
	grpc.ClientStream
}

type relaySyncClient struct {
	grpc.ClientStream
}

func (x *relaySyncClient) Recv() (*SyncResponse, error) {
	m := new(SyncResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Relay service

type RelayServer interface {
	Sync(*SyncRequest, Relay_SyncServer) error
}

func RegisterRelayServer(s *grpc.Server, srv RelayServer) {
	s.RegisterService(&_Relay_serviceDesc, srv)
}

func _Relay_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RelayServer).Sync(m, &relaySyncServer{stream})
}

type Relay_SyncServer interface {
	Send(*SyncResponse) error
	grpc.ServerStream
}

type relaySyncServer struct {
	grpc.ServerStream
}

func (x *relaySyncServer) Send(m *SyncResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Relay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "relay.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Relay_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relay.proto",
}

func init() { proto.RegisterFile("relay.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x52, 0xcb, 0x4e, 0xeb, 0x30,
	0x10, 0xbd, 0x69, 0xe3, 0x3e, 0xc6, 0xb9, 0xa5, 0x1a, 0x1e, 0x8a, 0x10, 0x8b, 0x2a, 0xab, 0x0a,
	0xa4, 0x0a, 0x02, 0x2b, 0x76, 0xa8, 0x62, 0xc1, 0xaa, 0x92, 0x2b, 0x3e, 0x20, 0x4d, 0x06, 0x28,
	0x2d, 0x76, 0x70, 0x5c, 0x89, 0xfc, 0x3d, 0xb2, 0x9d, 0x42, 0xba, 0x65, 0x37, 0xe7, 0xe1, 0x99,
	0x39, 0x1a, 0x03, 0xd7, 0xb4, 0xcd, 0xea, 0x59, 0xa9, 0x95, 0x51, 0xc8, 0x1c, 0x48, 0x1e, 0x80,
	0x2f, 0x6b, 0x99, 0x0b, 0xfa, 0xdc, 0x51, 0x65, 0xf0, 0x02, 0x86, 0xd5, 0xfa, 0x55, 0x66, 0x66,
	0xa7, 0x29, 0x0e, 0x26, 0xc1, 0x34, 0x12, 0xbf, 0x04, 0x9e, 0x00, 0xa3, 0x52, 0xe5, 0x6f, 0x71,
	0xc7, 0x29, 0x1e, 0x24, 0x0a, 0x22, 0xdf, 0xa2, 0x2a, 0x95, 0xac, 0xe8, 0x2f, 0x3d, 0xf0, 0x0a,
	0x18, 0x49, 0xa3, 0xeb, 0xb8, 0x3b, 0x09, 0xa6, 0x3c, 0x3d, 0x9d, 0xf9, 0x55, 0x17, 0xba, 0x20,
	0xbd, 0x52, 0x6a, 0xf3, 0x68, 0x45, 0xe1, 0x3d, 0xc9, 0x3b, 0x8c, 0x0e, 0x05, 0x4c, 0x80, 0x29,
	0xcb, 0xb8, 0x71, 0x3c, 0x8d, 0xda, 0xcf, 0x85, 0x97, 0xf0, 0x0e, 0xb8, 0x2b, 0x96, 0x26, 0x33,
	0xbb, 0xca, 0x8d, 0x1f, 0xa5, 0xd8, 0x76, 0x7a, 0x45, 0xb4, 0x6d, 0x09, 0x01, 0x73, 0x1a, 0xc6,
	0xd0, 0x77, 0xfc, 0x53, 0xd1, 0x64, 0xda, 0x43, 0x3c, 0x83, 0x1e, 0x7d, 0x95, 0x6b, 0x5d, 0xbb,
	0x9e, 0x5d, 0xd1, 0x20, 0x44, 0x08, 0x4d, 0x5d, 0x92, 0x8b, 0xc4, 0x84, 0xab, 0xad, 0xd7, 0xa8,
	0x0d, 0xc9, 0x2a, 0x0e, 0x1d, 0xdb, 0xa0, 0x4b, 0x01, 0xbc, 0xb5, 0x02, 0x0e, 0x20, 0x5c, 0x94,
	0x24, 0xc7, 0xff, 0x30, 0x82, 0xc1, 0x3c, 0x93, 0x39, 0x6d, 0xa9, 0x18, 0x07, 0x78, 0x04, 0xfc,
	0x59, 0xe6, 0x4a, 0xbe, 0xac, 0xf5, 0x07, 0x15, 0xe3, 0x0e, 0xfe, 0x87, 0xe1, 0xfc, 0x07, 0x76,
	0x91, 0x43, 0x7f, 0x49, 0xc6, 0x58, 0x73, 0x98, 0xde, 0x03, 0x13, 0x36, 0x1c, 0xde, 0x40, 0x68,
	0x0f, 0x84, 0xfb, 0xb0, 0xad, 0x83, 0x9f, 0x1f, 0x1f, 0x70, 0xfe, 0x82, 0xd7, 0xc1, 0xaa, 0xe7,
	0x3e, 0xc9, 0xed, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x78, 0xe3, 0xa5, 0x81, 0x33, 0x02, 0x00,
	0x00,
}
