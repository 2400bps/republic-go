// Code generated by protoc-gen-go. DO NOT EDIT.
// source: swarm.proto

/*
Package swarmer is a generated protocol buffer package.

It is generated from these files:
	swarm.proto

It has these top-level messages:
	PingRequest
	PingResponse
	QueryRequest
	QueryResponse
*/
package swarmer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PingRequest struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PingRequest) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type QueryRequest struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *QueryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryResponse struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *QueryResponse) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "swarmer.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "swarmer.PingResponse")
	proto.RegisterType((*QueryRequest)(nil), "swarmer.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "swarmer.QueryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Swarm service

type SwarmClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (Swarm_QueryClient, error)
}

type swarmClient struct {
	cc *grpc.ClientConn
}

func NewSwarmClient(cc *grpc.ClientConn) SwarmClient {
	return &swarmClient{cc}
}

func (c *swarmClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/swarmer.Swarm/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (Swarm_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[0], c.cc, "/swarmer.Swarm/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type swarmQueryClient struct {
	grpc.ClientStream
}

func (x *swarmQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Swarm service

type SwarmServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Query(*QueryRequest, Swarm_QueryServer) error
}

func RegisterSwarmServer(s *grpc.Server, srv SwarmServer) {
	s.RegisterService(&_Swarm_serviceDesc, srv)
}

func _Swarm_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/swarmer.Swarm/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swarm_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).Query(m, &swarmQueryServer{stream})
}

type Swarm_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type swarmQueryServer struct {
	grpc.ServerStream
}

func (x *swarmQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Swarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "swarmer.Swarm",
	HandlerType: (*SwarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Swarm_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Swarm_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "swarm.proto",
}

func init() { proto.RegisterFile("swarm.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2e, 0x2e, 0x4f, 0x2c,
	0xca, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0x73, 0x52, 0x8b, 0x94, 0xfc, 0xb9,
	0xb8, 0x03, 0x32, 0xf3, 0xd2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x64, 0xb8, 0x38,
	0x8b, 0x33, 0xd3, 0xf3, 0x12, 0x4b, 0x4a, 0x8b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82,
	0x10, 0x02, 0x42, 0x4a, 0x5c, 0x3c, 0xb9, 0xa5, 0x39, 0x25, 0x99, 0x8e, 0x29, 0x29, 0x45, 0xa9,
	0xc5, 0xc5, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x28, 0x62, 0x4a, 0x7c, 0x5c, 0x3c, 0x10,
	0x03, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a, 0x53, 0x95, 0xdc, 0xb8, 0x78, 0x02, 0x4b, 0x53, 0x8b, 0x2a,
	0x89, 0xb3, 0x41, 0x82, 0x8b, 0x3d, 0x11, 0xc5, 0x70, 0x18, 0x57, 0x29, 0x90, 0x8b, 0x17, 0x6a,
	0x0e, 0xc4, 0x60, 0xca, 0x9d, 0x6a, 0x54, 0xc6, 0xc5, 0x1a, 0x0c, 0x0a, 0x06, 0x21, 0x63, 0x2e,
	0x16, 0x90, 0x9b, 0x85, 0x44, 0xf4, 0xa0, 0xc1, 0xa2, 0x87, 0x14, 0x26, 0x52, 0xa2, 0x68, 0xa2,
	0x50, 0xfb, 0x2d, 0xb8, 0x58, 0xc1, 0x0e, 0x12, 0x42, 0xc8, 0x23, 0x7b, 0x54, 0x4a, 0x0c, 0x5d,
	0x18, 0xa2, 0xcf, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x07, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x83, 0x7e, 0xbc, 0x19, 0x92, 0x01, 0x00, 0x00,
}
