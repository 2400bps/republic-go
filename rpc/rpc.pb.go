// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Node
	Fragment
	Path
	MultiAddress
	MultiAddresses
	Nothing
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Node is the public address of an entity in the overlay network. It contains
// connection details for the entity
type Node struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Ip      string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Port    string `protobuf:"bytes,3,opt,name=port" json:"port,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Node) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Node) GetPort() string {
	if m != nil {
		return m.Port
	}
	return ""
}

// Fragment is the order fragment we passed in the overlay network
type Fragment struct {
	Data string `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
}

func (m *Fragment) Reset()                    { *m = Fragment{} }
func (m *Fragment) String() string            { return proto.CompactTextString(m) }
func (*Fragment) ProtoMessage()               {}
func (*Fragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Fragment) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// Path messages represent a sender attempting to reach a target. Both the
// sender and the target are represented by an ID.
type Path struct {
	From *Node  `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *Path) Reset()                    { *m = Path{} }
func (m *Path) String() string            { return proto.CompactTextString(m) }
func (*Path) ProtoMessage()               {}
func (*Path) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Path) GetFrom() *Node {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Path) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

// MultiAddress messages contain the public multiaddress of a Node in the
// overlay network.
type MultiAddress struct {
	Multi string `protobuf:"bytes,1,opt,name=multi" json:"multi,omitempty"`
}

func (m *MultiAddress) Reset()                    { *m = MultiAddress{} }
func (m *MultiAddress) String() string            { return proto.CompactTextString(m) }
func (*MultiAddress) ProtoMessage()               {}
func (*MultiAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MultiAddress) GetMulti() string {
	if m != nil {
		return m.Multi
	}
	return ""
}

// MultiAddresses messages contain the public multiaddress of multiple Nodes in
// the overlay network.
type MultiAddresses struct {
	Multis []string `protobuf:"bytes,1,rep,name=multis" json:"multis,omitempty"`
}

func (m *MultiAddresses) Reset()                    { *m = MultiAddresses{} }
func (m *MultiAddresses) String() string            { return proto.CompactTextString(m) }
func (*MultiAddresses) ProtoMessage()               {}
func (*MultiAddresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *MultiAddresses) GetMultis() []string {
	if m != nil {
		return m.Multis
	}
	return nil
}

// Nothing messages are empty.
type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*Node)(nil), "rpc.Node")
	proto.RegisterType((*Fragment)(nil), "rpc.Fragment")
	proto.RegisterType((*Path)(nil), "rpc.Path")
	proto.RegisterType((*MultiAddress)(nil), "rpc.MultiAddress")
	proto.RegisterType((*MultiAddresses)(nil), "rpc.MultiAddresses")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DHT service

type DHTClient interface {
	// Ping the Node to test the connection.
	Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	// Get peers connected to the Node.
	Peers(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MultiAddresses, error)
	// CloserPeers peers that are closer to the target than the Node.
	// It will return the multiaddress of the target node if target
	// is known to the server.
	CloserPeers(ctx context.Context, in *Path, opts ...grpc.CallOption) (*MultiAddresses, error)
	// Send order fragment to other node
	Send(ctx context.Context, in *Fragment, opts ...grpc.CallOption) (*Nothing, error)
}

type dHTClient struct {
	cc *grpc.ClientConn
}

func NewDHTClient(cc *grpc.ClientConn) DHTClient {
	return &dHTClient{cc}
}

func (c *dHTClient) Ping(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/rpc.DHT/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Peers(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MultiAddresses, error) {
	out := new(MultiAddresses)
	err := grpc.Invoke(ctx, "/rpc.DHT/Peers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) CloserPeers(ctx context.Context, in *Path, opts ...grpc.CallOption) (*MultiAddresses, error) {
	out := new(MultiAddresses)
	err := grpc.Invoke(ctx, "/rpc.DHT/CloserPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHTClient) Send(ctx context.Context, in *Fragment, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DHT/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DHT service

type DHTServer interface {
	// Ping the Node to test the connection.
	Ping(context.Context, *Node) (*Node, error)
	// Get peers connected to the Node.
	Peers(context.Context, *Node) (*MultiAddresses, error)
	// CloserPeers peers that are closer to the target than the Node.
	// It will return the multiaddress of the target node if target
	// is known to the server.
	CloserPeers(context.Context, *Path) (*MultiAddresses, error)
	// Send order fragment to other node
	Send(context.Context, *Fragment) (*Nothing, error)
}

func RegisterDHTServer(s *grpc.Server, srv DHTServer) {
	s.RegisterService(&_DHT_serviceDesc, srv)
}

func _DHT_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DHT/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Ping(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DHT/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Peers(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_CloserPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Path)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).CloserPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DHT/CloserPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).CloserPeers(ctx, req.(*Path))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHT_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fragment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHTServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DHT/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHTServer).Send(ctx, req.(*Fragment))
	}
	return interceptor(ctx, in, info, handler)
}

var _DHT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DHT",
	HandlerType: (*DHTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _DHT_Ping_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _DHT_Peers_Handler,
		},
		{
			MethodName: "CloserPeers",
			Handler:    _DHT_CloserPeers_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _DHT_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0xd1, 0x4a, 0xc3, 0x30,
	0x14, 0xa5, 0x6d, 0xb6, 0xd9, 0xbb, 0xb9, 0x87, 0xab, 0x48, 0x19, 0x2a, 0x12, 0x05, 0xfb, 0xe2,
	0x1e, 0x26, 0x7e, 0x80, 0x38, 0xc4, 0x17, 0x47, 0xa9, 0xfe, 0x40, 0x5d, 0x63, 0x17, 0x58, 0x9b,
	0x90, 0xc4, 0xff, 0xf1, 0x53, 0x25, 0xd7, 0x94, 0x15, 0xf1, 0xed, 0x9c, 0x7b, 0x0e, 0xf7, 0x9c,
	0x9b, 0x40, 0x6a, 0xf4, 0x76, 0xa9, 0x8d, 0x72, 0x0a, 0x13, 0xa3, 0xb7, 0x7c, 0x0d, 0x6c, 0xa3,
	0x6a, 0x81, 0x19, 0x4c, 0xaa, 0xba, 0x36, 0xc2, 0xda, 0x2c, 0xba, 0x8a, 0xf2, 0xb4, 0xec, 0x29,
	0xce, 0x21, 0x96, 0x3a, 0x8b, 0x69, 0x18, 0x4b, 0x8d, 0x08, 0x4c, 0x2b, 0xe3, 0xb2, 0x84, 0x26,
	0x84, 0xf9, 0x25, 0x1c, 0x3d, 0x9b, 0xaa, 0x69, 0x45, 0xe7, 0xbc, 0x5e, 0x57, 0xae, 0x0a, 0x6b,
	0x08, 0xf3, 0x07, 0x60, 0x45, 0xe5, 0x76, 0x78, 0x01, 0xec, 0xd3, 0xa8, 0x96, 0xb4, 0xe9, 0x2a,
	0x5d, 0xfa, 0x32, 0x3e, 0xbe, 0xa4, 0xb1, 0x8f, 0x72, 0xaa, 0x8f, 0x72, 0x8a, 0xdf, 0xc0, 0xec,
	0xf5, 0x6b, 0xef, 0xe4, 0x63, 0xa8, 0x72, 0x0a, 0xa3, 0xd6, 0xf3, 0xb0, 0xfb, 0x97, 0xf0, 0x1c,
	0xe6, 0x43, 0x97, 0xb0, 0x78, 0x06, 0x63, 0x92, 0xfc, 0x2d, 0x49, 0x9e, 0x96, 0x81, 0xf1, 0x14,
	0x26, 0x1b, 0xe5, 0x76, 0xb2, 0x6b, 0x56, 0xdf, 0x11, 0x24, 0xeb, 0x97, 0x77, 0x3c, 0x07, 0x56,
	0xc8, 0xae, 0xc1, 0x43, 0x97, 0xc5, 0x01, 0xe2, 0x2d, 0x8c, 0x0a, 0x21, 0x8c, 0x1d, 0xca, 0x27,
	0x04, 0xff, 0x24, 0xde, 0xc1, 0xf4, 0x69, 0xaf, 0xac, 0x30, 0x43, 0xbb, 0x3f, 0xf9, 0x7f, 0xfb,
	0x35, 0xb0, 0x37, 0xd1, 0xd5, 0x78, 0x4c, 0x62, 0xff, 0x74, 0x8b, 0x59, 0x48, 0xa1, 0x8a, 0x1f,
	0x63, 0xfa, 0xa6, 0xfb, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x34, 0x53, 0x77, 0xb3, 0x01,
	0x00, 0x00,
}
