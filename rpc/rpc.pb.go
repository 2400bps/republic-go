// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Nothing
	Address
	MultiAddress
	Query
	Order
	OrderId
	OrderFragment
	OrderFragmentId
	SyncRequest
	SyncBlock
	SignOrderFragmentRequest
	OpenOrderRequest
	CancelOrderRequest
	Computation
	Delta
	DeltaFragment
	DriveMessage
	Signatures
	Block
	Tx
	Proposal
	Prepare
	Commit
	Fault
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MultiAddress struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *MultiAddress) Reset()                    { *m = MultiAddress{} }
func (m *MultiAddress) String() string            { return proto.CompactTextString(m) }
func (*MultiAddress) ProtoMessage()               {}
func (*MultiAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiAddress) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MultiAddress) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

type Query struct {
	From   *MultiAddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Target *Address      `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Query) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Query) GetTarget() *Address {
	if m != nil {
		return m.Target
	}
	return nil
}

type Order struct {
	Id     *OrderId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type   int64    `protobuf:"varint,2,opt,name=type" json:"type,omitempty"`
	Parity int64    `protobuf:"varint,3,opt,name=parity" json:"parity,omitempty"`
	Expiry int64    `protobuf:"varint,4,opt,name=expiry" json:"expiry,omitempty"`
}

func (m *Order) Reset()                    { *m = Order{} }
func (m *Order) String() string            { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()               {}
func (*Order) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Order) GetId() *OrderId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Order) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *Order) GetParity() int64 {
	if m != nil {
		return m.Parity
	}
	return 0
}

func (m *Order) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type OrderId struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderId   []byte `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *OrderId) Reset()                    { *m = OrderId{} }
func (m *OrderId) String() string            { return proto.CompactTextString(m) }
func (*OrderId) ProtoMessage()               {}
func (*OrderId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OrderId) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderId) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type OrderFragment struct {
	Id             *OrderFragmentId `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Order          *Order           `protobuf:"bytes,2,opt,name=order" json:"order,omitempty"`
	FstCodeShare   []byte           `protobuf:"bytes,3,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare   []byte           `protobuf:"bytes,4,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare     []byte           `protobuf:"bytes,5,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare []byte           `protobuf:"bytes,6,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare []byte           `protobuf:"bytes,7,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *OrderFragment) Reset()                    { *m = OrderFragment{} }
func (m *OrderFragment) String() string            { return proto.CompactTextString(m) }
func (*OrderFragment) ProtoMessage()               {}
func (*OrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OrderFragment) GetId() *OrderFragmentId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *OrderFragment) GetOrder() *Order {
	if m != nil {
		return m.Order
	}
	return nil
}

func (m *OrderFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *OrderFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *OrderFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *OrderFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *OrderFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type OrderFragmentId struct {
	Signature       []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderFragmentId []byte `protobuf:"bytes,2,opt,name=orderFragmentId,proto3" json:"orderFragmentId,omitempty"`
}

func (m *OrderFragmentId) Reset()                    { *m = OrderFragmentId{} }
func (m *OrderFragmentId) String() string            { return proto.CompactTextString(m) }
func (*OrderFragmentId) ProtoMessage()               {}
func (*OrderFragmentId) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OrderFragmentId) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderFragmentId) GetOrderFragmentId() []byte {
	if m != nil {
		return m.OrderFragmentId
	}
	return nil
}

type SyncRequest struct {
	From *MultiAddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SyncRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

type SyncBlock struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	EpochHash []byte `protobuf:"bytes,3,opt,name=epochHash,proto3" json:"epochHash,omitempty"`
	// Types that are valid to be assigned to OrderBlock:
	//	*SyncBlock_Open
	//	*SyncBlock_Canceled
	//	*SyncBlock_Unconfirmed
	//	*SyncBlock_Confirmed
	//	*SyncBlock_Settled
	OrderBlock isSyncBlock_OrderBlock `protobuf_oneof:"OrderBlock"`
}

func (m *SyncBlock) Reset()                    { *m = SyncBlock{} }
func (m *SyncBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock) ProtoMessage()               {}
func (*SyncBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type isSyncBlock_OrderBlock interface {
	isSyncBlock_OrderBlock()
}

type SyncBlock_Open struct {
	Open *Order `protobuf:"bytes,4,opt,name=open,oneof"`
}
type SyncBlock_Canceled struct {
	Canceled *Order `protobuf:"bytes,5,opt,name=canceled,oneof"`
}
type SyncBlock_Unconfirmed struct {
	Unconfirmed *Order `protobuf:"bytes,6,opt,name=unconfirmed,oneof"`
}
type SyncBlock_Confirmed struct {
	Confirmed *Order `protobuf:"bytes,7,opt,name=confirmed,oneof"`
}
type SyncBlock_Settled struct {
	Settled *Order `protobuf:"bytes,8,opt,name=settled,oneof"`
}

func (*SyncBlock_Open) isSyncBlock_OrderBlock()        {}
func (*SyncBlock_Canceled) isSyncBlock_OrderBlock()    {}
func (*SyncBlock_Unconfirmed) isSyncBlock_OrderBlock() {}
func (*SyncBlock_Confirmed) isSyncBlock_OrderBlock()   {}
func (*SyncBlock_Settled) isSyncBlock_OrderBlock()     {}

func (m *SyncBlock) GetOrderBlock() isSyncBlock_OrderBlock {
	if m != nil {
		return m.OrderBlock
	}
	return nil
}

func (m *SyncBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SyncBlock) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *SyncBlock) GetEpochHash() []byte {
	if m != nil {
		return m.EpochHash
	}
	return nil
}

func (m *SyncBlock) GetOpen() *Order {
	if x, ok := m.GetOrderBlock().(*SyncBlock_Open); ok {
		return x.Open
	}
	return nil
}

func (m *SyncBlock) GetCanceled() *Order {
	if x, ok := m.GetOrderBlock().(*SyncBlock_Canceled); ok {
		return x.Canceled
	}
	return nil
}

func (m *SyncBlock) GetUnconfirmed() *Order {
	if x, ok := m.GetOrderBlock().(*SyncBlock_Unconfirmed); ok {
		return x.Unconfirmed
	}
	return nil
}

func (m *SyncBlock) GetConfirmed() *Order {
	if x, ok := m.GetOrderBlock().(*SyncBlock_Confirmed); ok {
		return x.Confirmed
	}
	return nil
}

func (m *SyncBlock) GetSettled() *Order {
	if x, ok := m.GetOrderBlock().(*SyncBlock_Settled); ok {
		return x.Settled
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SyncBlock) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SyncBlock_OneofMarshaler, _SyncBlock_OneofUnmarshaler, _SyncBlock_OneofSizer, []interface{}{
		(*SyncBlock_Open)(nil),
		(*SyncBlock_Canceled)(nil),
		(*SyncBlock_Unconfirmed)(nil),
		(*SyncBlock_Confirmed)(nil),
		(*SyncBlock_Settled)(nil),
	}
}

func _SyncBlock_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SyncBlock)
	// OrderBlock
	switch x := m.OrderBlock.(type) {
	case *SyncBlock_Open:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Open); err != nil {
			return err
		}
	case *SyncBlock_Canceled:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Canceled); err != nil {
			return err
		}
	case *SyncBlock_Unconfirmed:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Unconfirmed); err != nil {
			return err
		}
	case *SyncBlock_Confirmed:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Confirmed); err != nil {
			return err
		}
	case *SyncBlock_Settled:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Settled); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SyncBlock.OrderBlock has unexpected type %T", x)
	}
	return nil
}

func _SyncBlock_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SyncBlock)
	switch tag {
	case 4: // OrderBlock.open
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.OrderBlock = &SyncBlock_Open{msg}
		return true, err
	case 5: // OrderBlock.canceled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.OrderBlock = &SyncBlock_Canceled{msg}
		return true, err
	case 6: // OrderBlock.unconfirmed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.OrderBlock = &SyncBlock_Unconfirmed{msg}
		return true, err
	case 7: // OrderBlock.confirmed
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.OrderBlock = &SyncBlock_Confirmed{msg}
		return true, err
	case 8: // OrderBlock.settled
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Order)
		err := b.DecodeMessage(msg)
		m.OrderBlock = &SyncBlock_Settled{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SyncBlock_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SyncBlock)
	// OrderBlock
	switch x := m.OrderBlock.(type) {
	case *SyncBlock_Open:
		s := proto.Size(x.Open)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SyncBlock_Canceled:
		s := proto.Size(x.Canceled)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SyncBlock_Unconfirmed:
		s := proto.Size(x.Unconfirmed)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SyncBlock_Confirmed:
		s := proto.Size(x.Confirmed)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SyncBlock_Settled:
		s := proto.Size(x.Settled)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type SignOrderFragmentRequest struct {
	From            *MultiAddress    `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderFragmentId *OrderFragmentId `protobuf:"bytes,2,opt,name=orderFragmentId" json:"orderFragmentId,omitempty"`
}

func (m *SignOrderFragmentRequest) Reset()                    { *m = SignOrderFragmentRequest{} }
func (m *SignOrderFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*SignOrderFragmentRequest) ProtoMessage()               {}
func (*SignOrderFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SignOrderFragmentRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SignOrderFragmentRequest) GetOrderFragmentId() *OrderFragmentId {
	if m != nil {
		return m.OrderFragmentId
	}
	return nil
}

type OpenOrderRequest struct {
	From          *MultiAddress  `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderFragment *OrderFragment `protobuf:"bytes,2,opt,name=orderFragment" json:"orderFragment,omitempty"`
}

func (m *OpenOrderRequest) Reset()                    { *m = OpenOrderRequest{} }
func (m *OpenOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderRequest) ProtoMessage()               {}
func (*OpenOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *OpenOrderRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *OpenOrderRequest) GetOrderFragment() *OrderFragment {
	if m != nil {
		return m.OrderFragment
	}
	return nil
}

type CancelOrderRequest struct {
	From            *MultiAddress    `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderFragmentId *OrderFragmentId `protobuf:"bytes,2,opt,name=orderFragmentId" json:"orderFragmentId,omitempty"`
}

func (m *CancelOrderRequest) Reset()                    { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()               {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CancelOrderRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CancelOrderRequest) GetOrderFragmentId() *OrderFragmentId {
	if m != nil {
		return m.OrderFragmentId
	}
	return nil
}

type Computation struct {
	MultiAddress  *MultiAddress  `protobuf:"bytes,1,opt,name=multiAddress" json:"multiAddress,omitempty"`
	DeltaFragment *DeltaFragment `protobuf:"bytes,2,opt,name=deltaFragment" json:"deltaFragment,omitempty"`
}

func (m *Computation) Reset()                    { *m = Computation{} }
func (m *Computation) String() string            { return proto.CompactTextString(m) }
func (*Computation) ProtoMessage()               {}
func (*Computation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Computation) GetMultiAddress() *MultiAddress {
	if m != nil {
		return m.MultiAddress
	}
	return nil
}

func (m *Computation) GetDeltaFragment() *DeltaFragment {
	if m != nil {
		return m.DeltaFragment
	}
	return nil
}

type Delta struct {
	Signature      []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Id             []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	BuyOrderId     []byte `protobuf:"bytes,3,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId    []byte `protobuf:"bytes,4,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	FstCode        []byte `protobuf:"bytes,5,opt,name=fstCode,proto3" json:"fstCode,omitempty"`
	SndCode        []byte `protobuf:"bytes,6,opt,name=sndCode,proto3" json:"sndCode,omitempty"`
	Price          []byte `protobuf:"bytes,7,opt,name=price,proto3" json:"price,omitempty"`
	MaxVolumeShare []byte `protobuf:"bytes,8,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare []byte `protobuf:"bytes,9,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *Delta) Reset()                    { *m = Delta{} }
func (m *Delta) String() string            { return proto.CompactTextString(m) }
func (*Delta) ProtoMessage()               {}
func (*Delta) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Delta) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Delta) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Delta) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *Delta) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *Delta) GetFstCode() []byte {
	if m != nil {
		return m.FstCode
	}
	return nil
}

func (m *Delta) GetSndCode() []byte {
	if m != nil {
		return m.SndCode
	}
	return nil
}

func (m *Delta) GetPrice() []byte {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Delta) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *Delta) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type DeltaFragment struct {
	Signature           []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Id                  []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	DeltaId             []byte `protobuf:"bytes,3,opt,name=deltaId,proto3" json:"deltaId,omitempty"`
	BuyOrderId          []byte `protobuf:"bytes,4,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId         []byte `protobuf:"bytes,5,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyOrderFragmentId  []byte `protobuf:"bytes,6,opt,name=buyOrderFragmentId,proto3" json:"buyOrderFragmentId,omitempty"`
	SellOrderFragmentId []byte `protobuf:"bytes,7,opt,name=sellOrderFragmentId,proto3" json:"sellOrderFragmentId,omitempty"`
	FstCodeShare        []byte `protobuf:"bytes,8,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare        []byte `protobuf:"bytes,9,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare          []byte `protobuf:"bytes,10,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare      []byte `protobuf:"bytes,11,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare      []byte `protobuf:"bytes,12,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *DeltaFragment) Reset()                    { *m = DeltaFragment{} }
func (m *DeltaFragment) String() string            { return proto.CompactTextString(m) }
func (*DeltaFragment) ProtoMessage()               {}
func (*DeltaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeltaFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DeltaFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeltaFragment) GetDeltaId() []byte {
	if m != nil {
		return m.DeltaId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderFragmentId() []byte {
	if m != nil {
		return m.BuyOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderFragmentId() []byte {
	if m != nil {
		return m.SellOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *DeltaFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *DeltaFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type DriveMessage struct {
	// Types that are valid to be assigned to DriveMessage:
	//	*DriveMessage_Block
	//	*DriveMessage_Tx
	//	*DriveMessage_Proposal
	//	*DriveMessage_Prepare
	//	*DriveMessage_Commit
	//	*DriveMessage_Fault
	DriveMessage isDriveMessage_DriveMessage `protobuf_oneof:"driveMessage"`
}

func (m *DriveMessage) Reset()                    { *m = DriveMessage{} }
func (m *DriveMessage) String() string            { return proto.CompactTextString(m) }
func (*DriveMessage) ProtoMessage()               {}
func (*DriveMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type isDriveMessage_DriveMessage interface {
	isDriveMessage_DriveMessage()
}

type DriveMessage_Block struct {
	Block *Block `protobuf:"bytes,1,opt,name=block,oneof"`
}
type DriveMessage_Tx struct {
	Tx *Tx `protobuf:"bytes,2,opt,name=tx,oneof"`
}
type DriveMessage_Proposal struct {
	Proposal *Proposal `protobuf:"bytes,3,opt,name=proposal,oneof"`
}
type DriveMessage_Prepare struct {
	Prepare *Prepare `protobuf:"bytes,4,opt,name=prepare,oneof"`
}
type DriveMessage_Commit struct {
	Commit *Commit `protobuf:"bytes,5,opt,name=commit,oneof"`
}
type DriveMessage_Fault struct {
	Fault *Fault `protobuf:"bytes,6,opt,name=fault,oneof"`
}

func (*DriveMessage_Block) isDriveMessage_DriveMessage()    {}
func (*DriveMessage_Tx) isDriveMessage_DriveMessage()       {}
func (*DriveMessage_Proposal) isDriveMessage_DriveMessage() {}
func (*DriveMessage_Prepare) isDriveMessage_DriveMessage()  {}
func (*DriveMessage_Commit) isDriveMessage_DriveMessage()   {}
func (*DriveMessage_Fault) isDriveMessage_DriveMessage()    {}

func (m *DriveMessage) GetDriveMessage() isDriveMessage_DriveMessage {
	if m != nil {
		return m.DriveMessage
	}
	return nil
}

func (m *DriveMessage) GetBlock() *Block {
	if x, ok := m.GetDriveMessage().(*DriveMessage_Block); ok {
		return x.Block
	}
	return nil
}

func (m *DriveMessage) GetTx() *Tx {
	if x, ok := m.GetDriveMessage().(*DriveMessage_Tx); ok {
		return x.Tx
	}
	return nil
}

func (m *DriveMessage) GetProposal() *Proposal {
	if x, ok := m.GetDriveMessage().(*DriveMessage_Proposal); ok {
		return x.Proposal
	}
	return nil
}

func (m *DriveMessage) GetPrepare() *Prepare {
	if x, ok := m.GetDriveMessage().(*DriveMessage_Prepare); ok {
		return x.Prepare
	}
	return nil
}

func (m *DriveMessage) GetCommit() *Commit {
	if x, ok := m.GetDriveMessage().(*DriveMessage_Commit); ok {
		return x.Commit
	}
	return nil
}

func (m *DriveMessage) GetFault() *Fault {
	if x, ok := m.GetDriveMessage().(*DriveMessage_Fault); ok {
		return x.Fault
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*DriveMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _DriveMessage_OneofMarshaler, _DriveMessage_OneofUnmarshaler, _DriveMessage_OneofSizer, []interface{}{
		(*DriveMessage_Block)(nil),
		(*DriveMessage_Tx)(nil),
		(*DriveMessage_Proposal)(nil),
		(*DriveMessage_Prepare)(nil),
		(*DriveMessage_Commit)(nil),
		(*DriveMessage_Fault)(nil),
	}
}

func _DriveMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*DriveMessage)
	// driveMessage
	switch x := m.DriveMessage.(type) {
	case *DriveMessage_Block:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Block); err != nil {
			return err
		}
	case *DriveMessage_Tx:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Tx); err != nil {
			return err
		}
	case *DriveMessage_Proposal:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Proposal); err != nil {
			return err
		}
	case *DriveMessage_Prepare:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Prepare); err != nil {
			return err
		}
	case *DriveMessage_Commit:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Commit); err != nil {
			return err
		}
	case *DriveMessage_Fault:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Fault); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("DriveMessage.DriveMessage has unexpected type %T", x)
	}
	return nil
}

func _DriveMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*DriveMessage)
	switch tag {
	case 1: // driveMessage.block
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Block)
		err := b.DecodeMessage(msg)
		m.DriveMessage = &DriveMessage_Block{msg}
		return true, err
	case 2: // driveMessage.tx
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Tx)
		err := b.DecodeMessage(msg)
		m.DriveMessage = &DriveMessage_Tx{msg}
		return true, err
	case 3: // driveMessage.proposal
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Proposal)
		err := b.DecodeMessage(msg)
		m.DriveMessage = &DriveMessage_Proposal{msg}
		return true, err
	case 4: // driveMessage.prepare
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Prepare)
		err := b.DecodeMessage(msg)
		m.DriveMessage = &DriveMessage_Prepare{msg}
		return true, err
	case 5: // driveMessage.commit
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Commit)
		err := b.DecodeMessage(msg)
		m.DriveMessage = &DriveMessage_Commit{msg}
		return true, err
	case 6: // driveMessage.fault
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Fault)
		err := b.DecodeMessage(msg)
		m.DriveMessage = &DriveMessage_Fault{msg}
		return true, err
	default:
		return false, nil
	}
}

func _DriveMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*DriveMessage)
	// driveMessage
	switch x := m.DriveMessage.(type) {
	case *DriveMessage_Block:
		s := proto.Size(x.Block)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DriveMessage_Tx:
		s := proto.Size(x.Tx)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DriveMessage_Proposal:
		s := proto.Size(x.Proposal)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DriveMessage_Prepare:
		s := proto.Size(x.Prepare)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DriveMessage_Commit:
		s := proto.Size(x.Commit)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *DriveMessage_Fault:
		s := proto.Size(x.Fault)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Signatures struct {
	Signature [][]byte `protobuf:"bytes,1,rep,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Signatures) Reset()                    { *m = Signatures{} }
func (m *Signatures) String() string            { return proto.CompactTextString(m) }
func (*Signatures) ProtoMessage()               {}
func (*Signatures) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Signatures) GetSignature() [][]byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Block struct {
	Height    int64  `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Rank      int64  `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	EpocHash  []byte `protobuf:"bytes,3,opt,name=epocHash,proto3" json:"epocHash,omitempty"`
	Txs       []*Tx  `protobuf:"bytes,4,rep,name=Txs" json:"Txs,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Block) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Block) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Block) GetEpocHash() []byte {
	if m != nil {
		return m.EpocHash
	}
	return nil
}

func (m *Block) GetTxs() []*Tx {
	if m != nil {
		return m.Txs
	}
	return nil
}

func (m *Block) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Tx struct {
	Tx []byte `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *Tx) Reset()                    { *m = Tx{} }
func (m *Tx) String() string            { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()               {}
func (*Tx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Tx) GetTx() []byte {
	if m != nil {
		return m.Tx
	}
	return nil
}

type Proposal struct {
	Block     *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Proposal) Reset()                    { *m = Proposal{} }
func (m *Proposal) String() string            { return proto.CompactTextString(m) }
func (*Proposal) ProtoMessage()               {}
func (*Proposal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Proposal) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *Proposal) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type Prepare struct {
	Proposal   *Proposal   `protobuf:"bytes,1,opt,name=proposal" json:"proposal,omitempty"`
	Signatures *Signatures `protobuf:"bytes,2,opt,name=signatures" json:"signatures,omitempty"`
}

func (m *Prepare) Reset()                    { *m = Prepare{} }
func (m *Prepare) String() string            { return proto.CompactTextString(m) }
func (*Prepare) ProtoMessage()               {}
func (*Prepare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Prepare) GetProposal() *Proposal {
	if m != nil {
		return m.Proposal
	}
	return nil
}

func (m *Prepare) GetSignatures() *Signatures {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type Commit struct {
	Prepare    *Prepare    `protobuf:"bytes,1,opt,name=prepare" json:"prepare,omitempty"`
	Signatures *Signatures `protobuf:"bytes,2,opt,name=signatures" json:"signatures,omitempty"`
}

func (m *Commit) Reset()                    { *m = Commit{} }
func (m *Commit) String() string            { return proto.CompactTextString(m) }
func (*Commit) ProtoMessage()               {}
func (*Commit) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Commit) GetPrepare() *Prepare {
	if m != nil {
		return m.Prepare
	}
	return nil
}

func (m *Commit) GetSignatures() *Signatures {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type Fault struct {
	Height     int64       `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	Rank       int64       `protobuf:"varint,2,opt,name=rank" json:"rank,omitempty"`
	Signatures *Signatures `protobuf:"bytes,3,opt,name=signatures" json:"signatures,omitempty"`
}

func (m *Fault) Reset()                    { *m = Fault{} }
func (m *Fault) String() string            { return proto.CompactTextString(m) }
func (*Fault) ProtoMessage()               {}
func (*Fault) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Fault) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Fault) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Fault) GetSignatures() *Signatures {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func init() {
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
	proto.RegisterType((*Address)(nil), "rpc.Address")
	proto.RegisterType((*MultiAddress)(nil), "rpc.MultiAddress")
	proto.RegisterType((*Query)(nil), "rpc.Query")
	proto.RegisterType((*Order)(nil), "rpc.Order")
	proto.RegisterType((*OrderId)(nil), "rpc.OrderId")
	proto.RegisterType((*OrderFragment)(nil), "rpc.OrderFragment")
	proto.RegisterType((*OrderFragmentId)(nil), "rpc.OrderFragmentId")
	proto.RegisterType((*SyncRequest)(nil), "rpc.SyncRequest")
	proto.RegisterType((*SyncBlock)(nil), "rpc.SyncBlock")
	proto.RegisterType((*SignOrderFragmentRequest)(nil), "rpc.SignOrderFragmentRequest")
	proto.RegisterType((*OpenOrderRequest)(nil), "rpc.OpenOrderRequest")
	proto.RegisterType((*CancelOrderRequest)(nil), "rpc.CancelOrderRequest")
	proto.RegisterType((*Computation)(nil), "rpc.Computation")
	proto.RegisterType((*Delta)(nil), "rpc.Delta")
	proto.RegisterType((*DeltaFragment)(nil), "rpc.DeltaFragment")
	proto.RegisterType((*DriveMessage)(nil), "rpc.DriveMessage")
	proto.RegisterType((*Signatures)(nil), "rpc.Signatures")
	proto.RegisterType((*Block)(nil), "rpc.Block")
	proto.RegisterType((*Tx)(nil), "rpc.Tx")
	proto.RegisterType((*Proposal)(nil), "rpc.Proposal")
	proto.RegisterType((*Prepare)(nil), "rpc.Prepare")
	proto.RegisterType((*Commit)(nil), "rpc.Commit")
	proto.RegisterType((*Fault)(nil), "rpc.Fault")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Swarm service

type SwarmClient interface {
	Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*MultiAddress, error)
	QueryPeers(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersClient, error)
	QueryPeersDeep(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersDeepClient, error)
}

type swarmClient struct {
	cc *grpc.ClientConn
}

func NewSwarmClient(cc *grpc.ClientConn) SwarmClient {
	return &swarmClient{cc}
}

func (c *swarmClient) Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*MultiAddress, error) {
	out := new(MultiAddress)
	err := grpc.Invoke(ctx, "/rpc.Swarm/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) QueryPeers(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[0], c.cc, "/rpc.Swarm/QueryPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryPeersClient interface {
	Recv() (*MultiAddress, error)
	grpc.ClientStream
}

type swarmQueryPeersClient struct {
	grpc.ClientStream
}

func (x *swarmQueryPeersClient) Recv() (*MultiAddress, error) {
	m := new(MultiAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *swarmClient) QueryPeersDeep(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersDeepClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[1], c.cc, "/rpc.Swarm/QueryPeersDeep", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryPeersDeepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryPeersDeepClient interface {
	Recv() (*MultiAddress, error)
	grpc.ClientStream
}

type swarmQueryPeersDeepClient struct {
	grpc.ClientStream
}

func (x *swarmQueryPeersDeepClient) Recv() (*MultiAddress, error) {
	m := new(MultiAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Swarm service

type SwarmServer interface {
	Ping(context.Context, *MultiAddress) (*MultiAddress, error)
	QueryPeers(*Query, Swarm_QueryPeersServer) error
	QueryPeersDeep(*Query, Swarm_QueryPeersDeepServer) error
}

func RegisterSwarmServer(s *grpc.Server, srv SwarmServer) {
	s.RegisterService(&_Swarm_serviceDesc, srv)
}

func _Swarm_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Swarm/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServer).Ping(ctx, req.(*MultiAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swarm_QueryPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).QueryPeers(m, &swarmQueryPeersServer{stream})
}

type Swarm_QueryPeersServer interface {
	Send(*MultiAddress) error
	grpc.ServerStream
}

type swarmQueryPeersServer struct {
	grpc.ServerStream
}

func (x *swarmQueryPeersServer) Send(m *MultiAddress) error {
	return x.ServerStream.SendMsg(m)
}

func _Swarm_QueryPeersDeep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).QueryPeersDeep(m, &swarmQueryPeersDeepServer{stream})
}

type Swarm_QueryPeersDeepServer interface {
	Send(*MultiAddress) error
	grpc.ServerStream
}

type swarmQueryPeersDeepServer struct {
	grpc.ServerStream
}

func (x *swarmQueryPeersDeepServer) Send(m *MultiAddress) error {
	return x.ServerStream.SendMsg(m)
}

var _Swarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Swarm",
	HandlerType: (*SwarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Swarm_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryPeers",
			Handler:       _Swarm_QueryPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryPeersDeep",
			Handler:       _Swarm_QueryPeersDeep_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for Syncer service

type SyncerClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Syncer_SyncClient, error)
}

type syncerClient struct {
	cc *grpc.ClientConn
}

func NewSyncerClient(cc *grpc.ClientConn) SyncerClient {
	return &syncerClient{cc}
}

func (c *syncerClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Syncer_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Syncer_serviceDesc.Streams[0], c.cc, "/rpc.Syncer/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &syncerSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Syncer_SyncClient interface {
	Recv() (*SyncBlock, error)
	grpc.ClientStream
}

type syncerSyncClient struct {
	grpc.ClientStream
}

func (x *syncerSyncClient) Recv() (*SyncBlock, error) {
	m := new(SyncBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Syncer service

type SyncerServer interface {
	Sync(*SyncRequest, Syncer_SyncServer) error
}

func RegisterSyncerServer(s *grpc.Server, srv SyncerServer) {
	s.RegisterService(&_Syncer_serviceDesc, srv)
}

func _Syncer_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SyncerServer).Sync(m, &syncerSyncServer{stream})
}

type Syncer_SyncServer interface {
	Send(*SyncBlock) error
	grpc.ServerStream
}

type syncerSyncServer struct {
	grpc.ServerStream
}

func (x *syncerSyncServer) Send(m *SyncBlock) error {
	return x.ServerStream.SendMsg(m)
}

var _Syncer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Syncer",
	HandlerType: (*SyncerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Syncer_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for Relay service

type RelayClient interface {
	SignOrderFragment(ctx context.Context, in *OrderFragmentId, opts ...grpc.CallOption) (*OrderFragmentId, error)
	OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*Nothing, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Nothing, error)
}

type relayClient struct {
	cc *grpc.ClientConn
}

func NewRelayClient(cc *grpc.ClientConn) RelayClient {
	return &relayClient{cc}
}

func (c *relayClient) SignOrderFragment(ctx context.Context, in *OrderFragmentId, opts ...grpc.CallOption) (*OrderFragmentId, error) {
	out := new(OrderFragmentId)
	err := grpc.Invoke(ctx, "/rpc.Relay/SignOrderFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Relay/OpenOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Relay/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Relay service

type RelayServer interface {
	SignOrderFragment(context.Context, *OrderFragmentId) (*OrderFragmentId, error)
	OpenOrder(context.Context, *OpenOrderRequest) (*Nothing, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*Nothing, error)
}

func RegisterRelayServer(s *grpc.Server, srv RelayServer) {
	s.RegisterService(&_Relay_serviceDesc, srv)
}

func _Relay_SignOrderFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFragmentId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).SignOrderFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Relay/SignOrderFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).SignOrderFragment(ctx, req.(*OrderFragmentId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_OpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).OpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Relay/OpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).OpenOrder(ctx, req.(*OpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Relay_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Relay/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Relay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Relay",
	HandlerType: (*RelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignOrderFragment",
			Handler:    _Relay_SignOrderFragment_Handler,
		},
		{
			MethodName: "OpenOrder",
			Handler:    _Relay_OpenOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Relay_CancelOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// Client API for Computer service

type ComputerClient interface {
	Compute(ctx context.Context, opts ...grpc.CallOption) (Computer_ComputeClient, error)
}

type computerClient struct {
	cc *grpc.ClientConn
}

func NewComputerClient(cc *grpc.ClientConn) ComputerClient {
	return &computerClient{cc}
}

func (c *computerClient) Compute(ctx context.Context, opts ...grpc.CallOption) (Computer_ComputeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Computer_serviceDesc.Streams[0], c.cc, "/rpc.Computer/Compute", opts...)
	if err != nil {
		return nil, err
	}
	x := &computerComputeClient{stream}
	return x, nil
}

type Computer_ComputeClient interface {
	Send(*Computation) error
	Recv() (*Computation, error)
	grpc.ClientStream
}

type computerComputeClient struct {
	grpc.ClientStream
}

func (x *computerComputeClient) Send(m *Computation) error {
	return x.ClientStream.SendMsg(m)
}

func (x *computerComputeClient) Recv() (*Computation, error) {
	m := new(Computation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Computer service

type ComputerServer interface {
	Compute(Computer_ComputeServer) error
}

func RegisterComputerServer(s *grpc.Server, srv ComputerServer) {
	s.RegisterService(&_Computer_serviceDesc, srv)
}

func _Computer_Compute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComputerServer).Compute(&computerComputeServer{stream})
}

type Computer_ComputeServer interface {
	Send(*Computation) error
	Recv() (*Computation, error)
	grpc.ServerStream
}

type computerComputeServer struct {
	grpc.ServerStream
}

func (x *computerComputeServer) Send(m *Computation) error {
	return x.ServerStream.SendMsg(m)
}

func (x *computerComputeServer) Recv() (*Computation, error) {
	m := new(Computation)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Computer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Computer",
	HandlerType: (*ComputerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compute",
			Handler:       _Computer_Compute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for Hyperdrive service

type HyperdriveClient interface {
	SendTx(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Nothing, error)
	SyncBlock(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (Hyperdrive_SyncBlockClient, error)
	Drive(ctx context.Context, opts ...grpc.CallOption) (Hyperdrive_DriveClient, error)
}

type hyperdriveClient struct {
	cc *grpc.ClientConn
}

func NewHyperdriveClient(cc *grpc.ClientConn) HyperdriveClient {
	return &hyperdriveClient{cc}
}

func (c *hyperdriveClient) SendTx(ctx context.Context, in *Tx, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Hyperdrive/SendTx", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hyperdriveClient) SyncBlock(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (Hyperdrive_SyncBlockClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hyperdrive_serviceDesc.Streams[0], c.cc, "/rpc.Hyperdrive/SyncBlock", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperdriveSyncBlockClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hyperdrive_SyncBlockClient interface {
	Recv() (*Block, error)
	grpc.ClientStream
}

type hyperdriveSyncBlockClient struct {
	grpc.ClientStream
}

func (x *hyperdriveSyncBlockClient) Recv() (*Block, error) {
	m := new(Block)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hyperdriveClient) Drive(ctx context.Context, opts ...grpc.CallOption) (Hyperdrive_DriveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Hyperdrive_serviceDesc.Streams[1], c.cc, "/rpc.Hyperdrive/Drive", opts...)
	if err != nil {
		return nil, err
	}
	x := &hyperdriveDriveClient{stream}
	return x, nil
}

type Hyperdrive_DriveClient interface {
	Send(*DriveMessage) error
	Recv() (*DriveMessage, error)
	grpc.ClientStream
}

type hyperdriveDriveClient struct {
	grpc.ClientStream
}

func (x *hyperdriveDriveClient) Send(m *DriveMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *hyperdriveDriveClient) Recv() (*DriveMessage, error) {
	m := new(DriveMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Hyperdrive service

type HyperdriveServer interface {
	SendTx(context.Context, *Tx) (*Nothing, error)
	SyncBlock(*Nothing, Hyperdrive_SyncBlockServer) error
	Drive(Hyperdrive_DriveServer) error
}

func RegisterHyperdriveServer(s *grpc.Server, srv HyperdriveServer) {
	s.RegisterService(&_Hyperdrive_serviceDesc, srv)
}

func _Hyperdrive_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Tx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HyperdriveServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Hyperdrive/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HyperdriveServer).SendTx(ctx, req.(*Tx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hyperdrive_SyncBlock_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nothing)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HyperdriveServer).SyncBlock(m, &hyperdriveSyncBlockServer{stream})
}

type Hyperdrive_SyncBlockServer interface {
	Send(*Block) error
	grpc.ServerStream
}

type hyperdriveSyncBlockServer struct {
	grpc.ServerStream
}

func (x *hyperdriveSyncBlockServer) Send(m *Block) error {
	return x.ServerStream.SendMsg(m)
}

func _Hyperdrive_Drive_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HyperdriveServer).Drive(&hyperdriveDriveServer{stream})
}

type Hyperdrive_DriveServer interface {
	Send(*DriveMessage) error
	Recv() (*DriveMessage, error)
	grpc.ServerStream
}

type hyperdriveDriveServer struct {
	grpc.ServerStream
}

func (x *hyperdriveDriveServer) Send(m *DriveMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *hyperdriveDriveServer) Recv() (*DriveMessage, error) {
	m := new(DriveMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Hyperdrive_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Hyperdrive",
	HandlerType: (*HyperdriveServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTx",
			Handler:    _Hyperdrive_SendTx_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncBlock",
			Handler:       _Hyperdrive_SyncBlock_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Drive",
			Handler:       _Hyperdrive_Drive_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdf, 0x6f, 0xe3, 0xc4,
	0x13, 0xaf, 0x93, 0x38, 0x4e, 0x26, 0x69, 0xef, 0x6e, 0xbe, 0xf7, 0x3d, 0x72, 0x51, 0x75, 0x54,
	0xe6, 0xee, 0x28, 0x05, 0x4a, 0x2f, 0x14, 0x89, 0x17, 0x40, 0xd7, 0x56, 0xa7, 0x80, 0x74, 0x5c,
	0x71, 0x2a, 0x24, 0x1e, 0xdd, 0x78, 0x9b, 0x58, 0x17, 0xff, 0x60, 0xbd, 0x81, 0x44, 0x48, 0x48,
	0xbc, 0xc1, 0x13, 0xe2, 0x89, 0x7f, 0x03, 0x89, 0x3f, 0x81, 0x3f, 0x0c, 0xb4, 0xb3, 0xeb, 0xd8,
	0x8e, 0x5d, 0xa5, 0x85, 0x37, 0xef, 0x67, 0x3e, 0xbb, 0x3b, 0x3b, 0x9f, 0xdd, 0x99, 0x31, 0xb4,
	0x79, 0x3c, 0x3e, 0x8c, 0x79, 0x24, 0x22, 0xac, 0xf3, 0x78, 0x6c, 0xb7, 0xc1, 0xfa, 0x32, 0x12,
	0x53, 0x3f, 0x9c, 0xd8, 0x6f, 0x81, 0xf5, 0xdc, 0xf3, 0x38, 0x4b, 0x12, 0xec, 0x81, 0xe5, 0xaa,
	0xcf, 0x9e, 0xb1, 0x67, 0xec, 0xb7, 0x9d, 0x74, 0x68, 0x9f, 0x43, 0xf7, 0xe5, 0x7c, 0x26, 0xfc,
	0x94, 0xb9, 0x0b, 0xed, 0xc4, 0x9f, 0x84, 0xae, 0x98, 0x73, 0x46, 0xdc, 0xae, 0x93, 0x01, 0x68,
	0x43, 0x37, 0xc8, 0xb1, 0x7b, 0x35, 0x5a, 0xac, 0x80, 0xd9, 0x17, 0x60, 0x7e, 0x35, 0x67, 0x7c,
	0x89, 0x4f, 0xa0, 0x71, 0xc5, 0xa3, 0x80, 0x56, 0xe9, 0x0c, 0xee, 0x1d, 0x4a, 0x4f, 0xf3, 0x7b,
	0x39, 0x64, 0xc6, 0xc7, 0xd0, 0x14, 0x2e, 0x9f, 0x30, 0x41, 0xab, 0x75, 0x06, 0x5d, 0x22, 0xa6,
	0x1c, 0x6d, 0xb3, 0x7d, 0x30, 0x5f, 0x71, 0x8f, 0x71, 0xdc, 0x85, 0x9a, 0xef, 0xe9, 0x35, 0x15,
	0x95, 0xf0, 0xcf, 0x3d, 0xa7, 0xe6, 0x7b, 0x88, 0xd0, 0x10, 0xcb, 0x98, 0xd1, 0x52, 0x75, 0x87,
	0xbe, 0xf1, 0x01, 0x34, 0x63, 0x97, 0xfb, 0x62, 0xd9, 0xab, 0x13, 0xaa, 0x47, 0x12, 0x67, 0x8b,
	0xd8, 0xe7, 0xcb, 0x5e, 0x43, 0xe1, 0x6a, 0x64, 0x3f, 0x07, 0x4b, 0x2f, 0xb9, 0x21, 0x1a, 0x3d,
	0xb0, 0x22, 0x45, 0xa4, 0xfd, 0xba, 0x4e, 0x3a, 0xb4, 0x7f, 0xad, 0xc1, 0x36, 0xad, 0xf1, 0x82,
	0xbb, 0x93, 0x80, 0x85, 0x02, 0x1f, 0xe7, 0xdc, 0xbe, 0x9f, 0xb9, 0x9d, 0xda, 0xb5, 0xfb, 0x7b,
	0x60, 0xd2, 0x12, 0x3a, 0x14, 0x90, 0x11, 0x1d, 0x65, 0x90, 0x0a, 0x5c, 0x25, 0xe2, 0x34, 0xf2,
	0xd8, 0x68, 0xea, 0x72, 0x46, 0x47, 0xea, 0x3a, 0x05, 0x4c, 0x72, 0x92, 0xd0, 0xcb, 0x38, 0x0d,
	0xc5, 0xc9, 0x63, 0xf8, 0x08, 0x20, 0xe6, 0xfe, 0x58, 0x33, 0x4c, 0x62, 0xe4, 0x10, 0x7c, 0x0a,
	0x3b, 0x81, 0xbb, 0xf8, 0x3a, 0x9a, 0xcd, 0x03, 0xcd, 0x69, 0x12, 0x67, 0x0d, 0x25, 0x9e, 0x1f,
	0xe6, 0x79, 0x96, 0xe6, 0x15, 0x50, 0xfb, 0x1b, 0xb8, 0xb3, 0x76, 0xe0, 0x0d, 0xc1, 0xdd, 0x87,
	0x3b, 0x51, 0x71, 0x82, 0x0e, 0xf2, 0x3a, 0x6c, 0x1f, 0x43, 0x67, 0xb4, 0x0c, 0xc7, 0x0e, 0xfb,
	0x76, 0xce, 0x12, 0x71, 0xc3, 0x6b, 0x67, 0xff, 0x55, 0x83, 0xb6, 0x9c, 0x76, 0x32, 0x8b, 0xc6,
	0xaf, 0x37, 0xf8, 0xb2, 0x0b, 0x6d, 0xe1, 0x07, 0x2c, 0x11, 0x6e, 0x10, 0xeb, 0xab, 0x95, 0x01,
	0xd2, 0xca, 0xe2, 0x68, 0x3c, 0x1d, 0xba, 0xc9, 0x54, 0xeb, 0x91, 0x01, 0xb8, 0x07, 0x8d, 0x28,
	0x66, 0x21, 0x89, 0x50, 0x50, 0x74, 0xb8, 0xe5, 0x90, 0x05, 0xf7, 0xa1, 0x35, 0x76, 0xc3, 0x31,
	0x9b, 0x31, 0x8f, 0x84, 0x58, 0x67, 0xad, 0xac, 0x78, 0x08, 0x9d, 0x79, 0x38, 0x8e, 0xc2, 0x2b,
	0x9f, 0x07, 0xcc, 0x23, 0x45, 0xd6, 0xc9, 0x79, 0x02, 0x1e, 0x40, 0x3b, 0x63, 0x5b, 0x15, 0xec,
	0xcc, 0x8c, 0x4f, 0xc1, 0x4a, 0x98, 0x10, 0xd2, 0x89, 0x56, 0x05, 0x33, 0x35, 0x9e, 0x74, 0x01,
	0x08, 0xa3, 0xb8, 0xd9, 0x3f, 0x19, 0xd0, 0x1b, 0xf9, 0x93, 0xb0, 0xa0, 0xed, 0xed, 0x94, 0xc0,
	0x4f, 0xab, 0x95, 0xbe, 0xee, 0x9d, 0x94, 0xf4, 0x4f, 0xe0, 0xee, 0xab, 0x98, 0x29, 0x17, 0x6e,
	0xb9, 0xf5, 0xc7, 0xb0, 0x5d, 0x58, 0x4d, 0x6f, 0x8c, 0xe5, 0x8d, 0x9d, 0x22, 0xd1, 0xfe, 0x01,
	0xf0, 0x94, 0x64, 0xf9, 0x37, 0xdb, 0xfe, 0xd7, 0x13, 0xff, 0x08, 0x9d, 0xd3, 0x28, 0x88, 0xe7,
	0xc2, 0x15, 0x7e, 0x14, 0xe2, 0x47, 0x6b, 0x59, 0xf9, 0xda, 0xdd, 0x0b, 0x34, 0x79, 0x78, 0x8f,
	0xcd, 0x84, 0x5b, 0x79, 0xf8, 0xb3, 0xbc, 0xc5, 0x29, 0x12, 0xed, 0xdf, 0x6a, 0x60, 0x12, 0x61,
	0xc3, 0xbb, 0xd9, 0xa1, 0xa4, 0xa7, 0x9e, 0xad, 0x4c, 0x6f, 0x8f, 0x00, 0x2e, 0xe7, 0x4b, 0x9d,
	0x5c, 0xf5, 0x53, 0xc9, 0x21, 0xb8, 0x07, 0x9d, 0x84, 0xcd, 0x66, 0x29, 0x41, 0xe5, 0xad, 0x3c,
	0x24, 0x53, 0xae, 0x4e, 0x75, 0x3a, 0x67, 0xa5, 0x43, 0x69, 0xd1, 0x09, 0x4e, 0x67, 0xaa, 0x74,
	0x88, 0xf7, 0xc1, 0xa4, 0xc4, 0xa6, 0x33, 0x93, 0x1a, 0x54, 0x24, 0xb8, 0xd6, 0x0d, 0x13, 0x5c,
	0xbb, 0x32, 0xc1, 0xfd, 0x59, 0x87, 0xed, 0x42, 0xd0, 0x6e, 0x19, 0x9b, 0x1e, 0x58, 0x14, 0xe4,
	0x55, 0x60, 0xd2, 0xe1, 0x5a, 0xd4, 0x1a, 0x9b, 0xa2, 0x66, 0x96, 0xa3, 0x76, 0x08, 0x98, 0xf2,
	0x73, 0x57, 0x4e, 0x85, 0xa9, 0xc2, 0x82, 0x47, 0xf0, 0xbf, 0xd5, 0xf4, 0xdc, 0x04, 0x15, 0xbf,
	0x2a, 0x53, 0xa9, 0x2c, 0xb5, 0x6e, 0x50, 0x96, 0xda, 0x1b, 0xcb, 0x12, 0xdc, 0xa0, 0x2c, 0x75,
	0x6e, 0xa8, 0x5a, 0xb7, 0x52, 0xb5, 0xbf, 0x0d, 0xe8, 0x9e, 0x71, 0xff, 0x3b, 0xf6, 0x92, 0x25,
	0x89, 0x3b, 0x91, 0x4e, 0x9a, 0x97, 0x32, 0xb3, 0xe9, 0x47, 0xa4, 0x92, 0x20, 0xe5, 0xba, 0xe1,
	0x96, 0xa3, 0x4c, 0xf8, 0x10, 0x6a, 0x62, 0xa1, 0x5f, 0x8b, 0x45, 0x84, 0x8b, 0xc5, 0x70, 0xcb,
	0xa9, 0x89, 0x05, 0xbe, 0x0b, 0xad, 0x98, 0x47, 0x71, 0x94, 0xb8, 0x33, 0x92, 0xb1, 0x33, 0xd8,
	0x26, 0xc2, 0xb9, 0x06, 0x65, 0x3a, 0x4f, 0x09, 0xb8, 0x0f, 0x56, 0xcc, 0x59, 0x9c, 0x96, 0xe8,
	0xb4, 0x9f, 0x39, 0x57, 0x98, 0x4c, 0xba, 0xda, 0x8c, 0x4f, 0xa0, 0x39, 0x8e, 0x82, 0xc0, 0x17,
	0xba, 0x40, 0x74, 0x88, 0x78, 0x4a, 0xd0, 0x70, 0xcb, 0xd1, 0x46, 0xe9, 0xfc, 0x95, 0x3b, 0x9f,
	0x89, 0x42, 0x65, 0x78, 0x21, 0x11, 0xe9, 0x3c, 0x99, 0x4e, 0x76, 0xa0, 0xeb, 0xe5, 0x0e, 0x6c,
	0x1f, 0x00, 0x8c, 0xd2, 0x4b, 0x59, 0x6a, 0xff, 0xea, 0x85, 0x3b, 0x6b, 0xff, 0x6c, 0x80, 0xa9,
	0xea, 0xe5, 0x03, 0x68, 0x4e, 0x99, 0x3f, 0x99, 0x0a, 0x8a, 0x53, 0xdd, 0xd1, 0x23, 0xd9, 0x7f,
	0x71, 0x37, 0x7c, 0x9d, 0xf6, 0x5f, 0xf2, 0x1b, 0xfb, 0xd0, 0x92, 0xe5, 0x30, 0x57, 0x1e, 0x57,
	0x63, 0x7c, 0x08, 0xf5, 0x8b, 0x45, 0xd2, 0x6b, 0xec, 0xd5, 0x73, 0xb1, 0x74, 0x24, 0x56, 0x74,
	0xc5, 0x5c, 0x7b, 0x3e, 0xf6, 0x7d, 0xa8, 0x5d, 0x2c, 0xe4, 0x23, 0x12, 0x0b, 0xfd, 0xb6, 0x6a,
	0x62, 0x61, 0x7f, 0x01, 0xad, 0x34, 0xd2, 0xb2, 0x97, 0xba, 0x46, 0xc9, 0x54, 0xc7, 0xc2, 0x0e,
	0xb5, 0xf5, 0x1d, 0x18, 0x58, 0x5a, 0x09, 0x7c, 0x27, 0xa7, 0xaa, 0x51, 0xa1, 0x6a, 0x4e, 0xd3,
	0x0f, 0x00, 0x56, 0x4b, 0x24, 0xfa, 0x8e, 0xdc, 0x21, 0x72, 0x16, 0x65, 0x27, 0x47, 0xb1, 0x5d,
	0x68, 0x2a, 0x1d, 0x65, 0x05, 0x4e, 0xaf, 0x83, 0x51, 0xbe, 0x0e, 0xd9, 0x65, 0xb8, 0xf5, 0x16,
	0x1e, 0x98, 0x74, 0x09, 0x6e, 0xa5, 0x5a, 0x71, 0x97, 0xfa, 0xc6, 0x5d, 0x06, 0xbf, 0x1b, 0x60,
	0x8e, 0xbe, 0x77, 0x79, 0x80, 0xef, 0x41, 0xe3, 0xdc, 0x0f, 0x27, 0x58, 0xae, 0x40, 0xfd, 0x32,
	0x84, 0xef, 0x03, 0xd0, 0xff, 0xc2, 0x39, 0x63, 0x3c, 0x41, 0x25, 0x13, 0x01, 0x15, 0xe4, 0x23,
	0x03, 0x9f, 0xc1, 0x4e, 0x46, 0x3f, 0x63, 0x2c, 0xde, 0x38, 0x65, 0x70, 0x0c, 0x4d, 0xd9, 0xe9,
	0x31, 0x8e, 0x07, 0xd0, 0x90, 0x5f, 0x78, 0x57, 0x1d, 0x24, 0xeb, 0x1a, 0xfb, 0x3b, 0x2b, 0x84,
	0xae, 0xc8, 0x91, 0x31, 0xf8, 0xc3, 0x00, 0xd3, 0x61, 0x33, 0x77, 0x89, 0x9f, 0xc1, 0xbd, 0x52,
	0x8f, 0x83, 0x95, 0xa5, 0xba, 0x5f, 0x89, 0xe2, 0x11, 0xb4, 0x57, 0x1d, 0x0a, 0xfe, 0x5f, 0x51,
	0xd6, 0x3a, 0x96, 0xbe, 0x12, 0x5b, 0xff, 0xbb, 0xe1, 0x31, 0x74, 0x72, 0xed, 0x05, 0xbe, 0xa1,
	0xde, 0x7b, 0xa9, 0xe1, 0x28, 0xce, 0x1a, 0x7c, 0x02, 0x2d, 0xd5, 0x17, 0x30, 0x8e, 0xcf, 0xc0,
	0xd2, 0xdf, 0xfa, 0xb4, 0xb9, 0x8e, 0xa1, 0x5f, 0x42, 0xf6, 0x8d, 0x23, 0x63, 0xf0, 0x8b, 0x01,
	0x30, 0x5c, 0xc6, 0x8c, 0x53, 0x82, 0xc0, 0x37, 0xa1, 0x39, 0x62, 0xa1, 0x77, 0xb1, 0xc0, 0xf4,
	0x61, 0xae, 0x39, 0xf9, 0x76, 0xbe, 0x83, 0x2e, 0x98, 0xfa, 0xb9, 0xd7, 0x46, 0x9a, 0x99, 0x94,
	0x64, 0xf5, 0x8d, 0xc8, 0x27, 0xdc, 0x7e, 0x19, 0x92, 0xbe, 0x5c, 0x36, 0xe9, 0x9f, 0xf6, 0xc3,
	0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x75, 0xec, 0x8b, 0x31, 0xe0, 0x0e, 0x00, 0x00,
}
