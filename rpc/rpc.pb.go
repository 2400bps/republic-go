// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	OrderFragment
	MultiAddress
	MultiAddresses
	Nothing
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OrderFragment messages contain the order fragment created by a trader and
// the routing information to distribute it to its destination.
type OrderFragment struct {
	To *MultiAddress `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
}

func (m *OrderFragment) Reset()                    { *m = OrderFragment{} }
func (m *OrderFragment) String() string            { return proto.CompactTextString(m) }
func (*OrderFragment) ProtoMessage()               {}
func (*OrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OrderFragment) GetTo() *MultiAddress {
	if m != nil {
		return m.To
	}
	return nil
}

// MultiAddress messages contain the public multiaddress of a Node in the
// overlay network.
type MultiAddress struct {
	Multi string `protobuf:"bytes,1,opt,name=multi" json:"multi,omitempty"`
}

func (m *MultiAddress) Reset()                    { *m = MultiAddress{} }
func (m *MultiAddress) String() string            { return proto.CompactTextString(m) }
func (*MultiAddress) ProtoMessage()               {}
func (*MultiAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MultiAddress) GetMulti() string {
	if m != nil {
		return m.Multi
	}
	return ""
}

// MultiAddresses messages contain the public multiaddress of multiple Nodes in
// the overlay network.
type MultiAddresses struct {
	Multis []*MultiAddress `protobuf:"bytes,1,rep,name=multis" json:"multis,omitempty"`
}

func (m *MultiAddresses) Reset()                    { *m = MultiAddresses{} }
func (m *MultiAddresses) String() string            { return proto.CompactTextString(m) }
func (*MultiAddresses) ProtoMessage()               {}
func (*MultiAddresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiAddresses) GetMultis() []*MultiAddress {
	if m != nil {
		return m.Multis
	}
	return nil
}

// Nothing messages are empty.
type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*OrderFragment)(nil), "rpc.OrderFragment")
	proto.RegisterType((*MultiAddress)(nil), "rpc.MultiAddress")
	proto.RegisterType((*MultiAddresses)(nil), "rpc.MultiAddresses")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Peer service

type PeerClient interface {
	// Ping the connection and swap MultiAddresses.
	Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*MultiAddress, error)
	// Get the connected Peers.
	Peers(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*MultiAddresses, error)
	// Send order fragment to other node
	SendOrderFragment(ctx context.Context, in *OrderFragment, opts ...grpc.CallOption) (*Nothing, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*MultiAddress, error) {
	out := new(MultiAddress)
	err := grpc.Invoke(ctx, "/rpc.Peer/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Peers(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*MultiAddresses, error) {
	out := new(MultiAddresses)
	err := grpc.Invoke(ctx, "/rpc.Peer/Peers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) SendOrderFragment(ctx context.Context, in *OrderFragment, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Peer/SendOrderFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Peer service

type PeerServer interface {
	// Ping the connection and swap MultiAddresses.
	Ping(context.Context, *MultiAddress) (*MultiAddress, error)
	// Get the connected Peers.
	Peers(context.Context, *Nothing) (*MultiAddresses, error)
	// Send order fragment to other node
	SendOrderFragment(context.Context, *OrderFragment) (*Nothing, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Peer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Ping(ctx, req.(*MultiAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Peers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Peers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Peer/Peers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Peers(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_SendOrderFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFragment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).SendOrderFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Peer/SendOrderFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).SendOrderFragment(ctx, req.(*OrderFragment))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Peer_Ping_Handler,
		},
		{
			MethodName: "Peers",
			Handler:    _Peer_Peers_Handler,
		},
		{
			MethodName: "SendOrderFragment",
			Handler:    _Peer_SendOrderFragment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0x2a, 0x48, 0xd6,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x32, 0xe2, 0xe2, 0xf5, 0x2f,
	0x4a, 0x49, 0x2d, 0x72, 0x2b, 0x4a, 0x4c, 0xcf, 0x4d, 0xcd, 0x2b, 0x11, 0x52, 0xe4, 0x62, 0x2a,
	0xc9, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x36, 0x12, 0xd4, 0x03, 0xa9, 0xf6, 0x2d, 0xcd, 0x29,
	0xc9, 0x74, 0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x0e, 0x62, 0x2a, 0xc9, 0x57, 0x52, 0xe1, 0xe2,
	0x41, 0x16, 0x13, 0x12, 0xe1, 0x62, 0xcd, 0x05, 0xf1, 0xc1, 0xba, 0x38, 0x83, 0x20, 0x1c, 0x25,
	0x6b, 0x2e, 0x3e, 0x64, 0x55, 0xa9, 0xc5, 0x42, 0x9a, 0x5c, 0x6c, 0x60, 0xa9, 0x62, 0x09, 0x46,
	0x05, 0x66, 0xec, 0xc6, 0x43, 0x15, 0x28, 0x71, 0x72, 0xb1, 0xfb, 0xe5, 0x97, 0x64, 0x64, 0xe6,
	0xa5, 0x1b, 0x4d, 0x67, 0xe4, 0x62, 0x09, 0x48, 0x4d, 0x2d, 0x12, 0xd2, 0xe1, 0x62, 0x09, 0xc8,
	0xcc, 0x4b, 0x17, 0xc2, 0xd4, 0x26, 0x85, 0x29, 0x24, 0xa4, 0xc5, 0xc5, 0x0a, 0xd2, 0x55, 0x2c,
	0xc4, 0x03, 0x96, 0x83, 0x9a, 0x26, 0x25, 0x8c, 0xa1, 0x32, 0xb5, 0x58, 0xc8, 0x94, 0x4b, 0x30,
	0x38, 0x35, 0x2f, 0x05, 0x35, 0x20, 0x84, 0xc0, 0x2a, 0x51, 0xc4, 0xa4, 0x50, 0xcc, 0x4a, 0x62,
	0x03, 0x87, 0xa3, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xfe, 0x26, 0x3e, 0xc4, 0x54, 0x01, 0x00,
	0x00,
}
