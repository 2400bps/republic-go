// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Address
	Multiaddress
	Nothing
	LogRequest
	LogEvent
	SyncRequest
	SignOrderFragmentRequest
	OpenOrderRequest
	CancelOrderRequest
	RandomFragmentSharesRequest
	ResidueFragmentSharesRequest
	ComputeResidueFragmentRequest
	BroadcastAlphaBetaFragmentRequest
	BroadcastDeltaFragmentRequest
	AlphaBetaFragment
	DeltaFragment
	OrderFragment
	OrderFragmentSignature
	OrderSignature
	ResidueFragment
	ResidueFragments
	RandomFragment
	RandomFragments
	SyncBlock
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type Multiaddress struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Multiaddress string `protobuf:"bytes,2,opt,name=multiaddress" json:"multiaddress,omitempty"`
}

func (m *Multiaddress) Reset()                    { *m = Multiaddress{} }
func (m *Multiaddress) String() string            { return proto.CompactTextString(m) }
func (*Multiaddress) ProtoMessage()               {}
func (*Multiaddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Multiaddress) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Multiaddress) GetMultiaddress() string {
	if m != nil {
		return m.Multiaddress
	}
	return ""
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type LogRequest struct {
	From *Multiaddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *LogRequest) Reset()                    { *m = LogRequest{} }
func (m *LogRequest) String() string            { return proto.CompactTextString(m) }
func (*LogRequest) ProtoMessage()               {}
func (*LogRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *LogRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

type LogEvent struct {
	Type    []byte `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Message []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *LogEvent) Reset()                    { *m = LogEvent{} }
func (m *LogEvent) String() string            { return proto.CompactTextString(m) }
func (*LogEvent) ProtoMessage()               {}
func (*LogEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *LogEvent) GetType() []byte {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *LogEvent) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

type SyncRequest struct {
	From *Multiaddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SyncRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

type SignOrderFragmentRequest struct {
	From                   *Multiaddress           `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderFragmentSignature *OrderFragmentSignature `protobuf:"bytes,2,opt,name=orderFragmentSignature" json:"orderFragmentSignature,omitempty"`
}

func (m *SignOrderFragmentRequest) Reset()                    { *m = SignOrderFragmentRequest{} }
func (m *SignOrderFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*SignOrderFragmentRequest) ProtoMessage()               {}
func (*SignOrderFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SignOrderFragmentRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SignOrderFragmentRequest) GetOrderFragmentSignature() *OrderFragmentSignature {
	if m != nil {
		return m.OrderFragmentSignature
	}
	return nil
}

type OpenOrderRequest struct {
	From           *Multiaddress   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderSignature *OrderSignature `protobuf:"bytes,2,opt,name=orderSignature" json:"orderSignature,omitempty"`
	OrderFragment  *OrderFragment  `protobuf:"bytes,3,opt,name=orderFragment" json:"orderFragment,omitempty"`
}

func (m *OpenOrderRequest) Reset()                    { *m = OpenOrderRequest{} }
func (m *OpenOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderRequest) ProtoMessage()               {}
func (*OpenOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *OpenOrderRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *OpenOrderRequest) GetOrderSignature() *OrderSignature {
	if m != nil {
		return m.OrderSignature
	}
	return nil
}

func (m *OpenOrderRequest) GetOrderFragment() *OrderFragment {
	if m != nil {
		return m.OrderFragment
	}
	return nil
}

type CancelOrderRequest struct {
	From           *Multiaddress   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderSignature *OrderSignature `protobuf:"bytes,2,opt,name=orderSignature" json:"orderSignature,omitempty"`
}

func (m *CancelOrderRequest) Reset()                    { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()               {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CancelOrderRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CancelOrderRequest) GetOrderSignature() *OrderSignature {
	if m != nil {
		return m.OrderSignature
	}
	return nil
}

type RandomFragmentSharesRequest struct {
	From *Multiaddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *RandomFragmentSharesRequest) Reset()                    { *m = RandomFragmentSharesRequest{} }
func (m *RandomFragmentSharesRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomFragmentSharesRequest) ProtoMessage()               {}
func (*RandomFragmentSharesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *RandomFragmentSharesRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

type ResidueFragmentSharesRequest struct {
	From            *Multiaddress    `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	RandomFragments *RandomFragments `protobuf:"bytes,2,opt,name=randomFragments" json:"randomFragments,omitempty"`
}

func (m *ResidueFragmentSharesRequest) Reset()                    { *m = ResidueFragmentSharesRequest{} }
func (m *ResidueFragmentSharesRequest) String() string            { return proto.CompactTextString(m) }
func (*ResidueFragmentSharesRequest) ProtoMessage()               {}
func (*ResidueFragmentSharesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ResidueFragmentSharesRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ResidueFragmentSharesRequest) GetRandomFragments() *RandomFragments {
	if m != nil {
		return m.RandomFragments
	}
	return nil
}

type ComputeResidueFragmentRequest struct {
	From             *Multiaddress     `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	ResidueFragments *ResidueFragments `protobuf:"bytes,2,opt,name=residueFragments" json:"residueFragments,omitempty"`
}

func (m *ComputeResidueFragmentRequest) Reset()                    { *m = ComputeResidueFragmentRequest{} }
func (m *ComputeResidueFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeResidueFragmentRequest) ProtoMessage()               {}
func (*ComputeResidueFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ComputeResidueFragmentRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ComputeResidueFragmentRequest) GetResidueFragments() *ResidueFragments {
	if m != nil {
		return m.ResidueFragments
	}
	return nil
}

type BroadcastAlphaBetaFragmentRequest struct {
	From              *Multiaddress      `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	AlphaBetaFragment *AlphaBetaFragment `protobuf:"bytes,2,opt,name=alphaBetaFragment" json:"alphaBetaFragment,omitempty"`
}

func (m *BroadcastAlphaBetaFragmentRequest) Reset()         { *m = BroadcastAlphaBetaFragmentRequest{} }
func (m *BroadcastAlphaBetaFragmentRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastAlphaBetaFragmentRequest) ProtoMessage()    {}
func (*BroadcastAlphaBetaFragmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *BroadcastAlphaBetaFragmentRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BroadcastAlphaBetaFragmentRequest) GetAlphaBetaFragment() *AlphaBetaFragment {
	if m != nil {
		return m.AlphaBetaFragment
	}
	return nil
}

type BroadcastDeltaFragmentRequest struct {
	From          *Multiaddress  `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	DeltaFragment *DeltaFragment `protobuf:"bytes,2,opt,name=deltaFragment" json:"deltaFragment,omitempty"`
}

func (m *BroadcastDeltaFragmentRequest) Reset()                    { *m = BroadcastDeltaFragmentRequest{} }
func (m *BroadcastDeltaFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*BroadcastDeltaFragmentRequest) ProtoMessage()               {}
func (*BroadcastDeltaFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *BroadcastDeltaFragmentRequest) GetFrom() *Multiaddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BroadcastDeltaFragmentRequest) GetDeltaFragment() *DeltaFragment {
	if m != nil {
		return m.DeltaFragment
	}
	return nil
}

type AlphaBetaFragment struct {
	Signature     []byte         `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	ResidueId     []byte         `protobuf:"bytes,2,opt,name=residueId,proto3" json:"residueId,omitempty"`
	AlphaFragment *OrderFragment `protobuf:"bytes,3,opt,name=alphaFragment" json:"alphaFragment,omitempty"`
	BetaFragment  *OrderFragment `protobuf:"bytes,4,opt,name=betaFragment" json:"betaFragment,omitempty"`
}

func (m *AlphaBetaFragment) Reset()                    { *m = AlphaBetaFragment{} }
func (m *AlphaBetaFragment) String() string            { return proto.CompactTextString(m) }
func (*AlphaBetaFragment) ProtoMessage()               {}
func (*AlphaBetaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AlphaBetaFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AlphaBetaFragment) GetResidueId() []byte {
	if m != nil {
		return m.ResidueId
	}
	return nil
}

func (m *AlphaBetaFragment) GetAlphaFragment() *OrderFragment {
	if m != nil {
		return m.AlphaFragment
	}
	return nil
}

func (m *AlphaBetaFragment) GetBetaFragment() *OrderFragment {
	if m != nil {
		return m.BetaFragment
	}
	return nil
}

type DeltaFragment struct {
	Signature           []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Id                  []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	BuyOrderId          []byte `protobuf:"bytes,3,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId         []byte `protobuf:"bytes,4,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyOrderFragmentId  []byte `protobuf:"bytes,5,opt,name=buyOrderFragmentId,proto3" json:"buyOrderFragmentId,omitempty"`
	SellOrderFragmentId []byte `protobuf:"bytes,6,opt,name=sellOrderFragmentId,proto3" json:"sellOrderFragmentId,omitempty"`
	FstCodeShare        []byte `protobuf:"bytes,7,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare        []byte `protobuf:"bytes,8,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare          []byte `protobuf:"bytes,9,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare      []byte `protobuf:"bytes,10,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare      []byte `protobuf:"bytes,11,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *DeltaFragment) Reset()                    { *m = DeltaFragment{} }
func (m *DeltaFragment) String() string            { return proto.CompactTextString(m) }
func (*DeltaFragment) ProtoMessage()               {}
func (*DeltaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *DeltaFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DeltaFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderFragmentId() []byte {
	if m != nil {
		return m.BuyOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderFragmentId() []byte {
	if m != nil {
		return m.SellOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *DeltaFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *DeltaFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type OrderFragment struct {
	Signature      []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Id             []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	OrderId        []byte `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	OrderType      int64  `protobuf:"varint,4,opt,name=orderType" json:"orderType,omitempty"`
	OrderParity    int64  `protobuf:"varint,5,opt,name=orderParity" json:"orderParity,omitempty"`
	FstCodeShare   []byte `protobuf:"bytes,6,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare   []byte `protobuf:"bytes,7,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare     []byte `protobuf:"bytes,8,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare []byte `protobuf:"bytes,9,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare []byte `protobuf:"bytes,10,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *OrderFragment) Reset()                    { *m = OrderFragment{} }
func (m *OrderFragment) String() string            { return proto.CompactTextString(m) }
func (*OrderFragment) ProtoMessage()               {}
func (*OrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OrderFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *OrderFragment) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderFragment) GetOrderType() int64 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *OrderFragment) GetOrderParity() int64 {
	if m != nil {
		return m.OrderParity
	}
	return 0
}

func (m *OrderFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *OrderFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *OrderFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *OrderFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *OrderFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type OrderFragmentSignature struct {
	Signature       []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderFragmentId []byte `protobuf:"bytes,2,opt,name=orderFragmentId,proto3" json:"orderFragmentId,omitempty"`
}

func (m *OrderFragmentSignature) Reset()                    { *m = OrderFragmentSignature{} }
func (m *OrderFragmentSignature) String() string            { return proto.CompactTextString(m) }
func (*OrderFragmentSignature) ProtoMessage()               {}
func (*OrderFragmentSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OrderFragmentSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderFragmentSignature) GetOrderFragmentId() []byte {
	if m != nil {
		return m.OrderFragmentId
	}
	return nil
}

type OrderSignature struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderId   []byte `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *OrderSignature) Reset()                    { *m = OrderSignature{} }
func (m *OrderSignature) String() string            { return proto.CompactTextString(m) }
func (*OrderSignature) ProtoMessage()               {}
func (*OrderSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *OrderSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderSignature) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type ResidueFragment struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	AShare       []byte `protobuf:"bytes,2,opt,name=aShare,proto3" json:"aShare,omitempty"`
	BShare       []byte `protobuf:"bytes,3,opt,name=bShare,proto3" json:"bShare,omitempty"`
	CShare       []byte `protobuf:"bytes,4,opt,name=cShare,proto3" json:"cShare,omitempty"`
	ResidueShare []byte `protobuf:"bytes,5,opt,name=residueShare,proto3" json:"residueShare,omitempty"`
	ResidueId    []byte `protobuf:"bytes,6,opt,name=residueId,proto3" json:"residueId,omitempty"`
}

func (m *ResidueFragment) Reset()                    { *m = ResidueFragment{} }
func (m *ResidueFragment) String() string            { return proto.CompactTextString(m) }
func (*ResidueFragment) ProtoMessage()               {}
func (*ResidueFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ResidueFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ResidueFragment) GetAShare() []byte {
	if m != nil {
		return m.AShare
	}
	return nil
}

func (m *ResidueFragment) GetBShare() []byte {
	if m != nil {
		return m.BShare
	}
	return nil
}

func (m *ResidueFragment) GetCShare() []byte {
	if m != nil {
		return m.CShare
	}
	return nil
}

func (m *ResidueFragment) GetResidueShare() []byte {
	if m != nil {
		return m.ResidueShare
	}
	return nil
}

func (m *ResidueFragment) GetResidueId() []byte {
	if m != nil {
		return m.ResidueId
	}
	return nil
}

type ResidueFragments struct {
	Signature        []byte             `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	ResidueFragments []*ResidueFragment `protobuf:"bytes,2,rep,name=residueFragments" json:"residueFragments,omitempty"`
}

func (m *ResidueFragments) Reset()                    { *m = ResidueFragments{} }
func (m *ResidueFragments) String() string            { return proto.CompactTextString(m) }
func (*ResidueFragments) ProtoMessage()               {}
func (*ResidueFragments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ResidueFragments) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ResidueFragments) GetResidueFragments() []*ResidueFragment {
	if m != nil {
		return m.ResidueFragments
	}
	return nil
}

type RandomFragment struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Share     []byte `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (m *RandomFragment) Reset()                    { *m = RandomFragment{} }
func (m *RandomFragment) String() string            { return proto.CompactTextString(m) }
func (*RandomFragment) ProtoMessage()               {}
func (*RandomFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RandomFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *RandomFragment) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

type RandomFragments struct {
	Signature       []byte            `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	RandomFragments []*RandomFragment `protobuf:"bytes,2,rep,name=randomFragments" json:"randomFragments,omitempty"`
}

func (m *RandomFragments) Reset()                    { *m = RandomFragments{} }
func (m *RandomFragments) String() string            { return proto.CompactTextString(m) }
func (*RandomFragments) ProtoMessage()               {}
func (*RandomFragments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *RandomFragments) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *RandomFragments) GetRandomFragments() []*RandomFragment {
	if m != nil {
		return m.RandomFragments
	}
	return nil
}

type SyncBlock struct {
	Signature    []byte                  `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	DeltaBlock   *SyncBlock_DeltaBlock   `protobuf:"bytes,2,opt,name=deltaBlock" json:"deltaBlock,omitempty"`
	ResidueBlock *SyncBlock_ResidueBlock `protobuf:"bytes,3,opt,name=residueBlock" json:"residueBlock,omitempty"`
}

func (m *SyncBlock) Reset()                    { *m = SyncBlock{} }
func (m *SyncBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock) ProtoMessage()               {}
func (*SyncBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *SyncBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SyncBlock) GetDeltaBlock() *SyncBlock_DeltaBlock {
	if m != nil {
		return m.DeltaBlock
	}
	return nil
}

func (m *SyncBlock) GetResidueBlock() *SyncBlock_ResidueBlock {
	if m != nil {
		return m.ResidueBlock
	}
	return nil
}

type SyncBlock_DeltaBlock struct {
	Pending    []*DeltaFragment `protobuf:"bytes,1,rep,name=pending" json:"pending,omitempty"`
	Electing   []*DeltaFragment `protobuf:"bytes,2,rep,name=electing" json:"electing,omitempty"`
	Computing  []*DeltaFragment `protobuf:"bytes,3,rep,name=computing" json:"computing,omitempty"`
	Finalizing []*DeltaFragment `protobuf:"bytes,4,rep,name=finalizing" json:"finalizing,omitempty"`
	Matched    []*DeltaFragment `protobuf:"bytes,5,rep,name=matched" json:"matched,omitempty"`
	Mismatched []*DeltaFragment `protobuf:"bytes,6,rep,name=mismatched" json:"mismatched,omitempty"`
}

func (m *SyncBlock_DeltaBlock) Reset()                    { *m = SyncBlock_DeltaBlock{} }
func (m *SyncBlock_DeltaBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock_DeltaBlock) ProtoMessage()               {}
func (*SyncBlock_DeltaBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 0} }

func (m *SyncBlock_DeltaBlock) GetPending() []*DeltaFragment {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetElecting() []*DeltaFragment {
	if m != nil {
		return m.Electing
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetComputing() []*DeltaFragment {
	if m != nil {
		return m.Computing
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetFinalizing() []*DeltaFragment {
	if m != nil {
		return m.Finalizing
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetMatched() []*DeltaFragment {
	if m != nil {
		return m.Matched
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetMismatched() []*DeltaFragment {
	if m != nil {
		return m.Mismatched
	}
	return nil
}

type SyncBlock_ResidueBlock struct {
	Pending    []*ResidueFragment `protobuf:"bytes,1,rep,name=pending" json:"pending,omitempty"`
	Electing   []*ResidueFragment `protobuf:"bytes,2,rep,name=electing" json:"electing,omitempty"`
	Computing  []*ResidueFragment `protobuf:"bytes,3,rep,name=computing" json:"computing,omitempty"`
	Finalizing []*ResidueFragment `protobuf:"bytes,4,rep,name=finalizing" json:"finalizing,omitempty"`
	Matched    []*ResidueFragment `protobuf:"bytes,5,rep,name=matched" json:"matched,omitempty"`
	Mismatched []*ResidueFragment `protobuf:"bytes,6,rep,name=mismatched" json:"mismatched,omitempty"`
}

func (m *SyncBlock_ResidueBlock) Reset()                    { *m = SyncBlock_ResidueBlock{} }
func (m *SyncBlock_ResidueBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock_ResidueBlock) ProtoMessage()               {}
func (*SyncBlock_ResidueBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23, 1} }

func (m *SyncBlock_ResidueBlock) GetPending() []*ResidueFragment {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetElecting() []*ResidueFragment {
	if m != nil {
		return m.Electing
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetComputing() []*ResidueFragment {
	if m != nil {
		return m.Computing
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetFinalizing() []*ResidueFragment {
	if m != nil {
		return m.Finalizing
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetMatched() []*ResidueFragment {
	if m != nil {
		return m.Matched
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetMismatched() []*ResidueFragment {
	if m != nil {
		return m.Mismatched
	}
	return nil
}

func init() {
	proto.RegisterType((*Address)(nil), "rpc.Address")
	proto.RegisterType((*Multiaddress)(nil), "rpc.Multiaddress")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
	proto.RegisterType((*LogRequest)(nil), "rpc.LogRequest")
	proto.RegisterType((*LogEvent)(nil), "rpc.LogEvent")
	proto.RegisterType((*SyncRequest)(nil), "rpc.SyncRequest")
	proto.RegisterType((*SignOrderFragmentRequest)(nil), "rpc.SignOrderFragmentRequest")
	proto.RegisterType((*OpenOrderRequest)(nil), "rpc.OpenOrderRequest")
	proto.RegisterType((*CancelOrderRequest)(nil), "rpc.CancelOrderRequest")
	proto.RegisterType((*RandomFragmentSharesRequest)(nil), "rpc.RandomFragmentSharesRequest")
	proto.RegisterType((*ResidueFragmentSharesRequest)(nil), "rpc.ResidueFragmentSharesRequest")
	proto.RegisterType((*ComputeResidueFragmentRequest)(nil), "rpc.ComputeResidueFragmentRequest")
	proto.RegisterType((*BroadcastAlphaBetaFragmentRequest)(nil), "rpc.BroadcastAlphaBetaFragmentRequest")
	proto.RegisterType((*BroadcastDeltaFragmentRequest)(nil), "rpc.BroadcastDeltaFragmentRequest")
	proto.RegisterType((*AlphaBetaFragment)(nil), "rpc.AlphaBetaFragment")
	proto.RegisterType((*DeltaFragment)(nil), "rpc.DeltaFragment")
	proto.RegisterType((*OrderFragment)(nil), "rpc.OrderFragment")
	proto.RegisterType((*OrderFragmentSignature)(nil), "rpc.OrderFragmentSignature")
	proto.RegisterType((*OrderSignature)(nil), "rpc.OrderSignature")
	proto.RegisterType((*ResidueFragment)(nil), "rpc.ResidueFragment")
	proto.RegisterType((*ResidueFragments)(nil), "rpc.ResidueFragments")
	proto.RegisterType((*RandomFragment)(nil), "rpc.RandomFragment")
	proto.RegisterType((*RandomFragments)(nil), "rpc.RandomFragments")
	proto.RegisterType((*SyncBlock)(nil), "rpc.SyncBlock")
	proto.RegisterType((*SyncBlock_DeltaBlock)(nil), "rpc.SyncBlock.DeltaBlock")
	proto.RegisterType((*SyncBlock_ResidueBlock)(nil), "rpc.SyncBlock.ResidueBlock")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Swarm service

type SwarmClient interface {
	Ping(ctx context.Context, in *Multiaddress, opts ...grpc.CallOption) (*Multiaddress, error)
	Query(ctx context.Context, in *Address, opts ...grpc.CallOption) (Swarm_QueryClient, error)
	QueryDeep(ctx context.Context, in *Address, opts ...grpc.CallOption) (Swarm_QueryDeepClient, error)
}

type swarmClient struct {
	cc *grpc.ClientConn
}

func NewSwarmClient(cc *grpc.ClientConn) SwarmClient {
	return &swarmClient{cc}
}

func (c *swarmClient) Ping(ctx context.Context, in *Multiaddress, opts ...grpc.CallOption) (*Multiaddress, error) {
	out := new(Multiaddress)
	err := grpc.Invoke(ctx, "/rpc.Swarm/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) Query(ctx context.Context, in *Address, opts ...grpc.CallOption) (Swarm_QueryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[0], c.cc, "/rpc.Swarm/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryClient interface {
	Recv() (*Multiaddress, error)
	grpc.ClientStream
}

type swarmQueryClient struct {
	grpc.ClientStream
}

func (x *swarmQueryClient) Recv() (*Multiaddress, error) {
	m := new(Multiaddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *swarmClient) QueryDeep(ctx context.Context, in *Address, opts ...grpc.CallOption) (Swarm_QueryDeepClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[1], c.cc, "/rpc.Swarm/QueryDeep", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryDeepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryDeepClient interface {
	Recv() (*Multiaddress, error)
	grpc.ClientStream
}

type swarmQueryDeepClient struct {
	grpc.ClientStream
}

func (x *swarmQueryDeepClient) Recv() (*Multiaddress, error) {
	m := new(Multiaddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Swarm service

type SwarmServer interface {
	Ping(context.Context, *Multiaddress) (*Multiaddress, error)
	Query(*Address, Swarm_QueryServer) error
	QueryDeep(*Address, Swarm_QueryDeepServer) error
}

func RegisterSwarmServer(s *grpc.Server, srv SwarmServer) {
	s.RegisterService(&_Swarm_serviceDesc, srv)
}

func _Swarm_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Multiaddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Swarm/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServer).Ping(ctx, req.(*Multiaddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swarm_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).Query(m, &swarmQueryServer{stream})
}

type Swarm_QueryServer interface {
	Send(*Multiaddress) error
	grpc.ServerStream
}

type swarmQueryServer struct {
	grpc.ServerStream
}

func (x *swarmQueryServer) Send(m *Multiaddress) error {
	return x.ServerStream.SendMsg(m)
}

func _Swarm_QueryDeep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Address)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).QueryDeep(m, &swarmQueryDeepServer{stream})
}

type Swarm_QueryDeepServer interface {
	Send(*Multiaddress) error
	grpc.ServerStream
}

type swarmQueryDeepServer struct {
	grpc.ServerStream
}

func (x *swarmQueryDeepServer) Send(m *Multiaddress) error {
	return x.ServerStream.SendMsg(m)
}

var _Swarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Swarm",
	HandlerType: (*SwarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Swarm_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _Swarm_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryDeep",
			Handler:       _Swarm_QueryDeep_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for DarkOcean service

type DarkOceanClient interface {
	Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (DarkOcean_LogsClient, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (DarkOcean_SyncClient, error)
	SignOrderFragment(ctx context.Context, in *SignOrderFragmentRequest, opts ...grpc.CallOption) (*OrderFragmentSignature, error)
	OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*Nothing, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Nothing, error)
	RandomFragmentShares(ctx context.Context, in *RandomFragmentSharesRequest, opts ...grpc.CallOption) (*RandomFragments, error)
	ResidueFragmentShares(ctx context.Context, in *ResidueFragmentSharesRequest, opts ...grpc.CallOption) (*ResidueFragments, error)
	ComputeResidueFragment(ctx context.Context, in *ComputeResidueFragmentRequest, opts ...grpc.CallOption) (*Nothing, error)
	BroadcastAlphaBetaFragment(ctx context.Context, in *BroadcastAlphaBetaFragmentRequest, opts ...grpc.CallOption) (*AlphaBetaFragment, error)
	BroadcastDeltaFragment(ctx context.Context, in *BroadcastDeltaFragmentRequest, opts ...grpc.CallOption) (*DeltaFragment, error)
}

type darkOceanClient struct {
	cc *grpc.ClientConn
}

func NewDarkOceanClient(cc *grpc.ClientConn) DarkOceanClient {
	return &darkOceanClient{cc}
}

func (c *darkOceanClient) Logs(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (DarkOcean_LogsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DarkOcean_serviceDesc.Streams[0], c.cc, "/rpc.DarkOcean/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &darkOceanLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarkOcean_LogsClient interface {
	Recv() (*LogEvent, error)
	grpc.ClientStream
}

type darkOceanLogsClient struct {
	grpc.ClientStream
}

func (x *darkOceanLogsClient) Recv() (*LogEvent, error) {
	m := new(LogEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darkOceanClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (DarkOcean_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DarkOcean_serviceDesc.Streams[1], c.cc, "/rpc.DarkOcean/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &darkOceanSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarkOcean_SyncClient interface {
	Recv() (*SyncBlock, error)
	grpc.ClientStream
}

type darkOceanSyncClient struct {
	grpc.ClientStream
}

func (x *darkOceanSyncClient) Recv() (*SyncBlock, error) {
	m := new(SyncBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darkOceanClient) SignOrderFragment(ctx context.Context, in *SignOrderFragmentRequest, opts ...grpc.CallOption) (*OrderFragmentSignature, error) {
	out := new(OrderFragmentSignature)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/SignOrderFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/OpenOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) RandomFragmentShares(ctx context.Context, in *RandomFragmentSharesRequest, opts ...grpc.CallOption) (*RandomFragments, error) {
	out := new(RandomFragments)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/RandomFragmentShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) ResidueFragmentShares(ctx context.Context, in *ResidueFragmentSharesRequest, opts ...grpc.CallOption) (*ResidueFragments, error) {
	out := new(ResidueFragments)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/ResidueFragmentShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) ComputeResidueFragment(ctx context.Context, in *ComputeResidueFragmentRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/ComputeResidueFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) BroadcastAlphaBetaFragment(ctx context.Context, in *BroadcastAlphaBetaFragmentRequest, opts ...grpc.CallOption) (*AlphaBetaFragment, error) {
	out := new(AlphaBetaFragment)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/BroadcastAlphaBetaFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkOceanClient) BroadcastDeltaFragment(ctx context.Context, in *BroadcastDeltaFragmentRequest, opts ...grpc.CallOption) (*DeltaFragment, error) {
	out := new(DeltaFragment)
	err := grpc.Invoke(ctx, "/rpc.DarkOcean/BroadcastDeltaFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DarkOcean service

type DarkOceanServer interface {
	Logs(*LogRequest, DarkOcean_LogsServer) error
	Sync(*SyncRequest, DarkOcean_SyncServer) error
	SignOrderFragment(context.Context, *SignOrderFragmentRequest) (*OrderFragmentSignature, error)
	OpenOrder(context.Context, *OpenOrderRequest) (*Nothing, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*Nothing, error)
	RandomFragmentShares(context.Context, *RandomFragmentSharesRequest) (*RandomFragments, error)
	ResidueFragmentShares(context.Context, *ResidueFragmentSharesRequest) (*ResidueFragments, error)
	ComputeResidueFragment(context.Context, *ComputeResidueFragmentRequest) (*Nothing, error)
	BroadcastAlphaBetaFragment(context.Context, *BroadcastAlphaBetaFragmentRequest) (*AlphaBetaFragment, error)
	BroadcastDeltaFragment(context.Context, *BroadcastDeltaFragmentRequest) (*DeltaFragment, error)
}

func RegisterDarkOceanServer(s *grpc.Server, srv DarkOceanServer) {
	s.RegisterService(&_DarkOcean_serviceDesc, srv)
}

func _DarkOcean_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarkOceanServer).Logs(m, &darkOceanLogsServer{stream})
}

type DarkOcean_LogsServer interface {
	Send(*LogEvent) error
	grpc.ServerStream
}

type darkOceanLogsServer struct {
	grpc.ServerStream
}

func (x *darkOceanLogsServer) Send(m *LogEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _DarkOcean_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarkOceanServer).Sync(m, &darkOceanSyncServer{stream})
}

type DarkOcean_SyncServer interface {
	Send(*SyncBlock) error
	grpc.ServerStream
}

type darkOceanSyncServer struct {
	grpc.ServerStream
}

func (x *darkOceanSyncServer) Send(m *SyncBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _DarkOcean_SignOrderFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOrderFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).SignOrderFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/SignOrderFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).SignOrderFragment(ctx, req.(*SignOrderFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_OpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).OpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/OpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).OpenOrder(ctx, req.(*OpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_RandomFragmentShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomFragmentSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).RandomFragmentShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/RandomFragmentShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).RandomFragmentShares(ctx, req.(*RandomFragmentSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_ResidueFragmentShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResidueFragmentSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).ResidueFragmentShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/ResidueFragmentShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).ResidueFragmentShares(ctx, req.(*ResidueFragmentSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_ComputeResidueFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeResidueFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).ComputeResidueFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/ComputeResidueFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).ComputeResidueFragment(ctx, req.(*ComputeResidueFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_BroadcastAlphaBetaFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastAlphaBetaFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).BroadcastAlphaBetaFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/BroadcastAlphaBetaFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).BroadcastAlphaBetaFragment(ctx, req.(*BroadcastAlphaBetaFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkOcean_BroadcastDeltaFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastDeltaFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkOceanServer).BroadcastDeltaFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkOcean/BroadcastDeltaFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkOceanServer).BroadcastDeltaFragment(ctx, req.(*BroadcastDeltaFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DarkOcean_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DarkOcean",
	HandlerType: (*DarkOceanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignOrderFragment",
			Handler:    _DarkOcean_SignOrderFragment_Handler,
		},
		{
			MethodName: "OpenOrder",
			Handler:    _DarkOcean_OpenOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _DarkOcean_CancelOrder_Handler,
		},
		{
			MethodName: "RandomFragmentShares",
			Handler:    _DarkOcean_RandomFragmentShares_Handler,
		},
		{
			MethodName: "ResidueFragmentShares",
			Handler:    _DarkOcean_ResidueFragmentShares_Handler,
		},
		{
			MethodName: "ComputeResidueFragment",
			Handler:    _DarkOcean_ComputeResidueFragment_Handler,
		},
		{
			MethodName: "BroadcastAlphaBetaFragment",
			Handler:    _DarkOcean_BroadcastAlphaBetaFragment_Handler,
		},
		{
			MethodName: "BroadcastDeltaFragment",
			Handler:    _DarkOcean_BroadcastDeltaFragment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Logs",
			Handler:       _DarkOcean_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _DarkOcean_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0x97, 0x93, 0x34, 0x69, 0x5e, 0xd3, 0xb4, 0x7d, 0xdb, 0xcd, 0x37, 0xdf, 0x6c, 0x8b, 0xba,
	0x46, 0xac, 0xaa, 0xd5, 0x2a, 0x8a, 0xba, 0x15, 0x2a, 0x42, 0xfc, 0x68, 0x1b, 0x10, 0x45, 0x65,
	0xdb, 0x75, 0x11, 0x27, 0x0e, 0xb8, 0xf6, 0x34, 0xb5, 0x36, 0xb6, 0x83, 0xed, 0xc0, 0x96, 0x13,
	0x17, 0x0e, 0xdc, 0xe0, 0x82, 0xc4, 0x81, 0xff, 0x01, 0x71, 0xdb, 0x1b, 0xfc, 0x05, 0xfc, 0x4b,
	0x68, 0x66, 0xfc, 0x63, 0xc6, 0x1e, 0xd7, 0xcd, 0x22, 0x71, 0xcb, 0x3c, 0x7f, 0xde, 0x9b, 0xcf,
	0xfb, 0xcc, 0x8f, 0x37, 0x2f, 0xd0, 0x0e, 0x66, 0xd6, 0x70, 0x16, 0xf8, 0x91, 0x8f, 0xf5, 0x60,
	0x66, 0xe9, 0x6f, 0x42, 0xeb, 0xd0, 0xb6, 0x03, 0x12, 0x86, 0xd8, 0x87, 0x96, 0xc9, 0x7f, 0xf6,
	0xb5, 0x1d, 0x6d, 0xb7, 0x6d, 0x24, 0x43, 0xfd, 0x1c, 0x3a, 0x9f, 0xcd, 0xa7, 0x91, 0x13, 0x8f,
	0x71, 0x0b, 0xda, 0xa1, 0x33, 0xf1, 0xcc, 0x68, 0x1e, 0x10, 0x86, 0xed, 0x18, 0x99, 0x01, 0x75,
	0xe8, 0xb8, 0x02, 0xba, 0x5f, 0x63, 0xc1, 0x24, 0x9b, 0xde, 0x86, 0xd6, 0x33, 0x3f, 0xba, 0x76,
	0xbc, 0x89, 0xfe, 0x14, 0xe0, 0xd4, 0x9f, 0x18, 0xe4, 0xeb, 0x39, 0x09, 0x23, 0x7c, 0x0b, 0x1a,
	0x57, 0x81, 0xef, 0xb2, 0xa8, 0x2b, 0x7b, 0x1b, 0x43, 0x4a, 0x57, 0x9c, 0xdb, 0x60, 0x9f, 0xf5,
	0x03, 0x58, 0x3e, 0xf5, 0x27, 0x1f, 0x7d, 0x43, 0xbc, 0x08, 0x11, 0x1a, 0xd1, 0xcd, 0x2c, 0x21,
	0xc2, 0x7e, 0xd3, 0x5c, 0x5c, 0x12, 0x86, 0xe6, 0x84, 0xb0, 0xe9, 0x3b, 0x46, 0x32, 0xd4, 0xf7,
	0x61, 0xe5, 0xe2, 0xc6, 0xb3, 0x16, 0x9c, 0xef, 0x17, 0x0d, 0xfa, 0x17, 0xce, 0xc4, 0x3b, 0x0b,
	0x6c, 0x12, 0x7c, 0x1c, 0x98, 0x13, 0x97, 0x78, 0xd1, 0x62, 0x31, 0xf0, 0x02, 0x7a, 0xbe, 0xe8,
	0x7e, 0x91, 0x4a, 0x58, 0x63, 0x8e, 0x0f, 0x98, 0xe3, 0x99, 0x12, 0x62, 0x94, 0xb8, 0xea, 0xbf,
	0x6b, 0xb0, 0x7e, 0x36, 0x23, 0x9c, 0xd8, 0x82, 0x84, 0xde, 0x85, 0x2e, 0x8b, 0x9a, 0x27, 0x72,
	0x2f, 0x23, 0x92, 0x11, 0xc8, 0x41, 0xf1, 0x00, 0x56, 0x25, 0x4a, 0xfd, 0x3a, 0xf3, 0xc5, 0x62,
	0x12, 0x86, 0x0c, 0xd4, 0x5f, 0x02, 0x1e, 0x9b, 0x9e, 0x45, 0xa6, 0xff, 0x35, 0x67, 0x7d, 0x0c,
	0x0f, 0x0c, 0xd3, 0xb3, 0x7d, 0x37, 0xd5, 0xf1, 0xda, 0x0c, 0x48, 0xb8, 0xe0, 0x5e, 0xf8, 0x41,
	0x83, 0x2d, 0x83, 0x84, 0x8e, 0x3d, 0x27, 0xff, 0x26, 0x0e, 0xbe, 0x0f, 0x6b, 0x81, 0xc4, 0x26,
	0x8c, 0x73, 0xd9, 0x64, 0x1e, 0x32, 0xd3, 0xd0, 0xc8, 0x83, 0xf5, 0x1f, 0x35, 0xd8, 0x3e, 0xf6,
	0xdd, 0xd9, 0x3c, 0x22, 0x39, 0x3a, 0x0b, 0x12, 0x39, 0x84, 0xf5, 0x40, 0x0e, 0x90, 0x30, 0xb9,
	0xcf, 0x99, 0xe4, 0x3e, 0x1a, 0x05, 0xb8, 0xfe, 0x93, 0x06, 0x0f, 0x8f, 0x02, 0xdf, 0xb4, 0x2d,
	0x33, 0x8c, 0x0e, 0xa7, 0xb3, 0x6b, 0xf3, 0x88, 0x44, 0xe6, 0x6b, 0xf2, 0x19, 0xc3, 0x86, 0x99,
	0x0f, 0x11, 0x13, 0xea, 0x31, 0x9f, 0xe2, 0x04, 0x45, 0x07, 0xfd, 0x7b, 0x0d, 0xb6, 0x53, 0x4a,
	0x63, 0x32, 0x7d, 0x6d, 0x3a, 0x07, 0xb0, 0x6a, 0x8b, 0xee, 0x31, 0x15, 0xbe, 0xd3, 0xe5, 0xc0,
	0x32, 0x50, 0xff, 0x4b, 0x83, 0x8d, 0x02, 0xd7, 0x8a, 0xdb, 0x73, 0x0b, 0xda, 0xb1, 0xba, 0x27,
	0x76, 0x7c, 0x77, 0x65, 0x06, 0xca, 0x85, 0x65, 0x7a, 0x97, 0x53, 0x27, 0x01, 0xf1, 0x6d, 0xe8,
	0x5c, 0x8a, 0x7a, 0x36, 0x4a, 0x1d, 0x25, 0x9c, 0xfe, 0x6b, 0x1d, 0x56, 0xa5, 0x24, 0x2b, 0xf8,
	0x77, 0xa1, 0xe6, 0x24, 0xc4, 0x6b, 0x8e, 0x8d, 0x6f, 0x00, 0x5c, 0xce, 0x6f, 0xd8, 0x0c, 0x27,
	0x36, 0xa3, 0xdb, 0x31, 0x04, 0x0b, 0xee, 0xc0, 0x4a, 0x48, 0xa6, 0xd3, 0x04, 0xd0, 0x60, 0x00,
	0xd1, 0x84, 0x43, 0xc0, 0x04, 0x9f, 0x70, 0x38, 0xb1, 0xfb, 0x4b, 0x0c, 0xa8, 0xf8, 0x82, 0x23,
	0xb8, 0x97, 0xba, 0x0b, 0x0e, 0x4d, 0xe6, 0xa0, 0xfa, 0x44, 0x2b, 0xd6, 0x55, 0x18, 0x1d, 0xfb,
	0x36, 0x61, 0x07, 0xb9, 0xdf, 0x62, 0x50, 0xc9, 0x46, 0x31, 0xa1, 0x67, 0x67, 0x98, 0x65, 0x8e,
	0x11, 0x6d, 0x34, 0xd7, 0x59, 0xe0, 0x58, 0x31, 0xa2, 0xcd, 0x73, 0xcd, 0x2c, 0xf8, 0x08, 0xba,
	0xae, 0xf9, 0xf2, 0x0b, 0x7f, 0x3a, 0x77, 0x63, 0x0c, 0x30, 0x4c, 0xce, 0xca, 0x70, 0x8e, 0x27,
	0xe2, 0x56, 0x62, 0x9c, 0x64, 0xd5, 0xff, 0xae, 0xc1, 0xaa, 0x94, 0xcb, 0x82, 0x6b, 0xd3, 0x87,
	0x96, 0x2f, 0x2d, 0x4c, 0x32, 0xa4, 0x71, 0xd8, 0xcf, 0xcf, 0x69, 0x61, 0xa5, 0x6b, 0x52, 0x37,
	0x32, 0x03, 0x5d, 0x33, 0x36, 0x38, 0x37, 0x03, 0x27, 0xba, 0x61, 0x4b, 0x51, 0x37, 0x44, 0x53,
	0x41, 0xd1, 0xe6, 0x1d, 0x14, 0x6d, 0x55, 0x2a, 0xba, 0x7c, 0x07, 0x45, 0xdb, 0x77, 0x54, 0x14,
	0x94, 0x8a, 0x7e, 0x05, 0x3d, 0x75, 0x01, 0xae, 0x50, 0x76, 0x17, 0xd6, 0xfc, 0xdc, 0x7e, 0xe3,
	0x32, 0xe7, 0xcd, 0xfa, 0x27, 0xd0, 0x95, 0xab, 0x54, 0x45, 0x64, 0x61, 0x8d, 0x6a, 0xd2, 0x1a,
	0xe9, 0xaf, 0x34, 0x58, 0xcb, 0x5d, 0xcd, 0x15, 0xb1, 0x7a, 0xd0, 0x34, 0x79, 0xf6, 0x3c, 0x54,
	0x3c, 0xa2, 0xf6, 0x4b, 0x6e, 0xe7, 0xdb, 0x20, 0x1e, 0x51, 0xbb, 0xc5, 0xed, 0xfc, 0x58, 0xc6,
	0x23, 0xba, 0x72, 0xf1, 0x95, 0xc4, 0xbf, 0xf2, 0xb3, 0x28, 0xd9, 0xe4, 0x7b, 0xac, 0x99, 0xbb,
	0xc7, 0xf4, 0x00, 0xd6, 0xf3, 0x55, 0xa5, 0x82, 0xfb, 0x87, 0xca, 0x22, 0x55, 0xcf, 0xca, 0x65,
	0xae, 0x04, 0x16, 0x6b, 0xd4, 0x18, 0xba, 0x72, 0x4d, 0xad, 0x98, 0x71, 0x13, 0x96, 0x42, 0x41,
	0x2c, 0x3e, 0xd0, 0x3d, 0x58, 0xcb, 0x55, 0xe6, 0x8a, 0x30, 0xef, 0xa9, 0xca, 0x7c, 0x3d, 0x7d,
	0xb2, 0xc8, 0xc1, 0x8a, 0x55, 0xfe, 0xb7, 0x26, 0xb4, 0xe9, 0x83, 0xf5, 0x68, 0xea, 0x5b, 0x2f,
	0x2a, 0xa6, 0x7a, 0x07, 0x80, 0x15, 0x20, 0x86, 0x8d, 0xcb, 0xd4, 0xff, 0xd9, 0x2c, 0x69, 0x04,
	0x5e, 0xb0, 0xd8, 0x4f, 0x43, 0x00, 0xe3, 0x07, 0xe9, 0x92, 0x72, 0xe7, 0xba, 0xf0, 0x24, 0xcd,
	0x9c, 0x0d, 0x01, 0x62, 0x48, 0x0e, 0x83, 0x3f, 0x6a, 0x00, 0x59, 0x6c, 0x7c, 0x02, 0xad, 0x19,
	0xf1, 0x6c, 0xc7, 0x9b, 0xf4, 0x35, 0x96, 0xad, 0xaa, 0x5c, 0x26, 0x10, 0x1c, 0xc2, 0x32, 0x99,
	0x12, 0x2b, 0xa2, 0xf0, 0x5a, 0x29, 0x3c, 0xc5, 0xe0, 0x08, 0xda, 0x16, 0x7b, 0xf9, 0x50, 0x87,
	0x7a, 0xa9, 0x43, 0x06, 0xc2, 0x3d, 0x80, 0x2b, 0xc7, 0x33, 0xa7, 0xce, 0x77, 0xd4, 0xa5, 0x51,
	0xea, 0x22, 0xa0, 0x68, 0x0e, 0xae, 0x19, 0x59, 0xd7, 0x84, 0x56, 0x9b, 0xd2, 0x1c, 0x62, 0x08,
	0x9d, 0xc1, 0x75, 0xc2, 0xc4, 0xa1, 0x59, 0x3e, 0x43, 0x86, 0x1a, 0xfc, 0x59, 0x83, 0x8e, 0xa8,
	0x29, 0x0e, 0xf3, 0xb2, 0xa9, 0x37, 0x77, 0x2a, 0xdc, 0xa8, 0x20, 0x9c, 0xda, 0x21, 0x93, 0x6e,
	0xaf, 0x28, 0x9d, 0xda, 0x45, 0x10, 0x6f, 0x5f, 0x21, 0x9e, 0xda, 0x49, 0x94, 0x6f, 0x98, 0x97,
	0xaf, 0x24, 0x97, 0x44, 0xc0, 0x7d, 0x85, 0x80, 0x25, 0xb3, 0x64, 0xb8, 0xbd, 0x9f, 0x35, 0x58,
	0xba, 0xf8, 0xd6, 0x0c, 0x5c, 0x7c, 0x02, 0x8d, 0x73, 0x3a, 0x6f, 0xf1, 0x21, 0x37, 0x28, 0x9a,
	0xf0, 0x31, 0x2c, 0x3d, 0x9f, 0x93, 0xe0, 0x06, 0x3b, 0xfc, 0x49, 0x59, 0x8a, 0x1c, 0x69, 0x38,
	0x84, 0x36, 0xc3, 0x8e, 0x09, 0x99, 0xdd, 0x01, 0xbf, 0xf7, 0x6a, 0x09, 0xda, 0x63, 0x33, 0x78,
	0x71, 0x66, 0x11, 0xd3, 0xc3, 0x5d, 0x68, 0x9c, 0xfa, 0x93, 0x10, 0xd7, 0x18, 0x34, 0xeb, 0x75,
	0x07, 0xab, 0x89, 0x81, 0xf5, 0xb1, 0x23, 0x0d, 0x1f, 0x43, 0x83, 0x9e, 0x35, 0x5c, 0x4f, 0x8f,
	0x5d, 0x02, 0xed, 0xca, 0x07, 0x71, 0xa4, 0xe1, 0x19, 0x6c, 0x14, 0x1a, 0x52, 0xdc, 0xe6, 0xb0,
	0x92, 0x46, 0x75, 0x70, 0x5b, 0x87, 0x49, 0xcf, 0x54, 0xda, 0x48, 0x22, 0x7f, 0xf8, 0xe7, 0x1b,
	0xcb, 0x01, 0xcf, 0x3d, 0xee, 0xdc, 0x71, 0x1f, 0x56, 0x84, 0x46, 0x0e, 0xff, 0xc7, 0x3e, 0x16,
	0x5b, 0xbb, 0x9c, 0xd7, 0x33, 0xd8, 0x54, 0x35, 0x61, 0xb8, 0xa3, 0xb8, 0x0e, 0xa5, 0xbe, 0x6a,
	0xa0, 0xec, 0x8b, 0xf0, 0x39, 0xdc, 0x57, 0x76, 0x63, 0xf8, 0x50, 0xb5, 0x77, 0xe4, 0x88, 0xea,
	0xfe, 0x06, 0x3f, 0x85, 0x9e, 0xba, 0xb1, 0x42, 0x9d, 0xe7, 0x78, 0x5b, 0xd7, 0x95, 0x4b, 0xf7,
	0x4b, 0x18, 0x94, 0x37, 0x46, 0xf8, 0x88, 0x61, 0x2b, 0x3b, 0xa7, 0x41, 0x49, 0xdf, 0x83, 0xe7,
	0xd0, 0x53, 0xf7, 0x38, 0x31, 0xd3, 0x5b, 0x1b, 0xa0, 0x81, 0xe2, 0x7a, 0xba, 0x6c, 0xb2, 0x3f,
	0x87, 0x9e, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x30, 0x85, 0x12, 0x1f, 0x29, 0x12, 0x00, 0x00,
}
