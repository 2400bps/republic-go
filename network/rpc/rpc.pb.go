// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Address
	MultiAddress
	Nothing
	Query
	SyncRequest
	SignOrderFragmentRequest
	OpenOrderRequest
	CancelOrderRequest
	RandomFragmentSharesRequest
	ResidueFragmentSharesRequest
	ComputeResidueFragmentRequest
	BroadcastAlphaBetaFragmentRequest
	BroadcastDeltaFragmentRequest
	AlphaBetaFragment
	DeltaFragment
	OrderFragment
	OrderFragmentSignature
	OrderSignature
	ResidueFragment
	ResidueFragments
	RandomFragment
	RandomFragments
	SyncBlock
	TauMessage
	GenerateRandomShares
	GenerateXiShares
	GenerateXiFragment
	BroadcastRhoSigmaFragment
	BroadcastDeltaFragment
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type MultiAddress struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *MultiAddress) Reset()                    { *m = MultiAddress{} }
func (m *MultiAddress) String() string            { return proto.CompactTextString(m) }
func (*MultiAddress) ProtoMessage()               {}
func (*MultiAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MultiAddress) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *MultiAddress) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Query struct {
	From   *MultiAddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	Target *Address      `protobuf:"bytes,2,opt,name=target" json:"target,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Query) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Query) GetTarget() *Address {
	if m != nil {
		return m.Target
	}
	return nil
}

type SyncRequest struct {
	From *MultiAddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *SyncRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

type SignOrderFragmentRequest struct {
	From                   *MultiAddress           `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderFragmentSignature *OrderFragmentSignature `protobuf:"bytes,2,opt,name=orderFragmentSignature" json:"orderFragmentSignature,omitempty"`
}

func (m *SignOrderFragmentRequest) Reset()                    { *m = SignOrderFragmentRequest{} }
func (m *SignOrderFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*SignOrderFragmentRequest) ProtoMessage()               {}
func (*SignOrderFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *SignOrderFragmentRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *SignOrderFragmentRequest) GetOrderFragmentSignature() *OrderFragmentSignature {
	if m != nil {
		return m.OrderFragmentSignature
	}
	return nil
}

type OpenOrderRequest struct {
	From           *MultiAddress   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderSignature *OrderSignature `protobuf:"bytes,2,opt,name=orderSignature" json:"orderSignature,omitempty"`
	OrderFragment  *OrderFragment  `protobuf:"bytes,3,opt,name=orderFragment" json:"orderFragment,omitempty"`
}

func (m *OpenOrderRequest) Reset()                    { *m = OpenOrderRequest{} }
func (m *OpenOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderRequest) ProtoMessage()               {}
func (*OpenOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OpenOrderRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *OpenOrderRequest) GetOrderSignature() *OrderSignature {
	if m != nil {
		return m.OrderSignature
	}
	return nil
}

func (m *OpenOrderRequest) GetOrderFragment() *OrderFragment {
	if m != nil {
		return m.OrderFragment
	}
	return nil
}

type CancelOrderRequest struct {
	From           *MultiAddress   `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	OrderSignature *OrderSignature `protobuf:"bytes,2,opt,name=orderSignature" json:"orderSignature,omitempty"`
}

func (m *CancelOrderRequest) Reset()                    { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()               {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CancelOrderRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *CancelOrderRequest) GetOrderSignature() *OrderSignature {
	if m != nil {
		return m.OrderSignature
	}
	return nil
}

type RandomFragmentSharesRequest struct {
	From *MultiAddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
}

func (m *RandomFragmentSharesRequest) Reset()                    { *m = RandomFragmentSharesRequest{} }
func (m *RandomFragmentSharesRequest) String() string            { return proto.CompactTextString(m) }
func (*RandomFragmentSharesRequest) ProtoMessage()               {}
func (*RandomFragmentSharesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *RandomFragmentSharesRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

type ResidueFragmentSharesRequest struct {
	From            *MultiAddress    `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	RandomFragments *RandomFragments `protobuf:"bytes,2,opt,name=randomFragments" json:"randomFragments,omitempty"`
}

func (m *ResidueFragmentSharesRequest) Reset()                    { *m = ResidueFragmentSharesRequest{} }
func (m *ResidueFragmentSharesRequest) String() string            { return proto.CompactTextString(m) }
func (*ResidueFragmentSharesRequest) ProtoMessage()               {}
func (*ResidueFragmentSharesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ResidueFragmentSharesRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ResidueFragmentSharesRequest) GetRandomFragments() *RandomFragments {
	if m != nil {
		return m.RandomFragments
	}
	return nil
}

type ComputeResidueFragmentRequest struct {
	From             *MultiAddress     `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	ResidueFragments *ResidueFragments `protobuf:"bytes,2,opt,name=residueFragments" json:"residueFragments,omitempty"`
}

func (m *ComputeResidueFragmentRequest) Reset()                    { *m = ComputeResidueFragmentRequest{} }
func (m *ComputeResidueFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeResidueFragmentRequest) ProtoMessage()               {}
func (*ComputeResidueFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ComputeResidueFragmentRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ComputeResidueFragmentRequest) GetResidueFragments() *ResidueFragments {
	if m != nil {
		return m.ResidueFragments
	}
	return nil
}

type BroadcastAlphaBetaFragmentRequest struct {
	From              *MultiAddress      `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	AlphaBetaFragment *AlphaBetaFragment `protobuf:"bytes,2,opt,name=alphaBetaFragment" json:"alphaBetaFragment,omitempty"`
}

func (m *BroadcastAlphaBetaFragmentRequest) Reset()         { *m = BroadcastAlphaBetaFragmentRequest{} }
func (m *BroadcastAlphaBetaFragmentRequest) String() string { return proto.CompactTextString(m) }
func (*BroadcastAlphaBetaFragmentRequest) ProtoMessage()    {}
func (*BroadcastAlphaBetaFragmentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{11}
}

func (m *BroadcastAlphaBetaFragmentRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BroadcastAlphaBetaFragmentRequest) GetAlphaBetaFragment() *AlphaBetaFragment {
	if m != nil {
		return m.AlphaBetaFragment
	}
	return nil
}

type BroadcastDeltaFragmentRequest struct {
	From          *MultiAddress  `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	DeltaFragment *DeltaFragment `protobuf:"bytes,2,opt,name=deltaFragment" json:"deltaFragment,omitempty"`
}

func (m *BroadcastDeltaFragmentRequest) Reset()                    { *m = BroadcastDeltaFragmentRequest{} }
func (m *BroadcastDeltaFragmentRequest) String() string            { return proto.CompactTextString(m) }
func (*BroadcastDeltaFragmentRequest) ProtoMessage()               {}
func (*BroadcastDeltaFragmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *BroadcastDeltaFragmentRequest) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *BroadcastDeltaFragmentRequest) GetDeltaFragment() *DeltaFragment {
	if m != nil {
		return m.DeltaFragment
	}
	return nil
}

type AlphaBetaFragment struct {
	Signature     []byte         `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	ResidueId     []byte         `protobuf:"bytes,2,opt,name=residueId,proto3" json:"residueId,omitempty"`
	AlphaFragment *OrderFragment `protobuf:"bytes,3,opt,name=alphaFragment" json:"alphaFragment,omitempty"`
	BetaFragment  *OrderFragment `protobuf:"bytes,4,opt,name=betaFragment" json:"betaFragment,omitempty"`
}

func (m *AlphaBetaFragment) Reset()                    { *m = AlphaBetaFragment{} }
func (m *AlphaBetaFragment) String() string            { return proto.CompactTextString(m) }
func (*AlphaBetaFragment) ProtoMessage()               {}
func (*AlphaBetaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AlphaBetaFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *AlphaBetaFragment) GetResidueId() []byte {
	if m != nil {
		return m.ResidueId
	}
	return nil
}

func (m *AlphaBetaFragment) GetAlphaFragment() *OrderFragment {
	if m != nil {
		return m.AlphaFragment
	}
	return nil
}

func (m *AlphaBetaFragment) GetBetaFragment() *OrderFragment {
	if m != nil {
		return m.BetaFragment
	}
	return nil
}

type DeltaFragment struct {
	Signature           []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Id                  []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	DeltaId             []byte `protobuf:"bytes,3,opt,name=deltaId,proto3" json:"deltaId,omitempty"`
	BuyOrderId          []byte `protobuf:"bytes,4,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId         []byte `protobuf:"bytes,5,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyOrderFragmentId  []byte `protobuf:"bytes,6,opt,name=buyOrderFragmentId,proto3" json:"buyOrderFragmentId,omitempty"`
	SellOrderFragmentId []byte `protobuf:"bytes,7,opt,name=sellOrderFragmentId,proto3" json:"sellOrderFragmentId,omitempty"`
	FstCodeShare        []byte `protobuf:"bytes,8,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare        []byte `protobuf:"bytes,9,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare          []byte `protobuf:"bytes,10,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare      []byte `protobuf:"bytes,11,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare      []byte `protobuf:"bytes,12,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *DeltaFragment) Reset()                    { *m = DeltaFragment{} }
func (m *DeltaFragment) String() string            { return proto.CompactTextString(m) }
func (*DeltaFragment) ProtoMessage()               {}
func (*DeltaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *DeltaFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *DeltaFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DeltaFragment) GetDeltaId() []byte {
	if m != nil {
		return m.DeltaId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderFragmentId() []byte {
	if m != nil {
		return m.BuyOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderFragmentId() []byte {
	if m != nil {
		return m.SellOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *DeltaFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *DeltaFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type OrderFragment struct {
	Signature      []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Id             []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	OrderId        []byte `protobuf:"bytes,3,opt,name=orderId,proto3" json:"orderId,omitempty"`
	OrderType      int64  `protobuf:"varint,4,opt,name=orderType" json:"orderType,omitempty"`
	OrderParity    int64  `protobuf:"varint,5,opt,name=orderParity" json:"orderParity,omitempty"`
	FstCodeShare   []byte `protobuf:"bytes,6,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare   []byte `protobuf:"bytes,7,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare     []byte `protobuf:"bytes,8,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare []byte `protobuf:"bytes,9,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare []byte `protobuf:"bytes,10,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *OrderFragment) Reset()                    { *m = OrderFragment{} }
func (m *OrderFragment) String() string            { return proto.CompactTextString(m) }
func (*OrderFragment) ProtoMessage()               {}
func (*OrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *OrderFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *OrderFragment) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderFragment) GetOrderType() int64 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *OrderFragment) GetOrderParity() int64 {
	if m != nil {
		return m.OrderParity
	}
	return 0
}

func (m *OrderFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *OrderFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *OrderFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *OrderFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *OrderFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type OrderFragmentSignature struct {
	Signature       []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderFragmentId []byte `protobuf:"bytes,2,opt,name=orderFragmentId,proto3" json:"orderFragmentId,omitempty"`
}

func (m *OrderFragmentSignature) Reset()                    { *m = OrderFragmentSignature{} }
func (m *OrderFragmentSignature) String() string            { return proto.CompactTextString(m) }
func (*OrderFragmentSignature) ProtoMessage()               {}
func (*OrderFragmentSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *OrderFragmentSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderFragmentSignature) GetOrderFragmentId() []byte {
	if m != nil {
		return m.OrderFragmentId
	}
	return nil
}

type OrderSignature struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderId   []byte `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *OrderSignature) Reset()                    { *m = OrderSignature{} }
func (m *OrderSignature) String() string            { return proto.CompactTextString(m) }
func (*OrderSignature) ProtoMessage()               {}
func (*OrderSignature) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *OrderSignature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OrderSignature) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type ResidueFragment struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	AShare       []byte `protobuf:"bytes,2,opt,name=aShare,proto3" json:"aShare,omitempty"`
	BShare       []byte `protobuf:"bytes,3,opt,name=bShare,proto3" json:"bShare,omitempty"`
	CShare       []byte `protobuf:"bytes,4,opt,name=cShare,proto3" json:"cShare,omitempty"`
	ResidueShare []byte `protobuf:"bytes,5,opt,name=residueShare,proto3" json:"residueShare,omitempty"`
	ResidueId    []byte `protobuf:"bytes,6,opt,name=residueId,proto3" json:"residueId,omitempty"`
}

func (m *ResidueFragment) Reset()                    { *m = ResidueFragment{} }
func (m *ResidueFragment) String() string            { return proto.CompactTextString(m) }
func (*ResidueFragment) ProtoMessage()               {}
func (*ResidueFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ResidueFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ResidueFragment) GetAShare() []byte {
	if m != nil {
		return m.AShare
	}
	return nil
}

func (m *ResidueFragment) GetBShare() []byte {
	if m != nil {
		return m.BShare
	}
	return nil
}

func (m *ResidueFragment) GetCShare() []byte {
	if m != nil {
		return m.CShare
	}
	return nil
}

func (m *ResidueFragment) GetResidueShare() []byte {
	if m != nil {
		return m.ResidueShare
	}
	return nil
}

func (m *ResidueFragment) GetResidueId() []byte {
	if m != nil {
		return m.ResidueId
	}
	return nil
}

type ResidueFragments struct {
	Signature        []byte             `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	ResidueFragments []*ResidueFragment `protobuf:"bytes,2,rep,name=residueFragments" json:"residueFragments,omitempty"`
}

func (m *ResidueFragments) Reset()                    { *m = ResidueFragments{} }
func (m *ResidueFragments) String() string            { return proto.CompactTextString(m) }
func (*ResidueFragments) ProtoMessage()               {}
func (*ResidueFragments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *ResidueFragments) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ResidueFragments) GetResidueFragments() []*ResidueFragment {
	if m != nil {
		return m.ResidueFragments
	}
	return nil
}

type RandomFragment struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Share     []byte `protobuf:"bytes,2,opt,name=share,proto3" json:"share,omitempty"`
}

func (m *RandomFragment) Reset()                    { *m = RandomFragment{} }
func (m *RandomFragment) String() string            { return proto.CompactTextString(m) }
func (*RandomFragment) ProtoMessage()               {}
func (*RandomFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *RandomFragment) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *RandomFragment) GetShare() []byte {
	if m != nil {
		return m.Share
	}
	return nil
}

type RandomFragments struct {
	Signature       []byte            `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	RandomFragments []*RandomFragment `protobuf:"bytes,2,rep,name=randomFragments" json:"randomFragments,omitempty"`
}

func (m *RandomFragments) Reset()                    { *m = RandomFragments{} }
func (m *RandomFragments) String() string            { return proto.CompactTextString(m) }
func (*RandomFragments) ProtoMessage()               {}
func (*RandomFragments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *RandomFragments) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *RandomFragments) GetRandomFragments() []*RandomFragment {
	if m != nil {
		return m.RandomFragments
	}
	return nil
}

type SyncBlock struct {
	Signature    []byte                  `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	DeltaBlock   *SyncBlock_DeltaBlock   `protobuf:"bytes,2,opt,name=deltaBlock" json:"deltaBlock,omitempty"`
	ResidueBlock *SyncBlock_ResidueBlock `protobuf:"bytes,3,opt,name=residueBlock" json:"residueBlock,omitempty"`
}

func (m *SyncBlock) Reset()                    { *m = SyncBlock{} }
func (m *SyncBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock) ProtoMessage()               {}
func (*SyncBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *SyncBlock) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *SyncBlock) GetDeltaBlock() *SyncBlock_DeltaBlock {
	if m != nil {
		return m.DeltaBlock
	}
	return nil
}

func (m *SyncBlock) GetResidueBlock() *SyncBlock_ResidueBlock {
	if m != nil {
		return m.ResidueBlock
	}
	return nil
}

type SyncBlock_DeltaBlock struct {
	Pending    []*DeltaFragment `protobuf:"bytes,1,rep,name=pending" json:"pending,omitempty"`
	Electing   []*DeltaFragment `protobuf:"bytes,2,rep,name=electing" json:"electing,omitempty"`
	Computing  []*DeltaFragment `protobuf:"bytes,3,rep,name=computing" json:"computing,omitempty"`
	Finalizing []*DeltaFragment `protobuf:"bytes,4,rep,name=finalizing" json:"finalizing,omitempty"`
	Matched    []*DeltaFragment `protobuf:"bytes,5,rep,name=matched" json:"matched,omitempty"`
	Mismatched []*DeltaFragment `protobuf:"bytes,6,rep,name=mismatched" json:"mismatched,omitempty"`
}

func (m *SyncBlock_DeltaBlock) Reset()                    { *m = SyncBlock_DeltaBlock{} }
func (m *SyncBlock_DeltaBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock_DeltaBlock) ProtoMessage()               {}
func (*SyncBlock_DeltaBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 0} }

func (m *SyncBlock_DeltaBlock) GetPending() []*DeltaFragment {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetElecting() []*DeltaFragment {
	if m != nil {
		return m.Electing
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetComputing() []*DeltaFragment {
	if m != nil {
		return m.Computing
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetFinalizing() []*DeltaFragment {
	if m != nil {
		return m.Finalizing
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetMatched() []*DeltaFragment {
	if m != nil {
		return m.Matched
	}
	return nil
}

func (m *SyncBlock_DeltaBlock) GetMismatched() []*DeltaFragment {
	if m != nil {
		return m.Mismatched
	}
	return nil
}

type SyncBlock_ResidueBlock struct {
	Pending    []*ResidueFragment `protobuf:"bytes,1,rep,name=pending" json:"pending,omitempty"`
	Electing   []*ResidueFragment `protobuf:"bytes,2,rep,name=electing" json:"electing,omitempty"`
	Computing  []*ResidueFragment `protobuf:"bytes,3,rep,name=computing" json:"computing,omitempty"`
	Finalizing []*ResidueFragment `protobuf:"bytes,4,rep,name=finalizing" json:"finalizing,omitempty"`
	Matched    []*ResidueFragment `protobuf:"bytes,5,rep,name=matched" json:"matched,omitempty"`
	Mismatched []*ResidueFragment `protobuf:"bytes,6,rep,name=mismatched" json:"mismatched,omitempty"`
}

func (m *SyncBlock_ResidueBlock) Reset()                    { *m = SyncBlock_ResidueBlock{} }
func (m *SyncBlock_ResidueBlock) String() string            { return proto.CompactTextString(m) }
func (*SyncBlock_ResidueBlock) ProtoMessage()               {}
func (*SyncBlock_ResidueBlock) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22, 1} }

func (m *SyncBlock_ResidueBlock) GetPending() []*ResidueFragment {
	if m != nil {
		return m.Pending
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetElecting() []*ResidueFragment {
	if m != nil {
		return m.Electing
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetComputing() []*ResidueFragment {
	if m != nil {
		return m.Computing
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetFinalizing() []*ResidueFragment {
	if m != nil {
		return m.Finalizing
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetMatched() []*ResidueFragment {
	if m != nil {
		return m.Matched
	}
	return nil
}

func (m *SyncBlock_ResidueBlock) GetMismatched() []*ResidueFragment {
	if m != nil {
		return m.Mismatched
	}
	return nil
}

type TauMessage struct {
	GenerateRandomShares      *GenerateRandomShares      `protobuf:"bytes,1,opt,name=generateRandomShares" json:"generateRandomShares,omitempty"`
	GenerateXiShares          *GenerateXiShares          `protobuf:"bytes,2,opt,name=generateXiShares" json:"generateXiShares,omitempty"`
	GenerateXiFragment        *GenerateXiFragment        `protobuf:"bytes,3,opt,name=generateXiFragment" json:"generateXiFragment,omitempty"`
	BroadcastRhoSigmaFragment *BroadcastRhoSigmaFragment `protobuf:"bytes,4,opt,name=broadcastRhoSigmaFragment" json:"broadcastRhoSigmaFragment,omitempty"`
	BroadcastDeltaFragment    *BroadcastDeltaFragment    `protobuf:"bytes,5,opt,name=broadcastDeltaFragment" json:"broadcastDeltaFragment,omitempty"`
}

func (m *TauMessage) Reset()                    { *m = TauMessage{} }
func (m *TauMessage) String() string            { return proto.CompactTextString(m) }
func (*TauMessage) ProtoMessage()               {}
func (*TauMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *TauMessage) GetGenerateRandomShares() *GenerateRandomShares {
	if m != nil {
		return m.GenerateRandomShares
	}
	return nil
}

func (m *TauMessage) GetGenerateXiShares() *GenerateXiShares {
	if m != nil {
		return m.GenerateXiShares
	}
	return nil
}

func (m *TauMessage) GetGenerateXiFragment() *GenerateXiFragment {
	if m != nil {
		return m.GenerateXiFragment
	}
	return nil
}

func (m *TauMessage) GetBroadcastRhoSigmaFragment() *BroadcastRhoSigmaFragment {
	if m != nil {
		return m.BroadcastRhoSigmaFragment
	}
	return nil
}

func (m *TauMessage) GetBroadcastDeltaFragment() *BroadcastDeltaFragment {
	if m != nil {
		return m.BroadcastDeltaFragment
	}
	return nil
}

type GenerateRandomShares struct {
}

func (m *GenerateRandomShares) Reset()                    { *m = GenerateRandomShares{} }
func (m *GenerateRandomShares) String() string            { return proto.CompactTextString(m) }
func (*GenerateRandomShares) ProtoMessage()               {}
func (*GenerateRandomShares) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

type GenerateXiShares struct {
}

func (m *GenerateXiShares) Reset()                    { *m = GenerateXiShares{} }
func (m *GenerateXiShares) String() string            { return proto.CompactTextString(m) }
func (*GenerateXiShares) ProtoMessage()               {}
func (*GenerateXiShares) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

type GenerateXiFragment struct {
}

func (m *GenerateXiFragment) Reset()                    { *m = GenerateXiFragment{} }
func (m *GenerateXiFragment) String() string            { return proto.CompactTextString(m) }
func (*GenerateXiFragment) ProtoMessage()               {}
func (*GenerateXiFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

type BroadcastRhoSigmaFragment struct {
}

func (m *BroadcastRhoSigmaFragment) Reset()                    { *m = BroadcastRhoSigmaFragment{} }
func (m *BroadcastRhoSigmaFragment) String() string            { return proto.CompactTextString(m) }
func (*BroadcastRhoSigmaFragment) ProtoMessage()               {}
func (*BroadcastRhoSigmaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

type BroadcastDeltaFragment struct {
}

func (m *BroadcastDeltaFragment) Reset()                    { *m = BroadcastDeltaFragment{} }
func (m *BroadcastDeltaFragment) String() string            { return proto.CompactTextString(m) }
func (*BroadcastDeltaFragment) ProtoMessage()               {}
func (*BroadcastDeltaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func init() {
	proto.RegisterType((*Address)(nil), "rpc.Address")
	proto.RegisterType((*MultiAddress)(nil), "rpc.MultiAddress")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
	proto.RegisterType((*Query)(nil), "rpc.Query")
	proto.RegisterType((*SyncRequest)(nil), "rpc.SyncRequest")
	proto.RegisterType((*SignOrderFragmentRequest)(nil), "rpc.SignOrderFragmentRequest")
	proto.RegisterType((*OpenOrderRequest)(nil), "rpc.OpenOrderRequest")
	proto.RegisterType((*CancelOrderRequest)(nil), "rpc.CancelOrderRequest")
	proto.RegisterType((*RandomFragmentSharesRequest)(nil), "rpc.RandomFragmentSharesRequest")
	proto.RegisterType((*ResidueFragmentSharesRequest)(nil), "rpc.ResidueFragmentSharesRequest")
	proto.RegisterType((*ComputeResidueFragmentRequest)(nil), "rpc.ComputeResidueFragmentRequest")
	proto.RegisterType((*BroadcastAlphaBetaFragmentRequest)(nil), "rpc.BroadcastAlphaBetaFragmentRequest")
	proto.RegisterType((*BroadcastDeltaFragmentRequest)(nil), "rpc.BroadcastDeltaFragmentRequest")
	proto.RegisterType((*AlphaBetaFragment)(nil), "rpc.AlphaBetaFragment")
	proto.RegisterType((*DeltaFragment)(nil), "rpc.DeltaFragment")
	proto.RegisterType((*OrderFragment)(nil), "rpc.OrderFragment")
	proto.RegisterType((*OrderFragmentSignature)(nil), "rpc.OrderFragmentSignature")
	proto.RegisterType((*OrderSignature)(nil), "rpc.OrderSignature")
	proto.RegisterType((*ResidueFragment)(nil), "rpc.ResidueFragment")
	proto.RegisterType((*ResidueFragments)(nil), "rpc.ResidueFragments")
	proto.RegisterType((*RandomFragment)(nil), "rpc.RandomFragment")
	proto.RegisterType((*RandomFragments)(nil), "rpc.RandomFragments")
	proto.RegisterType((*SyncBlock)(nil), "rpc.SyncBlock")
	proto.RegisterType((*SyncBlock_DeltaBlock)(nil), "rpc.SyncBlock.DeltaBlock")
	proto.RegisterType((*SyncBlock_ResidueBlock)(nil), "rpc.SyncBlock.ResidueBlock")
	proto.RegisterType((*TauMessage)(nil), "rpc.TauMessage")
	proto.RegisterType((*GenerateRandomShares)(nil), "rpc.GenerateRandomShares")
	proto.RegisterType((*GenerateXiShares)(nil), "rpc.GenerateXiShares")
	proto.RegisterType((*GenerateXiFragment)(nil), "rpc.GenerateXiFragment")
	proto.RegisterType((*BroadcastRhoSigmaFragment)(nil), "rpc.BroadcastRhoSigmaFragment")
	proto.RegisterType((*BroadcastDeltaFragment)(nil), "rpc.BroadcastDeltaFragment")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Swarm service

type SwarmClient interface {
	Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*MultiAddress, error)
	QueryPeers(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersClient, error)
	QueryPeersDeep(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersDeepClient, error)
}

type swarmClient struct {
	cc *grpc.ClientConn
}

func NewSwarmClient(cc *grpc.ClientConn) SwarmClient {
	return &swarmClient{cc}
}

func (c *swarmClient) Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*MultiAddress, error) {
	out := new(MultiAddress)
	err := grpc.Invoke(ctx, "/rpc.Swarm/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmClient) QueryPeers(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[0], c.cc, "/rpc.Swarm/QueryPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryPeersClient interface {
	Recv() (*MultiAddress, error)
	grpc.ClientStream
}

type swarmQueryPeersClient struct {
	grpc.ClientStream
}

func (x *swarmQueryPeersClient) Recv() (*MultiAddress, error) {
	m := new(MultiAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *swarmClient) QueryPeersDeep(ctx context.Context, in *Query, opts ...grpc.CallOption) (Swarm_QueryPeersDeepClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Swarm_serviceDesc.Streams[1], c.cc, "/rpc.Swarm/QueryPeersDeep", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmQueryPeersDeepClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Swarm_QueryPeersDeepClient interface {
	Recv() (*MultiAddress, error)
	grpc.ClientStream
}

type swarmQueryPeersDeepClient struct {
	grpc.ClientStream
}

func (x *swarmQueryPeersDeepClient) Recv() (*MultiAddress, error) {
	m := new(MultiAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Swarm service

type SwarmServer interface {
	Ping(context.Context, *MultiAddress) (*MultiAddress, error)
	QueryPeers(*Query, Swarm_QueryPeersServer) error
	QueryPeersDeep(*Query, Swarm_QueryPeersDeepServer) error
}

func RegisterSwarmServer(s *grpc.Server, srv SwarmServer) {
	s.RegisterService(&_Swarm_serviceDesc, srv)
}

func _Swarm_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Swarm/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServer).Ping(ctx, req.(*MultiAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _Swarm_QueryPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).QueryPeers(m, &swarmQueryPeersServer{stream})
}

type Swarm_QueryPeersServer interface {
	Send(*MultiAddress) error
	grpc.ServerStream
}

type swarmQueryPeersServer struct {
	grpc.ServerStream
}

func (x *swarmQueryPeersServer) Send(m *MultiAddress) error {
	return x.ServerStream.SendMsg(m)
}

func _Swarm_QueryPeersDeep_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServer).QueryPeersDeep(m, &swarmQueryPeersDeepServer{stream})
}

type Swarm_QueryPeersDeepServer interface {
	Send(*MultiAddress) error
	grpc.ServerStream
}

type swarmQueryPeersDeepServer struct {
	grpc.ServerStream
}

func (x *swarmQueryPeersDeepServer) Send(m *MultiAddress) error {
	return x.ServerStream.SendMsg(m)
}

var _Swarm_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Swarm",
	HandlerType: (*SwarmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Swarm_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryPeers",
			Handler:       _Swarm_QueryPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "QueryPeersDeep",
			Handler:       _Swarm_QueryPeersDeep_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for Dark service

type DarkClient interface {
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Dark_SyncClient, error)
	SignOrderFragment(ctx context.Context, in *SignOrderFragmentRequest, opts ...grpc.CallOption) (*OrderFragmentSignature, error)
	OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*Nothing, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Nothing, error)
	RandomFragmentShares(ctx context.Context, in *RandomFragmentSharesRequest, opts ...grpc.CallOption) (*RandomFragments, error)
	ResidueFragmentShares(ctx context.Context, in *ResidueFragmentSharesRequest, opts ...grpc.CallOption) (*ResidueFragments, error)
	ComputeResidueFragment(ctx context.Context, in *ComputeResidueFragmentRequest, opts ...grpc.CallOption) (*Nothing, error)
	BroadcastAlphaBetaFragment(ctx context.Context, in *BroadcastAlphaBetaFragmentRequest, opts ...grpc.CallOption) (*AlphaBetaFragment, error)
	BroadcastDeltaFragment(ctx context.Context, in *BroadcastDeltaFragmentRequest, opts ...grpc.CallOption) (*DeltaFragment, error)
}

type darkClient struct {
	cc *grpc.ClientConn
}

func NewDarkClient(cc *grpc.ClientConn) DarkClient {
	return &darkClient{cc}
}

func (c *darkClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (Dark_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Dark_serviceDesc.Streams[0], c.cc, "/rpc.Dark/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &darkSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Dark_SyncClient interface {
	Recv() (*SyncBlock, error)
	grpc.ClientStream
}

type darkSyncClient struct {
	grpc.ClientStream
}

func (x *darkSyncClient) Recv() (*SyncBlock, error) {
	m := new(SyncBlock)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darkClient) SignOrderFragment(ctx context.Context, in *SignOrderFragmentRequest, opts ...grpc.CallOption) (*OrderFragmentSignature, error) {
	out := new(OrderFragmentSignature)
	err := grpc.Invoke(ctx, "/rpc.Dark/SignOrderFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Dark/OpenOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Dark/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) RandomFragmentShares(ctx context.Context, in *RandomFragmentSharesRequest, opts ...grpc.CallOption) (*RandomFragments, error) {
	out := new(RandomFragments)
	err := grpc.Invoke(ctx, "/rpc.Dark/RandomFragmentShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) ResidueFragmentShares(ctx context.Context, in *ResidueFragmentSharesRequest, opts ...grpc.CallOption) (*ResidueFragments, error) {
	out := new(ResidueFragments)
	err := grpc.Invoke(ctx, "/rpc.Dark/ResidueFragmentShares", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) ComputeResidueFragment(ctx context.Context, in *ComputeResidueFragmentRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.Dark/ComputeResidueFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) BroadcastAlphaBetaFragment(ctx context.Context, in *BroadcastAlphaBetaFragmentRequest, opts ...grpc.CallOption) (*AlphaBetaFragment, error) {
	out := new(AlphaBetaFragment)
	err := grpc.Invoke(ctx, "/rpc.Dark/BroadcastAlphaBetaFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkClient) BroadcastDeltaFragment(ctx context.Context, in *BroadcastDeltaFragmentRequest, opts ...grpc.CallOption) (*DeltaFragment, error) {
	out := new(DeltaFragment)
	err := grpc.Invoke(ctx, "/rpc.Dark/BroadcastDeltaFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Dark service

type DarkServer interface {
	Sync(*SyncRequest, Dark_SyncServer) error
	SignOrderFragment(context.Context, *SignOrderFragmentRequest) (*OrderFragmentSignature, error)
	OpenOrder(context.Context, *OpenOrderRequest) (*Nothing, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*Nothing, error)
	RandomFragmentShares(context.Context, *RandomFragmentSharesRequest) (*RandomFragments, error)
	ResidueFragmentShares(context.Context, *ResidueFragmentSharesRequest) (*ResidueFragments, error)
	ComputeResidueFragment(context.Context, *ComputeResidueFragmentRequest) (*Nothing, error)
	BroadcastAlphaBetaFragment(context.Context, *BroadcastAlphaBetaFragmentRequest) (*AlphaBetaFragment, error)
	BroadcastDeltaFragment(context.Context, *BroadcastDeltaFragmentRequest) (*DeltaFragment, error)
}

func RegisterDarkServer(s *grpc.Server, srv DarkServer) {
	s.RegisterService(&_Dark_serviceDesc, srv)
}

func _Dark_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarkServer).Sync(m, &darkSyncServer{stream})
}

type Dark_SyncServer interface {
	Send(*SyncBlock) error
	grpc.ServerStream
}

type darkSyncServer struct {
	grpc.ServerStream
}

func (x *darkSyncServer) Send(m *SyncBlock) error {
	return x.ServerStream.SendMsg(m)
}

func _Dark_SignOrderFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignOrderFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).SignOrderFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/SignOrderFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).SignOrderFragment(ctx, req.(*SignOrderFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_OpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).OpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/OpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).OpenOrder(ctx, req.(*OpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_RandomFragmentShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RandomFragmentSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).RandomFragmentShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/RandomFragmentShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).RandomFragmentShares(ctx, req.(*RandomFragmentSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_ResidueFragmentShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResidueFragmentSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).ResidueFragmentShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/ResidueFragmentShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).ResidueFragmentShares(ctx, req.(*ResidueFragmentSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_ComputeResidueFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeResidueFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).ComputeResidueFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/ComputeResidueFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).ComputeResidueFragment(ctx, req.(*ComputeResidueFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_BroadcastAlphaBetaFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastAlphaBetaFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).BroadcastAlphaBetaFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/BroadcastAlphaBetaFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).BroadcastAlphaBetaFragment(ctx, req.(*BroadcastAlphaBetaFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dark_BroadcastDeltaFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastDeltaFragmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkServer).BroadcastDeltaFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.Dark/BroadcastDeltaFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkServer).BroadcastDeltaFragment(ctx, req.(*BroadcastDeltaFragmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Dark_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Dark",
	HandlerType: (*DarkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignOrderFragment",
			Handler:    _Dark_SignOrderFragment_Handler,
		},
		{
			MethodName: "OpenOrder",
			Handler:    _Dark_OpenOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Dark_CancelOrder_Handler,
		},
		{
			MethodName: "RandomFragmentShares",
			Handler:    _Dark_RandomFragmentShares_Handler,
		},
		{
			MethodName: "ResidueFragmentShares",
			Handler:    _Dark_ResidueFragmentShares_Handler,
		},
		{
			MethodName: "ComputeResidueFragment",
			Handler:    _Dark_ComputeResidueFragment_Handler,
		},
		{
			MethodName: "BroadcastAlphaBetaFragment",
			Handler:    _Dark_BroadcastAlphaBetaFragment_Handler,
		},
		{
			MethodName: "BroadcastDeltaFragment",
			Handler:    _Dark_BroadcastDeltaFragment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Sync",
			Handler:       _Dark_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for TauService service

type TauServiceClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (TauService_ConnectClient, error)
}

type tauServiceClient struct {
	cc *grpc.ClientConn
}

func NewTauServiceClient(cc *grpc.ClientConn) TauServiceClient {
	return &tauServiceClient{cc}
}

func (c *tauServiceClient) Connect(ctx context.Context, opts ...grpc.CallOption) (TauService_ConnectClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TauService_serviceDesc.Streams[0], c.cc, "/rpc.TauService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &tauServiceConnectClient{stream}
	return x, nil
}

type TauService_ConnectClient interface {
	Send(*TauMessage) error
	Recv() (*TauMessage, error)
	grpc.ClientStream
}

type tauServiceConnectClient struct {
	grpc.ClientStream
}

func (x *tauServiceConnectClient) Send(m *TauMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tauServiceConnectClient) Recv() (*TauMessage, error) {
	m := new(TauMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TauService service

type TauServiceServer interface {
	Connect(TauService_ConnectServer) error
}

func RegisterTauServiceServer(s *grpc.Server, srv TauServiceServer) {
	s.RegisterService(&_TauService_serviceDesc, srv)
}

func _TauService_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TauServiceServer).Connect(&tauServiceConnectServer{stream})
}

type TauService_ConnectServer interface {
	Send(*TauMessage) error
	Recv() (*TauMessage, error)
	grpc.ServerStream
}

type tauServiceConnectServer struct {
	grpc.ServerStream
}

func (x *tauServiceConnectServer) Send(m *TauMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tauServiceConnectServer) Recv() (*TauMessage, error) {
	m := new(TauMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TauService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TauService",
	HandlerType: (*TauServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _TauService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1377 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xd7, 0xda, 0x8e, 0x5d, 0x3f, 0x3b, 0x4e, 0xf2, 0xea, 0x1a, 0xd7, 0xfd, 0xa3, 0x76, 0x80,
	0xaa, 0x42, 0xc5, 0x18, 0x13, 0xa1, 0x22, 0x54, 0xa0, 0x89, 0x45, 0x08, 0x52, 0x9a, 0x74, 0x1d,
	0x21, 0x0e, 0x3d, 0xb0, 0xde, 0x9d, 0x38, 0xab, 0xda, 0xbb, 0x66, 0x77, 0x0d, 0x0d, 0x27, 0x2e,
	0x1c, 0xe0, 0xc4, 0x09, 0x24, 0x24, 0xbe, 0x03, 0x82, 0x13, 0x37, 0xf8, 0x04, 0x7c, 0x25, 0xb4,
	0x33, 0xfb, 0x6f, 0x66, 0x67, 0xe3, 0xa4, 0x48, 0xdc, 0x76, 0xde, 0xfe, 0xde, 0x9b, 0xdf, 0xfb,
	0xcd, 0x9f, 0x37, 0x33, 0x50, 0xf7, 0x16, 0x66, 0x7f, 0xe1, 0xb9, 0x81, 0x8b, 0x65, 0x6f, 0x61,
	0x92, 0x57, 0xa1, 0xf6, 0xd8, 0xb2, 0x3c, 0xea, 0xfb, 0xd8, 0x85, 0x9a, 0xc1, 0x3f, 0xbb, 0xda,
	0x1d, 0xed, 0x7e, 0x5d, 0x8f, 0x9b, 0xe4, 0x08, 0x9a, 0x07, 0xcb, 0x59, 0x60, 0xc7, 0xc8, 0x9b,
	0x50, 0xf7, 0xed, 0xa9, 0x63, 0x04, 0x4b, 0x8f, 0x32, 0x6c, 0x53, 0x4f, 0x0d, 0x48, 0xa0, 0x39,
	0xcf, 0xa0, 0xbb, 0x25, 0x16, 0x4c, 0xb0, 0x91, 0x3a, 0xd4, 0x9e, 0xb8, 0xc1, 0xa9, 0xed, 0x4c,
	0xc9, 0x31, 0xac, 0x3d, 0x5d, 0x52, 0xef, 0x0c, 0x5f, 0x87, 0xca, 0x89, 0xe7, 0xce, 0x59, 0xc0,
	0xc6, 0x70, 0xab, 0x1f, 0x32, 0xcd, 0x76, 0xab, 0xb3, 0xdf, 0xf8, 0x1a, 0x54, 0x03, 0xc3, 0x9b,
	0xd2, 0x80, 0x05, 0x6e, 0x0c, 0x9b, 0x0c, 0x18, 0x63, 0xa2, 0x7f, 0x64, 0x1b, 0x1a, 0xe3, 0x33,
	0xc7, 0xd4, 0xe9, 0x97, 0x4b, 0xea, 0x07, 0x17, 0x8c, 0x4d, 0x7e, 0xd2, 0xa0, 0x3b, 0xb6, 0xa7,
	0xce, 0xa1, 0x67, 0x51, 0xef, 0x63, 0xcf, 0x98, 0xce, 0xa9, 0x13, 0x5c, 0x2e, 0x06, 0x8e, 0xa1,
	0xe3, 0x66, 0xdd, 0xc7, 0x89, 0x52, 0x9c, 0xef, 0x0d, 0xe6, 0x78, 0xa8, 0x84, 0xe8, 0x05, 0xae,
	0xe4, 0x37, 0x0d, 0x36, 0x0f, 0x17, 0x94, 0x13, 0xbb, 0x24, 0xa1, 0xf7, 0xa1, 0xc5, 0xa2, 0xca,
	0x44, 0xae, 0xa6, 0x44, 0x52, 0x02, 0x12, 0x14, 0x1f, 0xc2, 0xba, 0x40, 0xa9, 0x5b, 0x66, 0xbe,
	0x98, 0x4f, 0x42, 0x17, 0x81, 0xe4, 0x05, 0xe0, 0xae, 0xe1, 0x98, 0x74, 0xf6, 0x7f, 0x73, 0x26,
	0x23, 0xb8, 0xa1, 0x1b, 0x8e, 0xe5, 0xce, 0x13, 0x1d, 0x4f, 0x0d, 0x8f, 0xfa, 0x97, 0x9c, 0x0b,
	0xdf, 0x69, 0x70, 0x53, 0xa7, 0xbe, 0x6d, 0x2d, 0xe9, 0x7f, 0x89, 0x83, 0x1f, 0xc0, 0x86, 0x27,
	0xb0, 0xf1, 0xa3, 0x5c, 0xda, 0xcc, 0x43, 0x64, 0xea, 0xeb, 0x32, 0x98, 0x7c, 0xaf, 0xc1, 0xad,
	0x5d, 0x77, 0xbe, 0x58, 0x06, 0x54, 0xa2, 0x73, 0x49, 0x22, 0x8f, 0x61, 0xd3, 0x13, 0x03, 0xc4,
	0x4c, 0xae, 0x71, 0x26, 0xd2, 0x4f, 0x3d, 0x07, 0x27, 0x3f, 0x6a, 0x70, 0x77, 0xc7, 0x73, 0x0d,
	0xcb, 0x34, 0xfc, 0xe0, 0xf1, 0x6c, 0x71, 0x6a, 0xec, 0xd0, 0xc0, 0x78, 0x49, 0x3e, 0x23, 0xd8,
	0x32, 0xe4, 0x10, 0x11, 0xa1, 0x0e, 0x5f, 0xd3, 0xb9, 0x0e, 0xf2, 0x0e, 0xe4, 0x5b, 0x0d, 0x6e,
	0x25, 0x94, 0x46, 0x74, 0xf6, 0xd2, 0x74, 0x1e, 0xc2, 0xba, 0x95, 0x75, 0x8f, 0xa8, 0xf0, 0x99,
	0x2e, 0x06, 0x16, 0x81, 0xe4, 0x6f, 0x0d, 0xb6, 0x72, 0x5c, 0x57, 0x6c, 0x92, 0x37, 0xa1, 0x1e,
	0xa9, 0xbb, 0x6f, 0xb1, 0x9e, 0x9a, 0x7a, 0x6a, 0x08, 0xb9, 0xb0, 0x4c, 0x2f, 0xb2, 0xea, 0x04,
	0x20, 0xbe, 0x0b, 0xcd, 0x49, 0x56, 0xcf, 0x4a, 0xa1, 0xa3, 0x80, 0x23, 0x7f, 0x94, 0x61, 0x5d,
	0x48, 0x72, 0x05, 0xff, 0x16, 0x94, 0xec, 0x98, 0x78, 0xc9, 0xb6, 0xc2, 0xe2, 0xc1, 0x44, 0xd9,
	0xb7, 0x18, 0xd7, 0xa6, 0x1e, 0x37, 0xf1, 0x36, 0xc0, 0x64, 0x79, 0xc6, 0xfa, 0xde, 0xb7, 0x18,
	0x9f, 0xa6, 0x9e, 0xb1, 0xe0, 0x1d, 0x68, 0xf8, 0x74, 0x36, 0x8b, 0x01, 0x6b, 0x0c, 0x90, 0x35,
	0x61, 0x1f, 0x30, 0xc6, 0xc7, 0xec, 0xf6, 0xad, 0x6e, 0x95, 0x01, 0x15, 0x7f, 0x70, 0x00, 0x57,
	0x13, 0xf7, 0x8c, 0x43, 0x8d, 0x39, 0xa8, 0x7e, 0x85, 0x25, 0xeb, 0xc4, 0x0f, 0x76, 0x5d, 0x8b,
	0xb2, 0x25, 0xde, 0xbd, 0xc2, 0xa0, 0x82, 0x2d, 0xc4, 0xf8, 0x8e, 0x95, 0x62, 0xea, 0x1c, 0x93,
	0xb5, 0x85, 0xb9, 0x2e, 0x3c, 0xdb, 0x8c, 0x10, 0xc0, 0x73, 0x4d, 0x2d, 0x78, 0x0f, 0x5a, 0x73,
	0xe3, 0xc5, 0x67, 0xee, 0x6c, 0x39, 0x8f, 0x30, 0x0d, 0x86, 0x91, 0xac, 0x0c, 0x67, 0x3b, 0x59,
	0x5c, 0x33, 0xc2, 0x09, 0x56, 0xf2, 0x4f, 0x09, 0xd6, 0x85, 0x5c, 0x2e, 0x3f, 0x6a, 0x6e, 0xa4,
	0x7b, 0x34, 0x6a, 0x51, 0x33, 0x8c, 0xc3, 0x3e, 0x8f, 0xcf, 0x16, 0x94, 0x0d, 0x5a, 0x59, 0x4f,
	0x0d, 0xe1, 0x98, 0xb1, 0xc6, 0x91, 0xe1, 0xd9, 0xc1, 0x19, 0x1b, 0xb3, 0xb2, 0x9e, 0x35, 0xe5,
	0x14, 0xad, 0x5e, 0x40, 0xd1, 0xda, 0x4a, 0x45, 0xaf, 0x5c, 0x40, 0xd1, 0xfa, 0x05, 0x15, 0x05,
	0xa5, 0xa2, 0x5f, 0x40, 0x47, 0x5d, 0x9a, 0x57, 0x28, 0x7b, 0x1f, 0x36, 0x5c, 0x69, 0xbe, 0x71,
	0x99, 0x65, 0x33, 0xf9, 0x04, 0x5a, 0x62, 0xfd, 0x5a, 0x11, 0x39, 0x33, 0x46, 0x25, 0x61, 0x8c,
	0xc8, 0x9f, 0x1a, 0x6c, 0x48, 0x9b, 0xf6, 0x8a, 0x58, 0x1d, 0xa8, 0x1a, 0x3c, 0x7b, 0x1e, 0x2a,
	0x6a, 0x85, 0xf6, 0x09, 0xb7, 0xf3, 0x69, 0x10, 0xb5, 0x42, 0xbb, 0xc9, 0xed, 0x7c, 0xdd, 0x46,
	0xad, 0x70, 0xe4, 0xa2, 0xcd, 0x8a, 0xff, 0xe5, 0x8b, 0x56, 0xb0, 0x89, 0x3b, 0x5c, 0x55, 0xda,
	0xe1, 0x88, 0x07, 0x9b, 0x72, 0xbd, 0x59, 0xc1, 0xfd, 0x23, 0x65, 0xf9, 0x2a, 0xa7, 0x85, 0x54,
	0x2a, 0x8e, 0xf9, 0xea, 0x35, 0x82, 0x96, 0x58, 0x6d, 0x57, 0xf4, 0xd8, 0x86, 0x35, 0x3f, 0x23,
	0x16, 0x6f, 0x10, 0x07, 0x36, 0xa4, 0x9a, 0xbd, 0x22, 0xcc, 0x23, 0xd5, 0x01, 0xa0, 0x9c, 0x1c,
	0x66, 0xc4, 0x60, 0xf9, 0xfa, 0xff, 0x6b, 0x15, 0xea, 0xe1, 0x51, 0x76, 0x67, 0xe6, 0x9a, 0xcf,
	0x57, 0x74, 0xf5, 0x1e, 0x00, 0xdb, 0x76, 0x19, 0x36, 0x2a, 0x60, 0xd7, 0x59, 0x2f, 0x49, 0x04,
	0x5e, 0xca, 0xd8, 0xa7, 0x9e, 0x01, 0xe3, 0x87, 0xc9, 0x90, 0x72, 0xe7, 0x72, 0xe6, 0xb0, 0x9a,
	0x3a, 0xeb, 0x19, 0x88, 0x2e, 0x38, 0xf4, 0x7e, 0x2f, 0x01, 0xa4, 0xb1, 0xf1, 0x01, 0xd4, 0x16,
	0xd4, 0xb1, 0x6c, 0x67, 0xda, 0xd5, 0x58, 0xb6, 0xaa, 0x42, 0x1a, 0x43, 0xb0, 0x0f, 0x57, 0xe8,
	0x8c, 0x9a, 0x41, 0x08, 0x2f, 0x15, 0xc2, 0x13, 0x0c, 0x0e, 0xa0, 0x6e, 0xb2, 0x33, 0x51, 0xe8,
	0x50, 0x2e, 0x74, 0x48, 0x41, 0x38, 0x04, 0x38, 0xb1, 0x1d, 0x63, 0x66, 0x7f, 0x13, 0xba, 0x54,
	0x0a, 0x5d, 0x32, 0xa8, 0x30, 0x87, 0xb9, 0x11, 0x98, 0xa7, 0x34, 0x2c, 0x4b, 0x85, 0x39, 0x44,
	0x90, 0xb0, 0x87, 0xb9, 0xed, 0xc7, 0x0e, 0xd5, 0xe2, 0x1e, 0x52, 0x54, 0xef, 0xaf, 0x12, 0x34,
	0xb3, 0x9a, 0x62, 0x5f, 0x96, 0x4d, 0x3d, 0xb9, 0x13, 0xe1, 0x06, 0x39, 0xe1, 0xd4, 0x0e, 0xa9,
	0x74, 0xc3, 0xbc, 0x74, 0x6a, 0x97, 0x8c, 0x78, 0xdb, 0x0a, 0xf1, 0xd4, 0x4e, 0x59, 0xf9, 0xfa,
	0xb2, 0x7c, 0x05, 0xb9, 0xc4, 0x02, 0x6e, 0x2b, 0x04, 0x2c, 0xe8, 0x25, 0xc5, 0x91, 0x5f, 0xca,
	0x00, 0xc7, 0xc6, 0xf2, 0x80, 0xfa, 0xbe, 0x31, 0xa5, 0x78, 0x00, 0xed, 0x29, 0x75, 0xa8, 0x67,
	0x04, 0x94, 0xaf, 0x2c, 0x7e, 0x68, 0x8f, 0x4e, 0x7f, 0x7c, 0x31, 0xec, 0x29, 0x00, 0xba, 0xd2,
	0x2d, 0x3c, 0x34, 0xc7, 0xf6, 0xcf, 0xed, 0x28, 0x54, 0xf6, 0xd0, 0xbc, 0x27, 0xfd, 0xd4, 0x73,
	0x70, 0xdc, 0x03, 0x4c, 0x6d, 0xd2, 0x89, 0xee, 0x15, 0x29, 0x48, 0x92, 0xa1, 0xc2, 0x05, 0x9f,
	0xc1, 0xf5, 0x49, 0x7c, 0xd2, 0xd5, 0x4f, 0xdd, 0xb1, 0x3d, 0x9d, 0xcb, 0x07, 0xbd, 0xdb, 0x2c,
	0xde, 0x4e, 0x11, 0x4a, 0x2f, 0x0e, 0x10, 0xde, 0x5b, 0x27, 0xca, 0x73, 0x34, 0xdb, 0xdd, 0xe3,
	0xad, 0xa0, 0xe0, 0xa8, 0x5d, 0xe0, 0x4a, 0x3a, 0xd0, 0x56, 0x89, 0x4d, 0x10, 0x36, 0x65, 0xe5,
	0x48, 0x1b, 0x30, 0x2f, 0x04, 0xb9, 0x01, 0xd7, 0x0b, 0xd3, 0x21, 0x5d, 0xe8, 0xa8, 0x09, 0x0d,
	0x7f, 0xd6, 0x60, 0x6d, 0xfc, 0xb5, 0xe1, 0xcd, 0xf1, 0x01, 0x54, 0x8e, 0xc2, 0xd9, 0x98, 0x3f,
	0xf8, 0xf7, 0xf2, 0x26, 0x7c, 0x13, 0x80, 0xbd, 0x46, 0x1c, 0x51, 0xea, 0xf9, 0x08, 0x0c, 0xc0,
	0x0c, 0x0a, 0xf0, 0x40, 0xc3, 0xb7, 0xa1, 0x95, 0xc2, 0x47, 0x94, 0x2e, 0x56, 0xba, 0x0c, 0x7f,
	0x58, 0x83, 0xca, 0xc8, 0xf0, 0x9e, 0xe3, 0x1b, 0x50, 0x09, 0x37, 0x56, 0xdc, 0x4c, 0xf6, 0xd8,
	0xe8, 0xc6, 0xd2, 0x6b, 0x89, 0xbb, 0xee, 0x40, 0xc3, 0x43, 0xd8, 0xca, 0xbd, 0x4b, 0xe0, 0x2d,
	0x0e, 0x2b, 0x78, 0xaf, 0xe8, 0x9d, 0xf7, 0xd0, 0x10, 0x6e, 0xa0, 0xc9, 0x7b, 0x02, 0xf2, 0xa9,
	0x2c, 0xbf, 0x2f, 0xf4, 0xf8, 0xcb, 0x4a, 0xf4, 0x4e, 0x83, 0xdb, 0xd0, 0xc8, 0xdc, 0xe7, 0x91,
	0xcf, 0xdc, 0xfc, 0x0d, 0x5f, 0xf2, 0x7a, 0x02, 0x6d, 0xd5, 0x5d, 0x1c, 0xef, 0x28, 0x6a, 0x9f,
	0x70, 0xbd, 0xee, 0x29, 0xaf, 0xc7, 0xf8, 0x14, 0xae, 0x29, 0x2f, 0xe5, 0x78, 0x57, 0xb5, 0x51,
	0x88, 0x11, 0xd5, 0xd7, 0x5c, 0xfc, 0x14, 0x3a, 0xea, 0xfb, 0x35, 0x12, 0x9e, 0xe3, 0x79, 0x97,
	0x6f, 0x29, 0xdd, 0x67, 0xd0, 0x2b, 0xbe, 0x1f, 0xe3, 0x3d, 0x71, 0x09, 0x15, 0x5d, 0xa0, 0x7b,
	0x05, 0xd7, 0x5f, 0x3c, 0x2a, 0x9a, 0xee, 0x11, 0xd3, 0x73, 0xef, 0xc1, 0x3d, 0x45, 0x2d, 0x1a,
	0x3e, 0x62, 0x7b, 0xe7, 0x98, 0x7a, 0x5f, 0xd9, 0x26, 0xc5, 0xb7, 0xa0, 0xb6, 0xeb, 0x3a, 0x0e,
	0x35, 0x03, 0xdc, 0x60, 0xe0, 0x74, 0x5f, 0xed, 0xc9, 0x86, 0xfb, 0xda, 0x40, 0x9b, 0x54, 0xd9,
	0x4b, 0xe2, 0x3b, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x1d, 0x79, 0xfe, 0x00, 0x56, 0x14, 0x00,
	0x00,
}
