// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smpc.proto

/*
Package smpcer is a generated protocol buffer package.

It is generated from these files:
	smpc.proto

It has these top-level messages:
	OpenOrderRequest
	OpenOrderResponse
	CancelOrderRequest
	CancelOrderResponse
	ComputeMessage
	OrderFragment
	DeltaFragment
	Share
	Hash
*/
package smpcer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OpenOrderRequest struct {
	Signature     []byte         `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderFragment *OrderFragment `protobuf:"bytes,2,opt,name=orderFragment" json:"orderFragment,omitempty"`
}

func (m *OpenOrderRequest) Reset()                    { *m = OpenOrderRequest{} }
func (m *OpenOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderRequest) ProtoMessage()               {}
func (*OpenOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpenOrderRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *OpenOrderRequest) GetOrderFragment() *OrderFragment {
	if m != nil {
		return m.OrderFragment
	}
	return nil
}

type OpenOrderResponse struct {
}

func (m *OpenOrderResponse) Reset()                    { *m = OpenOrderResponse{} }
func (m *OpenOrderResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderResponse) ProtoMessage()               {}
func (*OpenOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CancelOrderRequest struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	OrderId   []byte `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
}

func (m *CancelOrderRequest) Reset()                    { *m = CancelOrderRequest{} }
func (m *CancelOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*CancelOrderRequest) ProtoMessage()               {}
func (*CancelOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CancelOrderRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CancelOrderRequest) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

type CancelOrderResponse struct {
}

func (m *CancelOrderResponse) Reset()                    { *m = CancelOrderResponse{} }
func (m *CancelOrderResponse) String() string            { return proto.CompactTextString(m) }
func (*CancelOrderResponse) ProtoMessage()               {}
func (*CancelOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ComputeMessage struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	// Types that are valid to be assigned to Value:
	//	*ComputeMessage_Address
	//	*ComputeMessage_DeltaFragment
	Value isComputeMessage_Value `protobuf_oneof:"Value"`
}

func (m *ComputeMessage) Reset()                    { *m = ComputeMessage{} }
func (m *ComputeMessage) String() string            { return proto.CompactTextString(m) }
func (*ComputeMessage) ProtoMessage()               {}
func (*ComputeMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type isComputeMessage_Value interface {
	isComputeMessage_Value()
}

type ComputeMessage_Address struct {
	Address string `protobuf:"bytes,2,opt,name=address,oneof"`
}
type ComputeMessage_DeltaFragment struct {
	DeltaFragment *DeltaFragment `protobuf:"bytes,3,opt,name=deltaFragment,oneof"`
}

func (*ComputeMessage_Address) isComputeMessage_Value()       {}
func (*ComputeMessage_DeltaFragment) isComputeMessage_Value() {}

func (m *ComputeMessage) GetValue() isComputeMessage_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *ComputeMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *ComputeMessage) GetAddress() string {
	if x, ok := m.GetValue().(*ComputeMessage_Address); ok {
		return x.Address
	}
	return ""
}

func (m *ComputeMessage) GetDeltaFragment() *DeltaFragment {
	if x, ok := m.GetValue().(*ComputeMessage_DeltaFragment); ok {
		return x.DeltaFragment
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ComputeMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ComputeMessage_OneofMarshaler, _ComputeMessage_OneofUnmarshaler, _ComputeMessage_OneofSizer, []interface{}{
		(*ComputeMessage_Address)(nil),
		(*ComputeMessage_DeltaFragment)(nil),
	}
}

func _ComputeMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ComputeMessage)
	// Value
	switch x := m.Value.(type) {
	case *ComputeMessage_Address:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Address)
	case *ComputeMessage_DeltaFragment:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DeltaFragment); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ComputeMessage.Value has unexpected type %T", x)
	}
	return nil
}

func _ComputeMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ComputeMessage)
	switch tag {
	case 2: // Value.address
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Value = &ComputeMessage_Address{x}
		return true, err
	case 3: // Value.deltaFragment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DeltaFragment)
		err := b.DecodeMessage(msg)
		m.Value = &ComputeMessage_DeltaFragment{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ComputeMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ComputeMessage)
	// Value
	switch x := m.Value.(type) {
	case *ComputeMessage_Address:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Address)))
		n += len(x.Address)
	case *ComputeMessage_DeltaFragment:
		s := proto.Size(x.DeltaFragment)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type OrderFragment struct {
	OrderFragmentId []byte `protobuf:"bytes,1,opt,name=orderFragmentId,proto3" json:"orderFragmentId,omitempty"`
	OrderId         []byte `protobuf:"bytes,2,opt,name=orderId,proto3" json:"orderId,omitempty"`
	Type            int64  `protobuf:"varint,3,opt,name=type" json:"type,omitempty"`
	Parity          int64  `protobuf:"varint,4,opt,name=parity" json:"parity,omitempty"`
	Expiry          int64  `protobuf:"varint,5,opt,name=expiry" json:"expiry,omitempty"`
	FstCodeShare    []byte `protobuf:"bytes,6,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare    []byte `protobuf:"bytes,7,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare      []byte `protobuf:"bytes,8,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare  []byte `protobuf:"bytes,9,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare  []byte `protobuf:"bytes,10,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *OrderFragment) Reset()                    { *m = OrderFragment{} }
func (m *OrderFragment) String() string            { return proto.CompactTextString(m) }
func (*OrderFragment) ProtoMessage()               {}
func (*OrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OrderFragment) GetOrderFragmentId() []byte {
	if m != nil {
		return m.OrderFragmentId
	}
	return nil
}

func (m *OrderFragment) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderFragment) GetType() int64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *OrderFragment) GetParity() int64 {
	if m != nil {
		return m.Parity
	}
	return 0
}

func (m *OrderFragment) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *OrderFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *OrderFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *OrderFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *OrderFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *OrderFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type DeltaFragment struct {
	DeltaFragmentId     []byte `protobuf:"bytes,1,opt,name=deltaFragmentId,proto3" json:"deltaFragmentId,omitempty"`
	DeltaId             []byte `protobuf:"bytes,2,opt,name=deltaId,proto3" json:"deltaId,omitempty"`
	BuyOrderId          []byte `protobuf:"bytes,3,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId         []byte `protobuf:"bytes,4,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyOrderFragmentId  []byte `protobuf:"bytes,5,opt,name=buyOrderFragmentId,proto3" json:"buyOrderFragmentId,omitempty"`
	SellOrderFragmentId []byte `protobuf:"bytes,6,opt,name=sellOrderFragmentId,proto3" json:"sellOrderFragmentId,omitempty"`
	FstCodeShare        []byte `protobuf:"bytes,7,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare        []byte `protobuf:"bytes,8,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare          []byte `protobuf:"bytes,9,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare      []byte `protobuf:"bytes,10,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare      []byte `protobuf:"bytes,11,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *DeltaFragment) Reset()                    { *m = DeltaFragment{} }
func (m *DeltaFragment) String() string            { return proto.CompactTextString(m) }
func (*DeltaFragment) ProtoMessage()               {}
func (*DeltaFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *DeltaFragment) GetDeltaFragmentId() []byte {
	if m != nil {
		return m.DeltaFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetDeltaId() []byte {
	if m != nil {
		return m.DeltaId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *DeltaFragment) GetBuyOrderFragmentId() []byte {
	if m != nil {
		return m.BuyOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetSellOrderFragmentId() []byte {
	if m != nil {
		return m.SellOrderFragmentId
	}
	return nil
}

func (m *DeltaFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *DeltaFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *DeltaFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *DeltaFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

type Share struct {
	Index int64  `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Value []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Share) Reset()                    { *m = Share{} }
func (m *Share) String() string            { return proto.CompactTextString(m) }
func (*Share) ProtoMessage()               {}
func (*Share) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Share) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Share) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type Hash struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Hash      []byte `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Hash) Reset()                    { *m = Hash{} }
func (m *Hash) String() string            { return proto.CompactTextString(m) }
func (*Hash) ProtoMessage()               {}
func (*Hash) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Hash) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Hash) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func init() {
	proto.RegisterType((*OpenOrderRequest)(nil), "smpcer.OpenOrderRequest")
	proto.RegisterType((*OpenOrderResponse)(nil), "smpcer.OpenOrderResponse")
	proto.RegisterType((*CancelOrderRequest)(nil), "smpcer.CancelOrderRequest")
	proto.RegisterType((*CancelOrderResponse)(nil), "smpcer.CancelOrderResponse")
	proto.RegisterType((*ComputeMessage)(nil), "smpcer.ComputeMessage")
	proto.RegisterType((*OrderFragment)(nil), "smpcer.OrderFragment")
	proto.RegisterType((*DeltaFragment)(nil), "smpcer.DeltaFragment")
	proto.RegisterType((*Share)(nil), "smpcer.Share")
	proto.RegisterType((*Hash)(nil), "smpcer.Hash")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Smpc service

type SmpcClient interface {
	OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*OpenOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	Compute(ctx context.Context, opts ...grpc.CallOption) (Smpc_ComputeClient, error)
}

type smpcClient struct {
	cc *grpc.ClientConn
}

func NewSmpcClient(cc *grpc.ClientConn) SmpcClient {
	return &smpcClient{cc}
}

func (c *smpcClient) OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc.CallOption) (*OpenOrderResponse, error) {
	out := new(OpenOrderResponse)
	err := grpc.Invoke(ctx, "/smpcer.Smpc/OpenOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smpcClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := grpc.Invoke(ctx, "/smpcer.Smpc/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smpcClient) Compute(ctx context.Context, opts ...grpc.CallOption) (Smpc_ComputeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Smpc_serviceDesc.Streams[0], c.cc, "/smpcer.Smpc/Compute", opts...)
	if err != nil {
		return nil, err
	}
	x := &smpcComputeClient{stream}
	return x, nil
}

type Smpc_ComputeClient interface {
	Send(*ComputeMessage) error
	Recv() (*ComputeMessage, error)
	grpc.ClientStream
}

type smpcComputeClient struct {
	grpc.ClientStream
}

func (x *smpcComputeClient) Send(m *ComputeMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *smpcComputeClient) Recv() (*ComputeMessage, error) {
	m := new(ComputeMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Smpc service

type SmpcServer interface {
	OpenOrder(context.Context, *OpenOrderRequest) (*OpenOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	Compute(Smpc_ComputeServer) error
}

func RegisterSmpcServer(s *grpc.Server, srv SmpcServer) {
	s.RegisterService(&_Smpc_serviceDesc, srv)
}

func _Smpc_OpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmpcServer).OpenOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpcer.Smpc/OpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmpcServer).OpenOrder(ctx, req.(*OpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smpc_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmpcServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smpcer.Smpc/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmpcServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smpc_Compute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SmpcServer).Compute(&smpcComputeServer{stream})
}

type Smpc_ComputeServer interface {
	Send(*ComputeMessage) error
	Recv() (*ComputeMessage, error)
	grpc.ServerStream
}

type smpcComputeServer struct {
	grpc.ServerStream
}

func (x *smpcComputeServer) Send(m *ComputeMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *smpcComputeServer) Recv() (*ComputeMessage, error) {
	m := new(ComputeMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Smpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smpcer.Smpc",
	HandlerType: (*SmpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenOrder",
			Handler:    _Smpc_OpenOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Smpc_CancelOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Compute",
			Handler:       _Smpc_Compute_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "smpc.proto",
}

func init() { proto.RegisterFile("smpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 554 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6a, 0xdb, 0x40,
	0x10, 0xc6, 0xa3, 0x58, 0xb6, 0xe2, 0xb1, 0x9d, 0xb6, 0xe3, 0x26, 0xa8, 0x6e, 0x29, 0x46, 0x87,
	0xe2, 0x93, 0x09, 0xc9, 0xa5, 0x50, 0x02, 0xa5, 0x2e, 0xc1, 0x81, 0x16, 0x83, 0x02, 0xb9, 0x6f,
	0xac, 0xa9, 0x2d, 0xd0, 0xbf, 0xee, 0x4a, 0xc5, 0x7e, 0x8d, 0xbe, 0x48, 0x1f, 0x25, 0xaf, 0x54,
	0xb4, 0x5a, 0xdb, 0xbb, 0x8e, 0x83, 0x9d, 0xdb, 0xce, 0x37, 0xbf, 0xdd, 0x19, 0x7d, 0x83, 0x06,
	0x40, 0xc4, 0xd9, 0x74, 0x98, 0xf1, 0x34, 0x4f, 0xb1, 0x51, 0x9e, 0x89, 0x7b, 0x31, 0xbc, 0x9e,
	0x64, 0x94, 0x4c, 0x78, 0x40, 0xdc, 0xa7, 0xdf, 0x05, 0x89, 0x1c, 0x3f, 0x40, 0x53, 0x84, 0xb3,
	0x84, 0xe5, 0x05, 0x27, 0xd7, 0xea, 0x5b, 0x83, 0xb6, 0xbf, 0x11, 0xf0, 0x0b, 0x74, 0xd2, 0x92,
	0xbe, 0xe1, 0x6c, 0x16, 0x53, 0x92, 0xbb, 0xc7, 0x7d, 0x6b, 0xd0, 0xba, 0x3c, 0x1b, 0x56, 0x2f,
	0x0e, 0x27, 0x7a, 0xd2, 0x37, 0x59, 0xaf, 0x0b, 0x6f, 0xb4, 0x72, 0x22, 0x4b, 0x13, 0x41, 0xde,
	0x0f, 0xc0, 0x11, 0x4b, 0xa6, 0x14, 0xbd, 0xa0, 0x0b, 0x17, 0x1c, 0xf9, 0xf2, 0x6d, 0x20, 0xeb,
	0xb7, 0xfd, 0x55, 0xe8, 0x9d, 0x41, 0xd7, 0x78, 0x4d, 0x15, 0xf9, 0x6b, 0xc1, 0xe9, 0x28, 0x8d,
	0xb3, 0x22, 0xa7, 0x9f, 0x24, 0x04, 0x9b, 0xd1, 0x9e, 0x0a, 0x3d, 0x70, 0x58, 0x10, 0x70, 0x12,
	0x42, 0x56, 0x68, 0x8e, 0x8f, 0xfc, 0x95, 0x80, 0xd7, 0xd0, 0x09, 0x28, 0xca, 0xd9, 0xda, 0x83,
	0x9a, 0xe9, 0xc1, 0x77, 0x3d, 0x39, 0x3e, 0xf2, 0x4d, 0xfa, 0x9b, 0x03, 0xf5, 0x7b, 0x16, 0x15,
	0xe4, 0x3d, 0x1e, 0x43, 0xc7, 0xf0, 0x0b, 0x07, 0xf0, 0xca, 0x70, 0xec, 0x36, 0x50, 0x9d, 0x6d,
	0xcb, 0xcf, 0x3b, 0x80, 0x08, 0x76, 0xbe, 0xcc, 0x48, 0x36, 0x55, 0xf3, 0xe5, 0x19, 0xcf, 0xa1,
	0x91, 0x31, 0x1e, 0xe6, 0x4b, 0xd7, 0x96, 0xaa, 0x8a, 0x4a, 0x9d, 0x16, 0x59, 0xc8, 0x97, 0x6e,
	0xbd, 0xd2, 0xab, 0x08, 0x3d, 0x68, 0xff, 0x12, 0xf9, 0x28, 0x0d, 0xe8, 0x6e, 0xce, 0x38, 0xb9,
	0x0d, 0x59, 0xc2, 0xd0, 0x4a, 0x46, 0x24, 0xc1, 0x86, 0x71, 0x2a, 0x46, 0xd7, 0xf0, 0x23, 0x40,
	0xc6, 0xc3, 0xa9, 0x22, 0x4e, 0x24, 0xa1, 0x29, 0xf8, 0x09, 0x4e, 0x63, 0xb6, 0xb8, 0x4f, 0xa3,
	0x22, 0x56, 0x4c, 0x53, 0x32, 0x5b, 0xaa, 0xe4, 0xc2, 0x44, 0xe7, 0x40, 0x71, 0x86, 0xea, 0xfd,
	0xab, 0x41, 0xc7, 0x70, 0xbf, 0x74, 0xd4, 0x70, 0x7f, 0xe3, 0xe8, 0x96, 0x5c, 0x3a, 0x2a, 0xa5,
	0x8d, 0xa3, 0x2a, 0x2c, 0xbf, 0xe2, 0xa1, 0x58, 0x4e, 0x94, 0xdd, 0xb5, 0xea, 0x2b, 0x36, 0x0a,
	0xf6, 0xa1, 0x25, 0x28, 0x8a, 0x56, 0x80, 0x2d, 0x01, 0x5d, 0xc2, 0x21, 0xe0, 0x8a, 0xd7, 0x1a,
	0xa9, 0x4b, 0x70, 0x47, 0x06, 0x2f, 0xa0, 0xbb, 0xbe, 0xae, 0x5d, 0xa8, 0xc6, 0xb0, 0x2b, 0xf5,
	0x64, 0x62, 0xce, 0x01, 0x13, 0x3b, 0xd9, 0x3b, 0xb1, 0xe6, 0x01, 0x13, 0x83, 0x03, 0x27, 0xd6,
	0xda, 0x39, 0xb1, 0x2b, 0xa8, 0x57, 0x17, 0xde, 0x42, 0x3d, 0x4c, 0x02, 0x5a, 0xc8, 0xf1, 0xd4,
	0xfc, 0x2a, 0x28, 0xd5, 0x3f, 0xe5, 0xbf, 0xa2, 0x46, 0x52, 0x05, 0xde, 0x67, 0xb0, 0xc7, 0x4c,
	0xcc, 0xf7, 0xfc, 0xc2, 0x08, 0xf6, 0x9c, 0x89, 0xb9, 0xba, 0x2a, 0xcf, 0x97, 0x8f, 0x16, 0xd8,
	0x77, 0x71, 0x36, 0xc5, 0xaf, 0xd0, 0x5c, 0xaf, 0x22, 0x74, 0xd7, 0xdb, 0x6b, 0x6b, 0x19, 0xf6,
	0xde, 0xed, 0xc8, 0x54, 0x2b, 0x05, 0x6f, 0xa0, 0xa5, 0x6d, 0x1a, 0xec, 0xad, 0xc8, 0xa7, 0xcb,
	0xac, 0xf7, 0x7e, 0x67, 0x4e, 0xbd, 0x73, 0x0d, 0x8e, 0xda, 0x4c, 0x78, 0xbe, 0xe6, 0x8c, 0x55,
	0xd5, 0x7b, 0x46, 0x1f, 0x58, 0x17, 0xd6, 0x43, 0x43, 0x6e, 0xf4, 0xab, 0xff, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xdc, 0xe2, 0x60, 0x09, 0xdf, 0x05, 0x00, 0x00,
}
