// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	StreamAddress
	StreamMessage
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StreamAddress struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *StreamAddress) Reset()                    { *m = StreamAddress{} }
func (m *StreamAddress) String() string            { return proto.CompactTextString(m) }
func (*StreamAddress) ProtoMessage()               {}
func (*StreamAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StreamAddress) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *StreamAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type StreamMessage struct {
	StreamAddress *StreamAddress `protobuf:"bytes,1,opt,name=streamAddress" json:"streamAddress,omitempty"`
	Data          []byte         `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StreamMessage) Reset()                    { *m = StreamMessage{} }
func (m *StreamMessage) String() string            { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()               {}
func (*StreamMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StreamMessage) GetStreamAddress() *StreamAddress {
	if m != nil {
		return m.StreamAddress
	}
	return nil
}

func (m *StreamMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*StreamAddress)(nil), "grpc.StreamAddress")
	proto.RegisterType((*StreamMessage)(nil), "grpc.StreamMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for StreamService service

type StreamServiceClient interface {
	Connect(ctx context.Context, opts ...grpc1.CallOption) (StreamService_ConnectClient, error)
}

type streamServiceClient struct {
	cc *grpc1.ClientConn
}

func NewStreamServiceClient(cc *grpc1.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Connect(ctx context.Context, opts ...grpc1.CallOption) (StreamService_ConnectClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/grpc.StreamService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceConnectClient{stream}
	return x, nil
}

type StreamService_ConnectClient interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc1.ClientStream
}

type streamServiceConnectClient struct {
	grpc1.ClientStream
}

func (x *streamServiceConnectClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceConnectClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Connect(StreamService_ConnectServer) error
}

func RegisterStreamServiceServer(s *grpc1.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Connect_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(StreamServiceServer).Connect(&streamServiceConnectServer{stream})
}

type StreamService_ConnectServer interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc1.ServerStream
}

type streamServiceConnectServer struct {
	grpc1.ServerStream
}

func (x *streamServiceConnectServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceConnectServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc1.MethodDesc{},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _StreamService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xdc, 0xb9, 0x78, 0x83, 0x4b,
	0x8a, 0x52, 0x13, 0x73, 0x1d, 0x53, 0x52, 0x8a, 0x52, 0x8b, 0x8b, 0x85, 0x64, 0xb8, 0x38, 0x8b,
	0x33, 0xd3, 0xf3, 0x12, 0x4b, 0x4a, 0x8b, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0x10,
	0x02, 0x42, 0x12, 0x5c, 0xec, 0x89, 0x10, 0x85, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x30,
	0xae, 0x52, 0x1c, 0xcc, 0x20, 0xdf, 0xd4, 0xe2, 0xe2, 0xc4, 0xf4, 0x54, 0x21, 0x4b, 0x2e, 0xde,
	0x62, 0x64, 0x93, 0xc1, 0x86, 0x71, 0x1b, 0x09, 0xeb, 0x81, 0xdd, 0x80, 0x62, 0x69, 0x10, 0xaa,
	0x4a, 0x21, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0xb0, 0x15, 0x3c, 0x41, 0x60, 0xb6, 0x91,
	0x07, 0xcc, 0xfc, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x73, 0x2e, 0x76, 0xe7, 0xfc,
	0xbc, 0xbc, 0xd4, 0xe4, 0x12, 0x21, 0x14, 0x33, 0xa1, 0xf6, 0x4b, 0x61, 0x13, 0xd4, 0x60, 0x34,
	0x60, 0x4c, 0x62, 0x03, 0xfb, 0xdf, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x17, 0xb9, 0x9c, 0x7c,
	0x0d, 0x01, 0x00, 0x00,
}
