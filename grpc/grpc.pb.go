// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	grpc.proto

It has these top-level messages:
	PingRequest
	PingResponse
	QueryRequest
	QueryResponse
	StreamMessage
	StreamAuthentication
	OpenOrderRequest
	OpenOrderResponse
	EncryptedOrderFragment
	EncryptedCoExpShare
	StatusRequest
	StatusResponse
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type OrderType int32

const (
	OrderType_Midpoint OrderType = 0
	OrderType_Limit    OrderType = 1
)

var OrderType_name = map[int32]string{
	0: "Midpoint",
	1: "Limit",
}
var OrderType_value = map[string]int32{
	"Midpoint": 0,
	"Limit":    1,
}

func (x OrderType) String() string {
	return proto.EnumName(OrderType_name, int32(x))
}
func (OrderType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type OrderParity int32

const (
	OrderParity_Buy  OrderParity = 0
	OrderParity_Sell OrderParity = 1
)

var OrderParity_name = map[int32]string{
	0: "Buy",
	1: "Sell",
}
var OrderParity_value = map[string]int32{
	"Buy":  0,
	"Sell": 1,
}

func (x OrderParity) String() string {
	return proto.EnumName(OrderParity_name, int32(x))
}
func (OrderParity) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type PingRequest struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PingRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PingRequest) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

type PingResponse struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PingResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PingResponse) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

type QueryRequest struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryRequest) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *QueryRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryResponse struct {
	Signature    []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	MultiAddress string `protobuf:"bytes,2,opt,name=multiAddress" json:"multiAddress,omitempty"`
}

func (m *QueryResponse) Reset()                    { *m = QueryResponse{} }
func (m *QueryResponse) String() string            { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()               {}
func (*QueryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryResponse) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *QueryResponse) GetMultiAddress() string {
	if m != nil {
		return m.MultiAddress
	}
	return ""
}

type StreamMessage struct {
	Authentication *StreamAuthentication `protobuf:"bytes,1,opt,name=authentication" json:"authentication,omitempty"`
	Data           []byte                `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StreamMessage) Reset()                    { *m = StreamMessage{} }
func (m *StreamMessage) String() string            { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()               {}
func (*StreamMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *StreamMessage) GetAuthentication() *StreamAuthentication {
	if m != nil {
		return m.Authentication
	}
	return nil
}

func (m *StreamMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type StreamAuthentication struct {
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Address   string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
}

func (m *StreamAuthentication) Reset()                    { *m = StreamAuthentication{} }
func (m *StreamAuthentication) String() string            { return proto.CompactTextString(m) }
func (*StreamAuthentication) ProtoMessage()               {}
func (*StreamAuthentication) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StreamAuthentication) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *StreamAuthentication) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type OpenOrderRequest struct {
	OrderFragment *EncryptedOrderFragment `protobuf:"bytes,1,opt,name=orderFragment" json:"orderFragment,omitempty"`
}

func (m *OpenOrderRequest) Reset()                    { *m = OpenOrderRequest{} }
func (m *OpenOrderRequest) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderRequest) ProtoMessage()               {}
func (*OpenOrderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *OpenOrderRequest) GetOrderFragment() *EncryptedOrderFragment {
	if m != nil {
		return m.OrderFragment
	}
	return nil
}

type OpenOrderResponse struct {
}

func (m *OpenOrderResponse) Reset()                    { *m = OpenOrderResponse{} }
func (m *OpenOrderResponse) String() string            { return proto.CompactTextString(m) }
func (*OpenOrderResponse) ProtoMessage()               {}
func (*OpenOrderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type EncryptedOrderFragment struct {
	OrderId       []byte               `protobuf:"bytes,1,opt,name=orderId,proto3" json:"orderId,omitempty"`
	OrderType     OrderType            `protobuf:"varint,2,opt,name=orderType,enum=grpc.OrderType" json:"orderType,omitempty"`
	OrderParity   OrderParity          `protobuf:"varint,3,opt,name=orderParity,enum=grpc.OrderParity" json:"orderParity,omitempty"`
	OrderExpiry   int64                `protobuf:"varint,4,opt,name=orderExpiry" json:"orderExpiry,omitempty"`
	Id            []byte               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	Tokens        []byte               `protobuf:"bytes,6,opt,name=tokens,proto3" json:"tokens,omitempty"`
	Price         *EncryptedCoExpShare `protobuf:"bytes,7,opt,name=price" json:"price,omitempty"`
	Volume        *EncryptedCoExpShare `protobuf:"bytes,8,opt,name=volume" json:"volume,omitempty"`
	MinimumVolume *EncryptedCoExpShare `protobuf:"bytes,9,opt,name=minimumVolume" json:"minimumVolume,omitempty"`
}

func (m *EncryptedOrderFragment) Reset()                    { *m = EncryptedOrderFragment{} }
func (m *EncryptedOrderFragment) String() string            { return proto.CompactTextString(m) }
func (*EncryptedOrderFragment) ProtoMessage()               {}
func (*EncryptedOrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *EncryptedOrderFragment) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *EncryptedOrderFragment) GetOrderType() OrderType {
	if m != nil {
		return m.OrderType
	}
	return OrderType_Midpoint
}

func (m *EncryptedOrderFragment) GetOrderParity() OrderParity {
	if m != nil {
		return m.OrderParity
	}
	return OrderParity_Buy
}

func (m *EncryptedOrderFragment) GetOrderExpiry() int64 {
	if m != nil {
		return m.OrderExpiry
	}
	return 0
}

func (m *EncryptedOrderFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *EncryptedOrderFragment) GetTokens() []byte {
	if m != nil {
		return m.Tokens
	}
	return nil
}

func (m *EncryptedOrderFragment) GetPrice() *EncryptedCoExpShare {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *EncryptedOrderFragment) GetVolume() *EncryptedCoExpShare {
	if m != nil {
		return m.Volume
	}
	return nil
}

func (m *EncryptedOrderFragment) GetMinimumVolume() *EncryptedCoExpShare {
	if m != nil {
		return m.MinimumVolume
	}
	return nil
}

type EncryptedCoExpShare struct {
	Co  []byte `protobuf:"bytes,1,opt,name=co,proto3" json:"co,omitempty"`
	Exp []byte `protobuf:"bytes,2,opt,name=exp,proto3" json:"exp,omitempty"`
}

func (m *EncryptedCoExpShare) Reset()                    { *m = EncryptedCoExpShare{} }
func (m *EncryptedCoExpShare) String() string            { return proto.CompactTextString(m) }
func (*EncryptedCoExpShare) ProtoMessage()               {}
func (*EncryptedCoExpShare) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *EncryptedCoExpShare) GetCo() []byte {
	if m != nil {
		return m.Co
	}
	return nil
}

func (m *EncryptedCoExpShare) GetExp() []byte {
	if m != nil {
		return m.Exp
	}
	return nil
}

type StatusRequest struct {
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type StatusResponse struct {
	Address      string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	Bootstrapped bool   `protobuf:"varint,2,opt,name=bootstrapped" json:"bootstrapped,omitempty"`
	Peers        int64  `protobuf:"varint,3,opt,name=peers" json:"peers,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *StatusResponse) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *StatusResponse) GetBootstrapped() bool {
	if m != nil {
		return m.Bootstrapped
	}
	return false
}

func (m *StatusResponse) GetPeers() int64 {
	if m != nil {
		return m.Peers
	}
	return 0
}

func init() {
	proto.RegisterType((*PingRequest)(nil), "grpc.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "grpc.PingResponse")
	proto.RegisterType((*QueryRequest)(nil), "grpc.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "grpc.QueryResponse")
	proto.RegisterType((*StreamMessage)(nil), "grpc.StreamMessage")
	proto.RegisterType((*StreamAuthentication)(nil), "grpc.StreamAuthentication")
	proto.RegisterType((*OpenOrderRequest)(nil), "grpc.OpenOrderRequest")
	proto.RegisterType((*OpenOrderResponse)(nil), "grpc.OpenOrderResponse")
	proto.RegisterType((*EncryptedOrderFragment)(nil), "grpc.EncryptedOrderFragment")
	proto.RegisterType((*EncryptedCoExpShare)(nil), "grpc.EncryptedCoExpShare")
	proto.RegisterType((*StatusRequest)(nil), "grpc.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "grpc.StatusResponse")
	proto.RegisterEnum("grpc.OrderType", OrderType_name, OrderType_value)
	proto.RegisterEnum("grpc.OrderParity", OrderParity_name, OrderParity_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for SwarmService service

type SwarmServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc1.CallOption) (*PingResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc1.CallOption) (SwarmService_QueryClient, error)
}

type swarmServiceClient struct {
	cc *grpc1.ClientConn
}

func NewSwarmServiceClient(cc *grpc1.ClientConn) SwarmServiceClient {
	return &swarmServiceClient{cc}
}

func (c *swarmServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc1.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc1.Invoke(ctx, "/grpc.SwarmService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc1.CallOption) (SwarmService_QueryClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_SwarmService_serviceDesc.Streams[0], c.cc, "/grpc.SwarmService/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmServiceQueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SwarmService_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc1.ClientStream
}

type swarmServiceQueryClient struct {
	grpc1.ClientStream
}

func (x *swarmServiceQueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SwarmService service

type SwarmServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	Query(*QueryRequest, SwarmService_QueryServer) error
}

func RegisterSwarmServiceServer(s *grpc1.Server, srv SwarmServiceServer) {
	s.RegisterService(&_SwarmService_serviceDesc, srv)
}

func _SwarmService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmServiceServer).Ping(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.SwarmService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwarmService_Query_Handler(srv interface{}, stream grpc1.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmServiceServer).Query(m, &swarmServiceQueryServer{stream})
}

type SwarmService_QueryServer interface {
	Send(*QueryResponse) error
	grpc1.ServerStream
}

type swarmServiceQueryServer struct {
	grpc1.ServerStream
}

func (x *swarmServiceQueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SwarmService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.SwarmService",
	HandlerType: (*SwarmServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SwarmService_Ping_Handler,
		},
	},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _SwarmService_Query_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

// Client API for StreamService service

type StreamServiceClient interface {
	Connect(ctx context.Context, opts ...grpc1.CallOption) (StreamService_ConnectClient, error)
}

type streamServiceClient struct {
	cc *grpc1.ClientConn
}

func NewStreamServiceClient(cc *grpc1.ClientConn) StreamServiceClient {
	return &streamServiceClient{cc}
}

func (c *streamServiceClient) Connect(ctx context.Context, opts ...grpc1.CallOption) (StreamService_ConnectClient, error) {
	stream, err := grpc1.NewClientStream(ctx, &_StreamService_serviceDesc.Streams[0], c.cc, "/grpc.StreamService/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamServiceConnectClient{stream}
	return x, nil
}

type StreamService_ConnectClient interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc1.ClientStream
}

type streamServiceConnectClient struct {
	grpc1.ClientStream
}

func (x *streamServiceConnectClient) Send(m *StreamMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamServiceConnectClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for StreamService service

type StreamServiceServer interface {
	Connect(StreamService_ConnectServer) error
}

func RegisterStreamServiceServer(s *grpc1.Server, srv StreamServiceServer) {
	s.RegisterService(&_StreamService_serviceDesc, srv)
}

func _StreamService_Connect_Handler(srv interface{}, stream grpc1.ServerStream) error {
	return srv.(StreamServiceServer).Connect(&streamServiceConnectServer{stream})
}

type StreamService_ConnectServer interface {
	Send(*StreamMessage) error
	Recv() (*StreamMessage, error)
	grpc1.ServerStream
}

type streamServiceConnectServer struct {
	grpc1.ServerStream
}

func (x *streamServiceConnectServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamServiceConnectServer) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _StreamService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.StreamService",
	HandlerType: (*StreamServiceServer)(nil),
	Methods:     []grpc1.MethodDesc{},
	Streams: []grpc1.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _StreamService_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

// Client API for OrderbookService service

type OrderbookServiceClient interface {
	OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc1.CallOption) (*OpenOrderResponse, error)
}

type orderbookServiceClient struct {
	cc *grpc1.ClientConn
}

func NewOrderbookServiceClient(cc *grpc1.ClientConn) OrderbookServiceClient {
	return &orderbookServiceClient{cc}
}

func (c *orderbookServiceClient) OpenOrder(ctx context.Context, in *OpenOrderRequest, opts ...grpc1.CallOption) (*OpenOrderResponse, error) {
	out := new(OpenOrderResponse)
	err := grpc1.Invoke(ctx, "/grpc.OrderbookService/OpenOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderbookService service

type OrderbookServiceServer interface {
	OpenOrder(context.Context, *OpenOrderRequest) (*OpenOrderResponse, error)
}

func RegisterOrderbookServiceServer(s *grpc1.Server, srv OrderbookServiceServer) {
	s.RegisterService(&_OrderbookService_serviceDesc, srv)
}

func _OrderbookService_OpenOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServiceServer).OpenOrder(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.OrderbookService/OpenOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServiceServer).OpenOrder(ctx, req.(*OpenOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderbookService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.OrderbookService",
	HandlerType: (*OrderbookServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "OpenOrder",
			Handler:    _OrderbookService_OpenOrder_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "grpc.proto",
}

// Client API for StatusService service

type StatusServiceClient interface {
	Status(ctx context.Context, in *StatusRequest, opts ...grpc1.CallOption) (*StatusResponse, error)
}

type statusServiceClient struct {
	cc *grpc1.ClientConn
}

func NewStatusServiceClient(cc *grpc1.ClientConn) StatusServiceClient {
	return &statusServiceClient{cc}
}

func (c *statusServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc1.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc1.Invoke(ctx, "/grpc.StatusService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for StatusService service

type StatusServiceServer interface {
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
}

func RegisterStatusServiceServer(s *grpc1.Server, srv StatusServiceServer) {
	s.RegisterService(&_StatusService_serviceDesc, srv)
}

func _StatusService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatusServiceServer).Status(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.StatusService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatusServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _StatusService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "grpc.StatusService",
	HandlerType: (*StatusServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _StatusService_Status_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 662 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5f, 0x4f, 0xdb, 0x3e,
	0x14, 0x25, 0xfd, 0xdf, 0xdb, 0xb4, 0x04, 0x17, 0xf1, 0xcb, 0xaf, 0xe2, 0xa1, 0x8a, 0xf6, 0x50,
	0x21, 0xc1, 0x58, 0x78, 0xe0, 0x65, 0xd2, 0x04, 0x0c, 0xb4, 0x49, 0x63, 0x2d, 0xe9, 0xc4, 0xbb,
	0x49, 0xac, 0x62, 0xd1, 0xc4, 0xc6, 0x71, 0x18, 0xfd, 0x00, 0xfb, 0xde, 0x53, 0x6c, 0x07, 0x12,
	0x56, 0x89, 0x69, 0xe2, 0xcd, 0xf7, 0xf4, 0x9e, 0x93, 0xe3, 0x7b, 0xaf, 0x6f, 0x01, 0x16, 0x82,
	0x87, 0x07, 0x5c, 0x30, 0xc9, 0x50, 0x23, 0x3f, 0x7b, 0x53, 0xe8, 0xcd, 0x68, 0xb2, 0x08, 0xc8,
	0x7d, 0x46, 0x52, 0x89, 0x76, 0xa1, 0x9b, 0xd2, 0x45, 0x82, 0x65, 0x26, 0x88, 0x6b, 0x8d, 0xad,
	0x89, 0x1d, 0x3c, 0x03, 0xc8, 0x03, 0x3b, 0xce, 0x96, 0x92, 0x9e, 0x44, 0x91, 0x20, 0x69, 0xea,
	0xd6, 0xc6, 0xd6, 0xa4, 0x1b, 0x54, 0x30, 0x6f, 0x06, 0xb6, 0x16, 0x4c, 0x39, 0x4b, 0x52, 0xf2,
	0x06, 0x8a, 0x17, 0x60, 0x5f, 0x65, 0x44, 0xac, 0xfe, 0xce, 0xa3, 0x0b, 0x6d, 0x5c, 0x11, 0x2b,
	0x42, 0xef, 0x0a, 0xfa, 0x46, 0xe7, 0xcd, 0xac, 0x2d, 0xa0, 0x3f, 0x97, 0x82, 0xe0, 0xf8, 0x92,
	0xa4, 0x29, 0x5e, 0x10, 0x74, 0x0a, 0x03, 0x9c, 0xc9, 0x5b, 0x92, 0x48, 0x1a, 0x62, 0x49, 0x59,
	0xa2, 0x74, 0x7b, 0xfe, 0xe8, 0x40, 0x55, 0x5e, 0x27, 0x9f, 0x54, 0x32, 0x82, 0x17, 0x0c, 0x84,
	0xa0, 0x11, 0x61, 0x89, 0xd5, 0x07, 0xed, 0x40, 0x9d, 0xbd, 0xef, 0xb0, 0xbd, 0x8e, 0xfb, 0xcf,
	0xb5, 0xb8, 0x06, 0x67, 0xca, 0x49, 0x32, 0x15, 0x11, 0x11, 0x45, 0x5d, 0x4f, 0xa1, 0xcf, 0xf2,
	0xf8, 0x42, 0xe0, 0x45, 0x4c, 0x12, 0x69, 0xac, 0xef, 0x6a, 0xeb, 0xe7, 0x49, 0x28, 0x56, 0x5c,
	0x92, 0x68, 0x5a, 0xce, 0x09, 0xaa, 0x14, 0x6f, 0x08, 0x5b, 0x25, 0x5d, 0x5d, 0x67, 0xef, 0x57,
	0x1d, 0x76, 0xd6, 0xd3, 0x73, 0x87, 0x4a, 0xe0, 0x6b, 0x64, 0xdc, 0x17, 0x21, 0xda, 0x87, 0xae,
	0x3a, 0xfe, 0x58, 0x71, 0xa2, 0xdc, 0x0f, 0xfc, 0x4d, 0xed, 0x64, 0x5a, 0xc0, 0xc1, 0x73, 0x06,
	0x3a, 0x82, 0x9e, 0x0a, 0x66, 0x58, 0x50, 0xb9, 0x72, 0xeb, 0x8a, 0xb0, 0x55, 0x22, 0xe8, 0x1f,
	0x82, 0x72, 0x16, 0x1a, 0x1b, 0xd2, 0xf9, 0x23, 0xa7, 0x62, 0xe5, 0x36, 0xc6, 0xd6, 0xa4, 0x1e,
	0x94, 0x21, 0x34, 0x80, 0x1a, 0x8d, 0xdc, 0xa6, 0xb2, 0x56, 0xa3, 0x11, 0xda, 0x81, 0x96, 0x64,
	0x77, 0x24, 0x49, 0xdd, 0x96, 0xc2, 0x4c, 0x84, 0xde, 0x43, 0x93, 0x0b, 0x1a, 0x12, 0xb7, 0xad,
	0x6a, 0xf6, 0xff, 0x8b, 0x9a, 0x9d, 0xb1, 0xf3, 0x47, 0x3e, 0xbf, 0xc5, 0x82, 0x04, 0x3a, 0x0f,
	0x7d, 0x80, 0xd6, 0x03, 0x5b, 0x66, 0x31, 0x71, 0x3b, 0xaf, 0x31, 0x4c, 0x22, 0xfa, 0x04, 0xfd,
	0x98, 0x26, 0x34, 0xce, 0xe2, 0x6b, 0xcd, 0xec, 0xbe, 0xc6, 0xac, 0xe6, 0x7b, 0xc7, 0x30, 0x5c,
	0x93, 0x95, 0xdf, 0x31, 0x64, 0xa6, 0xfc, 0xb5, 0x90, 0x21, 0x07, 0xea, 0xe4, 0x91, 0x9b, 0xf1,
	0xcb, 0x8f, 0xde, 0x66, 0x3e, 0xe6, 0x58, 0x66, 0xa9, 0x19, 0x15, 0x2f, 0x82, 0x41, 0x01, 0x98,
	0xb7, 0x54, 0x1a, 0x35, 0xab, 0x32, 0x6a, 0xf9, 0x3b, 0xba, 0x61, 0x4c, 0xa6, 0x52, 0x60, 0xce,
	0x49, 0xa4, 0x74, 0x3b, 0x41, 0x05, 0x43, 0xdb, 0xd0, 0xe4, 0x84, 0x88, 0x54, 0xf5, 0xad, 0x1e,
	0xe8, 0x60, 0xef, 0x1d, 0x74, 0x9f, 0x7a, 0x8d, 0x6c, 0xe8, 0x5c, 0xd2, 0x88, 0x33, 0x9a, 0x48,
	0x67, 0x03, 0x75, 0xa1, 0xf9, 0x8d, 0xc6, 0x54, 0x3a, 0xd6, 0xde, 0x18, 0x7a, 0xa5, 0x06, 0xa3,
	0x36, 0xd4, 0x4f, 0xb3, 0x95, 0xb3, 0x81, 0x3a, 0xd0, 0x98, 0x93, 0xe5, 0xd2, 0xb1, 0xfc, 0x7b,
	0xb0, 0xe7, 0x3f, 0xb1, 0x88, 0xe7, 0x44, 0x3c, 0xe4, 0xb5, 0xdf, 0x87, 0x46, 0xbe, 0xa2, 0x90,
	0x19, 0x8f, 0xd2, 0xfe, 0x1b, 0xa1, 0x32, 0x64, 0xae, 0xe6, 0x43, 0x53, 0xed, 0x0d, 0x64, 0x7e,
	0x2c, 0x2f, 0xa3, 0xd1, 0xb0, 0x82, 0x69, 0xc6, 0xa1, 0xe5, 0x7f, 0x29, 0x16, 0x43, 0xf1, 0xcd,
	0x63, 0x68, 0x9f, 0xb1, 0x24, 0x21, 0xa1, 0x44, 0xc3, 0xf2, 0x2e, 0x30, 0x8b, 0x63, 0xb4, 0x0e,
	0x9c, 0x58, 0x87, 0x96, 0x3f, 0x03, 0x47, 0x5d, 0xef, 0x86, 0xb1, 0xbb, 0x42, 0xec, 0x23, 0x74,
	0x9f, 0x5e, 0x19, 0xda, 0x31, 0x43, 0xfe, 0xe2, 0x39, 0x8f, 0xfe, 0xfb, 0x03, 0xd7, 0xee, 0xfc,
	0xcf, 0x45, 0x37, 0x0b, 0xb9, 0x23, 0x68, 0x69, 0xe0, 0xd9, 0x5a, 0xa9, 0xd9, 0xa3, 0xed, 0x2a,
	0xa8, 0x55, 0x6e, 0x5a, 0xea, 0x5f, 0xe4, 0xe8, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x45,
	0xf5, 0x50, 0x53, 0x06, 0x00, 0x00,
}
