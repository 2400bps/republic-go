// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc.proto

It has these top-level messages:
	Address
	MultiAddress
	MultiAddresses
	Nothing
	Query
	OrderFragment
	ResultFragment
	Result
	Shard
	Computation
	SyncRequest
	ElectRequest
	ComputeRequest
	Atom
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An Address message is the network representation of an identity.Address.
type Address struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// A MultiAddress is the network representation of an identity.MultiAddress.
type MultiAddress struct {
	Multi string `protobuf:"bytes,1,opt,name=multi" json:"multi,omitempty"`
}

func (m *MultiAddress) Reset()                    { *m = MultiAddress{} }
func (m *MultiAddress) String() string            { return proto.CompactTextString(m) }
func (*MultiAddress) ProtoMessage()               {}
func (*MultiAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MultiAddress) GetMulti() string {
	if m != nil {
		return m.Multi
	}
	return ""
}

// MultiAddresses are the network representation of identity.MultiAddresses.
type MultiAddresses struct {
	Multis []*MultiAddress `protobuf:"bytes,1,rep,name=multis" json:"multis,omitempty"`
}

func (m *MultiAddresses) Reset()                    { *m = MultiAddresses{} }
func (m *MultiAddresses) String() string            { return proto.CompactTextString(m) }
func (*MultiAddresses) ProtoMessage()               {}
func (*MultiAddresses) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *MultiAddresses) GetMultis() []*MultiAddress {
	if m != nil {
		return m.Multis
	}
	return nil
}

// Nothing is in this message. It is used to send nothing, or signal a
// successful response.
type Nothing struct {
}

func (m *Nothing) Reset()                    { *m = Nothing{} }
func (m *Nothing) String() string            { return proto.CompactTextString(m) }
func (*Nothing) ProtoMessage()               {}
func (*Nothing) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// A Query message contains the Address of a Node that needs to be found and
// the MultiAddress of the Node from which the Query originated.
type Query struct {
	// Network data.
	From *MultiAddress `protobuf:"bytes,1,opt,name=from" json:"from,omitempty"`
	// Public data.
	Query *Address `protobuf:"bytes,2,opt,name=query" json:"query,omitempty"`
}

func (m *Query) Reset()                    { *m = Query{} }
func (m *Query) String() string            { return proto.CompactTextString(m) }
func (*Query) ProtoMessage()               {}
func (*Query) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Query) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Query) GetQuery() *Address {
	if m != nil {
		return m.Query
	}
	return nil
}

// An OrderFragment is a message contains the details of an order fragment.
type OrderFragment struct {
	// Network data.
	To   *Address      `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	From *MultiAddress `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// Public data.
	Id          []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	OrderId     []byte `protobuf:"bytes,4,opt,name=orderId,proto3" json:"orderId,omitempty"`
	OrderType   int64  `protobuf:"varint,5,opt,name=orderType" json:"orderType,omitempty"`
	OrderParity int64  `protobuf:"varint,6,opt,name=orderParity" json:"orderParity,omitempty"`
	// Secure data.
	FstCodeShare   []byte `protobuf:"bytes,7,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare   []byte `protobuf:"bytes,8,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare     []byte `protobuf:"bytes,9,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare []byte `protobuf:"bytes,10,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare []byte `protobuf:"bytes,11,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *OrderFragment) Reset()                    { *m = OrderFragment{} }
func (m *OrderFragment) String() string            { return proto.CompactTextString(m) }
func (*OrderFragment) ProtoMessage()               {}
func (*OrderFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *OrderFragment) GetTo() *Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *OrderFragment) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *OrderFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *OrderFragment) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderFragment) GetOrderType() int64 {
	if m != nil {
		return m.OrderType
	}
	return 0
}

func (m *OrderFragment) GetOrderParity() int64 {
	if m != nil {
		return m.OrderParity
	}
	return 0
}

func (m *OrderFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *OrderFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *OrderFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *OrderFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *OrderFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

// A ResultFragment message is the network representation of a
// compute.ResultFragment and the metadata needed to distribute it through the
// network.
type ResultFragment struct {
	// Network data.
	To   *Address      `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	From *MultiAddress `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// Public data.
	Id                  []byte `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	BuyOrderId          []byte `protobuf:"bytes,4,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId         []byte `protobuf:"bytes,5,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	BuyOrderFragmentId  []byte `protobuf:"bytes,6,opt,name=buyOrderFragmentId,proto3" json:"buyOrderFragmentId,omitempty"`
	SellOrderFragmentId []byte `protobuf:"bytes,7,opt,name=sellOrderFragmentId,proto3" json:"sellOrderFragmentId,omitempty"`
	// Secure data.
	FstCodeShare   []byte `protobuf:"bytes,8,opt,name=fstCodeShare,proto3" json:"fstCodeShare,omitempty"`
	SndCodeShare   []byte `protobuf:"bytes,9,opt,name=sndCodeShare,proto3" json:"sndCodeShare,omitempty"`
	PriceShare     []byte `protobuf:"bytes,10,opt,name=priceShare,proto3" json:"priceShare,omitempty"`
	MaxVolumeShare []byte `protobuf:"bytes,11,opt,name=maxVolumeShare,proto3" json:"maxVolumeShare,omitempty"`
	MinVolumeShare []byte `protobuf:"bytes,12,opt,name=minVolumeShare,proto3" json:"minVolumeShare,omitempty"`
}

func (m *ResultFragment) Reset()                    { *m = ResultFragment{} }
func (m *ResultFragment) String() string            { return proto.CompactTextString(m) }
func (*ResultFragment) ProtoMessage()               {}
func (*ResultFragment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ResultFragment) GetTo() *Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *ResultFragment) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *ResultFragment) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ResultFragment) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *ResultFragment) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *ResultFragment) GetBuyOrderFragmentId() []byte {
	if m != nil {
		return m.BuyOrderFragmentId
	}
	return nil
}

func (m *ResultFragment) GetSellOrderFragmentId() []byte {
	if m != nil {
		return m.SellOrderFragmentId
	}
	return nil
}

func (m *ResultFragment) GetFstCodeShare() []byte {
	if m != nil {
		return m.FstCodeShare
	}
	return nil
}

func (m *ResultFragment) GetSndCodeShare() []byte {
	if m != nil {
		return m.SndCodeShare
	}
	return nil
}

func (m *ResultFragment) GetPriceShare() []byte {
	if m != nil {
		return m.PriceShare
	}
	return nil
}

func (m *ResultFragment) GetMaxVolumeShare() []byte {
	if m != nil {
		return m.MaxVolumeShare
	}
	return nil
}

func (m *ResultFragment) GetMinVolumeShare() []byte {
	if m != nil {
		return m.MinVolumeShare
	}
	return nil
}

// Result messages are sent to signal that a successful order computation has
// happened.
type Result struct {
	// Public data.
	Id          []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	BuyOrderId  []byte `protobuf:"bytes,2,opt,name=buyOrderId,proto3" json:"buyOrderId,omitempty"`
	SellOrderId []byte `protobuf:"bytes,3,opt,name=sellOrderId,proto3" json:"sellOrderId,omitempty"`
	// Secure data.
	FstCode   []byte `protobuf:"bytes,4,opt,name=fstCode,proto3" json:"fstCode,omitempty"`
	SndCode   []byte `protobuf:"bytes,5,opt,name=sndCode,proto3" json:"sndCode,omitempty"`
	Price     []byte `protobuf:"bytes,6,opt,name=price,proto3" json:"price,omitempty"`
	MaxVolume []byte `protobuf:"bytes,7,opt,name=maxVolume,proto3" json:"maxVolume,omitempty"`
	MinVolume []byte `protobuf:"bytes,8,opt,name=minVolume,proto3" json:"minVolume,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Result) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Result) GetBuyOrderId() []byte {
	if m != nil {
		return m.BuyOrderId
	}
	return nil
}

func (m *Result) GetSellOrderId() []byte {
	if m != nil {
		return m.SellOrderId
	}
	return nil
}

func (m *Result) GetFstCode() []byte {
	if m != nil {
		return m.FstCode
	}
	return nil
}

func (m *Result) GetSndCode() []byte {
	if m != nil {
		return m.SndCode
	}
	return nil
}

func (m *Result) GetPrice() []byte {
	if m != nil {
		return m.Price
	}
	return nil
}

func (m *Result) GetMaxVolume() []byte {
	if m != nil {
		return m.MaxVolume
	}
	return nil
}

func (m *Result) GetMinVolume() []byte {
	if m != nil {
		return m.MinVolume
	}
	return nil
}

// A shard is a block of computations
type Shard struct {
	Signature    []byte         `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	Computations []*Computation `protobuf:"bytes,2,rep,name=computations" json:"computations,omitempty"`
}

func (m *Shard) Reset()                    { *m = Shard{} }
func (m *Shard) String() string            { return proto.CompactTextString(m) }
func (*Shard) ProtoMessage()               {}
func (*Shard) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Shard) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *Shard) GetComputations() []*Computation {
	if m != nil {
		return m.Computations
	}
	return nil
}

// An computation is the network representation of a compute.Computation
// and the status of the computaion result.
type Computation struct {
	Lhs    []byte `protobuf:"bytes,2,opt,name=lhs,proto3" json:"lhs,omitempty"`
	Rhs    []byte `protobuf:"bytes,3,opt,name=rhs,proto3" json:"rhs,omitempty"`
	Leader []byte `protobuf:"bytes,5,opt,name=leader,proto3" json:"leader,omitempty"`
	Status []byte `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Computation) Reset()                    { *m = Computation{} }
func (m *Computation) String() string            { return proto.CompactTextString(m) }
func (*Computation) ProtoMessage()               {}
func (*Computation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Computation) GetLhs() []byte {
	if m != nil {
		return m.Lhs
	}
	return nil
}

func (m *Computation) GetRhs() []byte {
	if m != nil {
		return m.Rhs
	}
	return nil
}

func (m *Computation) GetLeader() []byte {
	if m != nil {
		return m.Leader
	}
	return nil
}

func (m *Computation) GetStatus() []byte {
	if m != nil {
		return m.Status
	}
	return nil
}

// todo
type SyncRequest struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *SyncRequest) Reset()                    { *m = SyncRequest{} }
func (m *SyncRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncRequest) ProtoMessage()               {}
func (*SyncRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SyncRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// todo
type ElectRequest struct {
	Shard *Shard `protobuf:"bytes,1,opt,name=shard" json:"shard,omitempty"`
	Id    []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ElectRequest) Reset()                    { *m = ElectRequest{} }
func (m *ElectRequest) String() string            { return proto.CompactTextString(m) }
func (*ElectRequest) ProtoMessage()               {}
func (*ElectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ElectRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *ElectRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// todo
type ComputeRequest struct {
	Shard *Shard `protobuf:"bytes,1,opt,name=shard" json:"shard,omitempty"`
	Id    []byte `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ComputeRequest) Reset()                    { *m = ComputeRequest{} }
func (m *ComputeRequest) String() string            { return proto.CompactTextString(m) }
func (*ComputeRequest) ProtoMessage()               {}
func (*ComputeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *ComputeRequest) GetShard() *Shard {
	if m != nil {
		return m.Shard
	}
	return nil
}

func (m *ComputeRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

// An Atom message is the network representation of a atom.Atom and the
// metadata needed to distribute it through the network.
type Atom struct {
	// Network data.
	To   *Address      `protobuf:"bytes,1,opt,name=to" json:"to,omitempty"`
	From *MultiAddress `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	// Secure data.
	Ledger    int64  `protobuf:"varint,3,opt,name=ledger" json:"ledger,omitempty"`
	Data      []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Signature []byte `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Atom) Reset()                    { *m = Atom{} }
func (m *Atom) String() string            { return proto.CompactTextString(m) }
func (*Atom) ProtoMessage()               {}
func (*Atom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Atom) GetTo() *Address {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *Atom) GetFrom() *MultiAddress {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Atom) GetLedger() int64 {
	if m != nil {
		return m.Ledger
	}
	return 0
}

func (m *Atom) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Atom) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*Address)(nil), "rpc.Address")
	proto.RegisterType((*MultiAddress)(nil), "rpc.MultiAddress")
	proto.RegisterType((*MultiAddresses)(nil), "rpc.MultiAddresses")
	proto.RegisterType((*Nothing)(nil), "rpc.Nothing")
	proto.RegisterType((*Query)(nil), "rpc.Query")
	proto.RegisterType((*OrderFragment)(nil), "rpc.OrderFragment")
	proto.RegisterType((*ResultFragment)(nil), "rpc.ResultFragment")
	proto.RegisterType((*Result)(nil), "rpc.Result")
	proto.RegisterType((*Shard)(nil), "rpc.Shard")
	proto.RegisterType((*Computation)(nil), "rpc.Computation")
	proto.RegisterType((*SyncRequest)(nil), "rpc.SyncRequest")
	proto.RegisterType((*ElectRequest)(nil), "rpc.ElectRequest")
	proto.RegisterType((*ComputeRequest)(nil), "rpc.ComputeRequest")
	proto.RegisterType((*Atom)(nil), "rpc.Atom")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SwarmNode service

type SwarmNodeClient interface {
	// Ping the connection and swap MultiAddresses.
	Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*Nothing, error)
	// Find the MultiAddresses of peers closer to some target Node.
	QueryCloserPeers(ctx context.Context, in *Query, opts ...grpc.CallOption) (*MultiAddresses, error)
	// Find the MultiAddresses of peers closer to some target Node using a
	// frontier search.
	QueryCloserPeersOnFrontier(ctx context.Context, in *Query, opts ...grpc.CallOption) (SwarmNode_QueryCloserPeersOnFrontierClient, error)
}

type swarmNodeClient struct {
	cc *grpc.ClientConn
}

func NewSwarmNodeClient(cc *grpc.ClientConn) SwarmNodeClient {
	return &swarmNodeClient{cc}
}

func (c *swarmNodeClient) Ping(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.SwarmNode/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmNodeClient) QueryCloserPeers(ctx context.Context, in *Query, opts ...grpc.CallOption) (*MultiAddresses, error) {
	out := new(MultiAddresses)
	err := grpc.Invoke(ctx, "/rpc.SwarmNode/QueryCloserPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swarmNodeClient) QueryCloserPeersOnFrontier(ctx context.Context, in *Query, opts ...grpc.CallOption) (SwarmNode_QueryCloserPeersOnFrontierClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SwarmNode_serviceDesc.Streams[0], c.cc, "/rpc.SwarmNode/QueryCloserPeersOnFrontier", opts...)
	if err != nil {
		return nil, err
	}
	x := &swarmNodeQueryCloserPeersOnFrontierClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SwarmNode_QueryCloserPeersOnFrontierClient interface {
	Recv() (*MultiAddress, error)
	grpc.ClientStream
}

type swarmNodeQueryCloserPeersOnFrontierClient struct {
	grpc.ClientStream
}

func (x *swarmNodeQueryCloserPeersOnFrontierClient) Recv() (*MultiAddress, error) {
	m := new(MultiAddress)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SwarmNode service

type SwarmNodeServer interface {
	// Ping the connection and swap MultiAddresses.
	Ping(context.Context, *MultiAddress) (*Nothing, error)
	// Find the MultiAddresses of peers closer to some target Node.
	QueryCloserPeers(context.Context, *Query) (*MultiAddresses, error)
	// Find the MultiAddresses of peers closer to some target Node using a
	// frontier search.
	QueryCloserPeersOnFrontier(*Query, SwarmNode_QueryCloserPeersOnFrontierServer) error
}

func RegisterSwarmNodeServer(s *grpc.Server, srv SwarmNodeServer) {
	s.RegisterService(&_SwarmNode_serviceDesc, srv)
}

func _SwarmNode_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiAddress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmNodeServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SwarmNode/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmNodeServer).Ping(ctx, req.(*MultiAddress))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwarmNode_QueryCloserPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Query)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwarmNodeServer).QueryCloserPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.SwarmNode/QueryCloserPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwarmNodeServer).QueryCloserPeers(ctx, req.(*Query))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwarmNode_QueryCloserPeersOnFrontier_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Query)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SwarmNodeServer).QueryCloserPeersOnFrontier(m, &swarmNodeQueryCloserPeersOnFrontierServer{stream})
}

type SwarmNode_QueryCloserPeersOnFrontierServer interface {
	Send(*MultiAddress) error
	grpc.ServerStream
}

type swarmNodeQueryCloserPeersOnFrontierServer struct {
	grpc.ServerStream
}

func (x *swarmNodeQueryCloserPeersOnFrontierServer) Send(m *MultiAddress) error {
	return x.ServerStream.SendMsg(m)
}

var _SwarmNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.SwarmNode",
	HandlerType: (*SwarmNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _SwarmNode_Ping_Handler,
		},
		{
			MethodName: "QueryCloserPeers",
			Handler:    _SwarmNode_QueryCloserPeers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryCloserPeersOnFrontier",
			Handler:       _SwarmNode_QueryCloserPeersOnFrontier_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for DarkNode service

type DarkNodeClient interface {
	// Send an OrderFragment to some target Node.
	SendOrderFragment(ctx context.Context, in *OrderFragment, opts ...grpc.CallOption) (*Nothing, error)
	// Send a ResultFragment to some target Node, where the ResultFragment is the
	// result of a computation on two OrderFragments.
	SendResultFragment(ctx context.Context, in *ResultFragment, opts ...grpc.CallOption) (*Nothing, error)
	// Get Result messages for successful order matches that have happened since
	// this procedure was last used, as well as new ones that occur.
	Notifications(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (DarkNode_NotificationsClient, error)
	// Get all relevant results that have been computed in the current epoch.
	GetResults(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (DarkNode_GetResultsClient, error)
	// Send a sync request for getting new shard
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (DarkNode_SyncClient, error)
	// Propose a shard election request to some target node.
	ElectShard(ctx context.Context, in *ElectRequest, opts ...grpc.CallOption) (*Shard, error)
	// Ask some target node to start computation on the shard.
	ComputeShard(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*Nothing, error)
}

type darkNodeClient struct {
	cc *grpc.ClientConn
}

func NewDarkNodeClient(cc *grpc.ClientConn) DarkNodeClient {
	return &darkNodeClient{cc}
}

func (c *darkNodeClient) SendOrderFragment(ctx context.Context, in *OrderFragment, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DarkNode/SendOrderFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkNodeClient) SendResultFragment(ctx context.Context, in *ResultFragment, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DarkNode/SendResultFragment", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkNodeClient) Notifications(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (DarkNode_NotificationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DarkNode_serviceDesc.Streams[0], c.cc, "/rpc.DarkNode/Notifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &darkNodeNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarkNode_NotificationsClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type darkNodeNotificationsClient struct {
	grpc.ClientStream
}

func (x *darkNodeNotificationsClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darkNodeClient) GetResults(ctx context.Context, in *MultiAddress, opts ...grpc.CallOption) (DarkNode_GetResultsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DarkNode_serviceDesc.Streams[1], c.cc, "/rpc.DarkNode/GetResults", opts...)
	if err != nil {
		return nil, err
	}
	x := &darkNodeGetResultsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarkNode_GetResultsClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type darkNodeGetResultsClient struct {
	grpc.ClientStream
}

func (x *darkNodeGetResultsClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darkNodeClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (DarkNode_SyncClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DarkNode_serviceDesc.Streams[2], c.cc, "/rpc.DarkNode/Sync", opts...)
	if err != nil {
		return nil, err
	}
	x := &darkNodeSyncClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DarkNode_SyncClient interface {
	Recv() (*Shard, error)
	grpc.ClientStream
}

type darkNodeSyncClient struct {
	grpc.ClientStream
}

func (x *darkNodeSyncClient) Recv() (*Shard, error) {
	m := new(Shard)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *darkNodeClient) ElectShard(ctx context.Context, in *ElectRequest, opts ...grpc.CallOption) (*Shard, error) {
	out := new(Shard)
	err := grpc.Invoke(ctx, "/rpc.DarkNode/ElectShard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *darkNodeClient) ComputeShard(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := grpc.Invoke(ctx, "/rpc.DarkNode/ComputeShard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DarkNode service

type DarkNodeServer interface {
	// Send an OrderFragment to some target Node.
	SendOrderFragment(context.Context, *OrderFragment) (*Nothing, error)
	// Send a ResultFragment to some target Node, where the ResultFragment is the
	// result of a computation on two OrderFragments.
	SendResultFragment(context.Context, *ResultFragment) (*Nothing, error)
	// Get Result messages for successful order matches that have happened since
	// this procedure was last used, as well as new ones that occur.
	Notifications(*MultiAddress, DarkNode_NotificationsServer) error
	// Get all relevant results that have been computed in the current epoch.
	GetResults(*MultiAddress, DarkNode_GetResultsServer) error
	// Send a sync request for getting new shard
	Sync(*SyncRequest, DarkNode_SyncServer) error
	// Propose a shard election request to some target node.
	ElectShard(context.Context, *ElectRequest) (*Shard, error)
	// Ask some target node to start computation on the shard.
	ComputeShard(context.Context, *ComputeRequest) (*Nothing, error)
}

func RegisterDarkNodeServer(s *grpc.Server, srv DarkNodeServer) {
	s.RegisterService(&_DarkNode_serviceDesc, srv)
}

func _DarkNode_SendOrderFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderFragment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkNodeServer).SendOrderFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkNode/SendOrderFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkNodeServer).SendOrderFragment(ctx, req.(*OrderFragment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkNode_SendResultFragment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResultFragment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkNodeServer).SendResultFragment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkNode/SendResultFragment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkNodeServer).SendResultFragment(ctx, req.(*ResultFragment))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkNode_Notifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiAddress)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarkNodeServer).Notifications(m, &darkNodeNotificationsServer{stream})
}

type DarkNode_NotificationsServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type darkNodeNotificationsServer struct {
	grpc.ServerStream
}

func (x *darkNodeNotificationsServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _DarkNode_GetResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiAddress)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarkNodeServer).GetResults(m, &darkNodeGetResultsServer{stream})
}

type DarkNode_GetResultsServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type darkNodeGetResultsServer struct {
	grpc.ServerStream
}

func (x *darkNodeGetResultsServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _DarkNode_Sync_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SyncRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DarkNodeServer).Sync(m, &darkNodeSyncServer{stream})
}

type DarkNode_SyncServer interface {
	Send(*Shard) error
	grpc.ServerStream
}

type darkNodeSyncServer struct {
	grpc.ServerStream
}

func (x *darkNodeSyncServer) Send(m *Shard) error {
	return x.ServerStream.SendMsg(m)
}

func _DarkNode_ElectShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkNodeServer).ElectShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkNode/ElectShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkNodeServer).ElectShard(ctx, req.(*ElectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DarkNode_ComputeShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DarkNodeServer).ComputeShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.DarkNode/ComputeShard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DarkNodeServer).ComputeShard(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DarkNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.DarkNode",
	HandlerType: (*DarkNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrderFragment",
			Handler:    _DarkNode_SendOrderFragment_Handler,
		},
		{
			MethodName: "SendResultFragment",
			Handler:    _DarkNode_SendResultFragment_Handler,
		},
		{
			MethodName: "ElectShard",
			Handler:    _DarkNode_ElectShard_Handler,
		},
		{
			MethodName: "ComputeShard",
			Handler:    _DarkNode_ComputeShard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notifications",
			Handler:       _DarkNode_Notifications_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetResults",
			Handler:       _DarkNode_GetResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Sync",
			Handler:       _DarkNode_Sync_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc.proto",
}

// Client API for TerminalNode service

type TerminalNodeClient interface {
	// Send an Atom to some target Node.
	SendAtom(ctx context.Context, in *Atom, opts ...grpc.CallOption) (*Atom, error)
}

type terminalNodeClient struct {
	cc *grpc.ClientConn
}

func NewTerminalNodeClient(cc *grpc.ClientConn) TerminalNodeClient {
	return &terminalNodeClient{cc}
}

func (c *terminalNodeClient) SendAtom(ctx context.Context, in *Atom, opts ...grpc.CallOption) (*Atom, error) {
	out := new(Atom)
	err := grpc.Invoke(ctx, "/rpc.TerminalNode/SendAtom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TerminalNode service

type TerminalNodeServer interface {
	// Send an Atom to some target Node.
	SendAtom(context.Context, *Atom) (*Atom, error)
}

func RegisterTerminalNodeServer(s *grpc.Server, srv TerminalNodeServer) {
	s.RegisterService(&_TerminalNode_serviceDesc, srv)
}

func _TerminalNode_SendAtom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Atom)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TerminalNodeServer).SendAtom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TerminalNode/SendAtom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TerminalNodeServer).SendAtom(ctx, req.(*Atom))
	}
	return interceptor(ctx, in, info, handler)
}

var _TerminalNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TerminalNode",
	HandlerType: (*TerminalNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendAtom",
			Handler:    _TerminalNode_SendAtom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

func init() { proto.RegisterFile("rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 847 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x51, 0x8f, 0xe3, 0x34,
	0x10, 0x56, 0x92, 0xa6, 0x6d, 0xa6, 0xb9, 0x6a, 0xcf, 0x8b, 0x50, 0x54, 0x1d, 0xa7, 0x2a, 0xc0,
	0x51, 0x84, 0x54, 0xf5, 0x7a, 0x20, 0x1e, 0x10, 0x12, 0xc7, 0xc2, 0xa1, 0x7b, 0x60, 0x77, 0x49,
	0x4f, 0xbc, 0xf0, 0x94, 0x6b, 0xbc, 0x6d, 0x44, 0x12, 0xf7, 0x6c, 0x47, 0xd0, 0x1f, 0xc2, 0x7f,
	0xe0, 0x6f, 0xf0, 0x4f, 0x78, 0xe1, 0x2f, 0xf0, 0x8c, 0x3c, 0x76, 0x5a, 0xa7, 0x2d, 0x6c, 0x85,
	0xe0, 0xcd, 0xf3, 0xcd, 0x37, 0x63, 0xcf, 0x37, 0x63, 0x27, 0x10, 0xf0, 0xcd, 0x72, 0xba, 0xe1,
	0x4c, 0x32, 0xe2, 0xf1, 0xcd, 0x32, 0x7e, 0x17, 0x7a, 0xcf, 0xb3, 0x8c, 0x53, 0x21, 0x48, 0x04,
	0xbd, 0x54, 0x2f, 0x23, 0x67, 0xec, 0x4c, 0x82, 0xa4, 0x31, 0xe3, 0xf7, 0x20, 0xfc, 0xb6, 0x2e,
	0x64, 0xde, 0x30, 0xdf, 0x02, 0xbf, 0x54, 0xb6, 0xe1, 0x69, 0x23, 0xfe, 0x0c, 0x86, 0x36, 0x8b,
	0x0a, 0xf2, 0x21, 0x74, 0xd1, 0xa5, 0x12, 0x7a, 0x93, 0xc1, 0xfc, 0xe1, 0x54, 0xed, 0x6e, 0x93,
	0x12, 0x43, 0x88, 0x03, 0xe8, 0x5d, 0x33, 0xb9, 0xce, 0xab, 0x55, 0x9c, 0x80, 0xff, 0x5d, 0x4d,
	0xf9, 0x96, 0xbc, 0x0f, 0x9d, 0x3b, 0xce, 0x4a, 0xdc, 0xe5, 0x64, 0x30, 0xba, 0x49, 0x0c, 0xfe,
	0x1b, 0xc5, 0x8f, 0x5c, 0xe4, 0x85, 0xc8, 0x6b, 0x28, 0xda, 0x15, 0xff, 0xe9, 0xc2, 0x83, 0x1b,
	0x9e, 0x51, 0xfe, 0x82, 0xa7, 0xab, 0x92, 0x56, 0x92, 0x3c, 0x02, 0x57, 0x32, 0x93, 0xba, 0x1d,
	0xe2, 0x4a, 0xb6, 0xdb, 0xda, 0xfd, 0xe7, 0xad, 0x87, 0xe0, 0xe6, 0x59, 0xe4, 0x8d, 0x9d, 0x49,
	0x98, 0xb8, 0x79, 0xa6, 0x24, 0x64, 0x6a, 0x97, 0x97, 0x59, 0xd4, 0x41, 0xb0, 0x31, 0xc9, 0x23,
	0x08, 0x70, 0xf9, 0x6a, 0xbb, 0xa1, 0x91, 0x3f, 0x76, 0x26, 0x5e, 0xb2, 0x07, 0xc8, 0x18, 0x06,
	0x68, 0xdc, 0xa6, 0x3c, 0x97, 0xdb, 0xa8, 0x8b, 0x7e, 0x1b, 0x22, 0x31, 0x84, 0x77, 0x42, 0x5e,
	0xb1, 0x8c, 0x2e, 0xd6, 0x29, 0xa7, 0x51, 0x0f, 0xd3, 0xb7, 0x30, 0xc5, 0x11, 0x55, 0xb6, 0xe7,
	0xf4, 0x35, 0xc7, 0xc6, 0xc8, 0x63, 0x80, 0x0d, 0xcf, 0x97, 0x86, 0x11, 0x20, 0xc3, 0x42, 0xc8,
	0x13, 0x18, 0x96, 0xe9, 0xcf, 0xdf, 0xb3, 0xa2, 0x2e, 0x0d, 0x07, 0x90, 0x73, 0x80, 0x22, 0x2f,
	0xaf, 0x6c, 0xde, 0xc0, 0xf0, 0x5a, 0x68, 0xfc, 0x9b, 0x07, 0xc3, 0x84, 0x8a, 0xba, 0x90, 0xff,
	0xaf, 0xf2, 0x8f, 0x01, 0x5e, 0xd7, 0xdb, 0x9b, 0x96, 0xf8, 0x16, 0xa2, 0x14, 0x16, 0xb4, 0x28,
	0x1a, 0x82, 0x8f, 0x04, 0x1b, 0x22, 0x53, 0x20, 0x0d, 0xbf, 0x39, 0xea, 0xcb, 0x0c, 0x5b, 0x11,
	0x26, 0x27, 0x3c, 0x64, 0x06, 0x97, 0xbb, 0x70, 0x2b, 0x40, 0x37, 0xe6, 0x94, 0xeb, 0xa8, 0x87,
	0xfd, 0x33, 0x7a, 0x18, 0xdc, 0xdb, 0x43, 0x38, 0xa3, 0x87, 0x83, 0x33, 0x7b, 0x18, 0x9e, 0xec,
	0xe1, 0xef, 0x0e, 0x74, 0x75, 0x0f, 0x8d, 0xec, 0xce, 0xdf, 0xc8, 0xee, 0xde, 0x27, 0xbb, 0x77,
	0x2c, 0x7b, 0x04, 0x3d, 0x23, 0x40, 0x73, 0x65, 0x8c, 0xa9, 0x3c, 0xa6, 0x6c, 0xd3, 0xae, 0xc6,
	0x54, 0xef, 0x0f, 0x96, 0x6b, 0xba, 0xa3, 0x0d, 0x75, 0xc5, 0x76, 0x05, 0x9a, 0x36, 0xec, 0x01,
	0xf4, 0x36, 0x65, 0x19, 0xe5, 0xf7, 0x40, 0xfc, 0x03, 0xf8, 0xaa, 0x56, 0xbc, 0xa7, 0x22, 0x5f,
	0x55, 0xa9, 0xac, 0x39, 0x35, 0x75, 0xee, 0x01, 0xf2, 0x31, 0x84, 0x4b, 0x56, 0x6e, 0x6a, 0x99,
	0xca, 0x9c, 0x55, 0x22, 0x72, 0xf1, 0x59, 0xbb, 0xc0, 0x21, 0xbd, 0xda, 0x3b, 0x92, 0x16, 0x2b,
	0x4e, 0x61, 0x60, 0x39, 0xc9, 0x05, 0x78, 0xc5, 0x5a, 0x18, 0xb1, 0xd4, 0x52, 0x21, 0x7c, 0x2d,
	0x8c, 0x3a, 0x6a, 0x49, 0xde, 0x86, 0x6e, 0x41, 0xd3, 0x8c, 0x72, 0x53, 0xba, 0xb1, 0x14, 0x2e,
	0x64, 0x2a, 0x6b, 0x61, 0xc4, 0x32, 0x56, 0xfc, 0x0e, 0x0c, 0x16, 0xdb, 0x6a, 0x99, 0xd0, 0x37,
	0x35, 0x15, 0x47, 0x6d, 0x8a, 0xbf, 0x80, 0xf0, 0xeb, 0x82, 0x2e, 0x65, 0xe3, 0x1f, 0x83, 0x2f,
	0x54, 0xb9, 0xe6, 0x16, 0x02, 0x16, 0x80, 0x02, 0x24, 0xda, 0x61, 0x32, 0xb8, 0xbb, 0x0c, 0x5f,
	0xc2, 0x50, 0xd7, 0x40, 0xff, 0x7d, 0x8e, 0x5f, 0x1c, 0xe8, 0x3c, 0x97, 0xac, 0xfc, 0x6f, 0x5e,
	0x00, 0x94, 0x28, 0x5b, 0x51, 0x8e, 0xba, 0x79, 0x89, 0xb1, 0x08, 0x81, 0x4e, 0x96, 0xca, 0xd4,
	0x08, 0x84, 0xeb, 0x76, 0x57, 0xfd, 0x83, 0xae, 0xce, 0x7f, 0x75, 0x20, 0x58, 0xfc, 0x94, 0xf2,
	0xf2, 0x5a, 0x0d, 0xd7, 0x07, 0xd0, 0xb9, 0xcd, 0xab, 0x15, 0x39, 0xde, 0x78, 0xa4, 0xcf, 0x6a,
	0xbe, 0x53, 0xe4, 0x19, 0x5c, 0xe0, 0x77, 0xea, 0xaa, 0x60, 0x82, 0xf2, 0x5b, 0x4a, 0xb9, 0x20,
	0x5a, 0x05, 0x84, 0x47, 0x97, 0x47, 0x09, 0xa8, 0x20, 0x9f, 0xc3, 0xe8, 0x30, 0xe8, 0xa6, 0x7a,
	0xc1, 0x59, 0x25, 0x73, 0xca, 0x5b, 0xe1, 0xc7, 0xfb, 0xcf, 0x9c, 0xf9, 0x1f, 0x2e, 0xf4, 0xbf,
	0x4a, 0xf9, 0x8f, 0x78, 0xd2, 0x4f, 0xe0, 0xe1, 0x82, 0x56, 0x59, 0xfb, 0xbb, 0x46, 0x30, 0xac,
	0x85, 0x1d, 0x9c, 0xfb, 0x53, 0x20, 0x2a, 0xec, 0xe0, 0x55, 0xd6, 0xa7, 0x6d, 0x83, 0x07, 0x81,
	0x4f, 0xe1, 0xc1, 0x35, 0x93, 0xf9, 0x5d, 0xbe, 0xd4, 0x83, 0x7d, 0x4a, 0xa2, 0x81, 0x95, 0x66,
	0xe6, 0x90, 0x29, 0xc0, 0x37, 0x54, 0x6a, 0xf3, 0x1c, 0xfe, 0x13, 0xe8, 0xa8, 0x39, 0x26, 0xfa,
	0x4a, 0x59, 0x23, 0x3d, 0xb2, 0xe6, 0x6b, 0xe6, 0x90, 0x8f, 0x00, 0x70, 0xa0, 0xf5, 0xa5, 0xd5,
	0x79, 0xed, 0x09, 0xb7, 0xe9, 0xe4, 0x29, 0x84, 0x66, 0x76, 0xb5, 0x7d, 0x69, 0xdd, 0xd7, 0x66,
	0x9c, 0xdb, 0xa5, 0xce, 0x67, 0x10, 0xbe, 0xa2, 0xbc, 0xcc, 0xab, 0xb4, 0x40, 0xa9, 0xc7, 0xd0,
	0x57, 0x9a, 0xe1, 0xf4, 0x06, 0x7a, 0x62, 0x25, 0x2b, 0x47, 0xfb, 0xe5, 0xeb, 0x2e, 0xfe, 0x54,
	0x3d, 0xfb, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x76, 0x68, 0xd2, 0x39, 0x61, 0x09, 0x00, 0x00,
}
