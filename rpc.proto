syntax = "proto3";

package rpc;

/**
 * Common definitions.
 */

// An Address message is the network representation of an identity.Address.
message Address {
  string address = 1;
}

// A MultiAddress is the network representation of an identity.MultiAddress.
message MultiAddress {
  string multi = 1;
}

// MultiAddresses are the network representation of identity.MultiAddresses.
message MultiAddresses {
  repeated MultiAddress multis = 1;
}

// Nothing is in this message. It is used to send nothing, or signal a
// successful response.
message Nothing {}

/**
 * Swarm defintions.
 */

// SwarmNode services implement peer discovery in the decentralized Swarm
// network.
service SwarmNode {
  
  // Ping the connection and swap MultiAddresses.
  rpc Ping (MultiAddress) returns (Nothing);

  // Find the MultiAddresses of peers closer to some target Node.
  rpc QueryCloserPeers (Query) returns (MultiAddresses);

  // Find the MultiAddresses of peers closer to some target Node using a
  // frontier search.
  rpc QueryCloserPeersOnFrontier (Query) returns (stream MultiAddress);
}

// A Query message contains the Address of a Node that needs to be found and
// the MultiAddress of the Node from which the Query originated.
message Query {
  // Network data.
  MultiAddress from = 1;

  // Public data.
  Address query = 2;
}

/**
 * Dark node definitions.
 */

// DarkNode services implement the distribution of OrderFragments and
// ResultFragments in the Dark network.
service DarkNode {

  // Send a sync request for getting new shard
  rpc Sync (SyncRequest) returns (stream SyncBlock);

  // Send a commitment to the order fragment.
  rpc SendOrderFragmentCommitment (OrderFragmentCommitment) returns (OrderFragmentCommitment);

  // Send an OrderFragment to some target Node.
  rpc SendOrderFragment (OrderFragment) returns (Nothing);

  // Send a ResultFragment to some target Node, where the ResultFragment is the
  // result of a computation on two OrderFragments.
  rpc SendResultFragment (ResultFragment) returns (Nothing);
  
  // Propose a shard election request to some target node.
  rpc ElectShard (ElectShardRequest) returns (Shard);
  
  // Ask some target node to start computation on the shard.
  rpc ComputeShard (ComputeShardRequest) returns (Nothing);

  //
  rpc FinalizeShard (FinalizeShardRequest) returns (Nothing);

  // Get Result messages for successful order matches that have happened since
  // this procedure was last used, as well as new ones that occur.
  rpc Notifications (MultiAddress) returns (stream Result);

  // Get all relevant results that have been computed in the current epoch.
  rpc GetResults (MultiAddress) returns (stream Result);
}

// An OrderFragment is a message contains the details of an order fragment.
message OrderFragment {
  // Network data.
  Address to = 1;
  MultiAddress from = 2;

  // Public data.
  bytes id = 3;
  bytes orderId = 4;
  int64 orderType = 5;
  int64 orderParity = 6;

  // Secure data.
  bytes fstCodeShare = 7;
  bytes sndCodeShare = 8;
  bytes priceShare = 9;
  bytes maxVolumeShare = 10;
  bytes minVolumeShare = 11;
}

// An OrderFragmentCommitment is ...
message OrderFragmentCommitment{
  MultiAddress from = 1;
  bytes signature = 2;
  bytes orderFragment = 3;
}

// A SyncBlock is ...
message SyncBlock {
  bytes signature = 1;
  DeltaBlock deltas = 2;
  ResidueBlock residues = 3;

  message DeltaBlock {
    repeated bytes pending = 1;
    repeated bytes electing = 2;
    repeated bytes computing = 3;
    repeated bytes finalizing = 4;
    repeated bytes matched = 5;
    repeated bytes mismatched = 6;
  }

  message ResidueBlock {
    repeated bytes pending = 1;
    repeated bytes electing = 2;
    repeated bytes computing = 3;
    repeated bytes finalizing = 4;
    repeated bytes matched = 5;
    repeated bytes mismatched = 6;
  }
}

// A ResultFragment message is the network representation of a
// compute.ResultFragment and the metadata needed to distribute it through the
// network.
message ResultFragment {
  // Network data.
  Address to = 1;
  MultiAddress from = 2;

  // Public data.
  bytes id = 3;
  bytes buyOrderId = 4;
  bytes sellOrderId = 5;
  bytes buyOrderFragmentId = 6;
  bytes sellOrderFragmentId = 7;

  // Secure data.
  bytes fstCodeShare = 8;
  bytes sndCodeShare = 9;
  bytes priceShare = 10;
  bytes maxVolumeShare = 11;
  bytes minVolumeShare = 12;
}

// Result messages are sent to signal that a successful order computation has
// happened.
message Result {

  // Public data.
  bytes id = 1;
  bytes buyOrderId = 2;
  bytes sellOrderId = 3;
  
  // Secure data.
  bytes fstCode = 4;
  bytes sndCode = 5;
  bytes price = 6;
  bytes maxVolume = 7;
  bytes minVolume = 8;
}

// A shard is a block of computations
message Shard {
  bytes signature = 1;
  repeated bytes deltas = 2;
  repeated bytes residues = 3;
}

// A FinalizeShardRequest is ...
message FinalizeShardRequest{
  MultiAddress from = 1;
  Shard shard = 2;
}

// A SyncRequest is ...
message SyncRequest{
  MultiAddress from = 1;
}

// A ElectShardRequest is ...
message ElectShardRequest {
  MultiAddress from = 1;
  Shard shard = 2;
}

// A ComputeShardRequest is ...
message ComputeShardRequest {
  MultiAddress from = 1;
  Shard shard = 2;
}

/**
 * Terminal definitions.
 */

// TerminalNode services implement the execution of atomic swaps.
service TerminalNode {
  
  // Send an Atom to some target Node.
  rpc SendAtom (Atom) returns (Atom);
}

// An Atom message is the network representation of a atom.Atom and the
// metadata needed to distribute it through the network.
message Atom {
  // Network data.
  Address to = 1;
  MultiAddress from = 2;

  // Secure data.
  int64 ledger = 3;
  bytes data = 4;
  bytes signature = 5;
}